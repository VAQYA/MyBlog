(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{578:function(t,v,a){t.exports=a.p+"assets/img/TCP三次握手.06fa13a3.png"},579:function(t,v,a){t.exports=a.p+"assets/img/TCP四次挥手.403bfa8f.png"},580:function(t,v,a){t.exports=a.p+"assets/img/session.a40608d6.png"},581:function(t,v,a){t.exports=a.p+"assets/img/token.7d0fbf00.png"},582:function(t,v,a){t.exports=a.p+"assets/img/HTTPS.13351116.png"},583:function(t,v,a){t.exports=a.p+"assets/img/密钥.82693030.png"},584:function(t,v,a){t.exports=a.p+"assets/img/X.509数字证书.dcc0527c.png"},644:function(t,v,a){"use strict";a.r(v);var _=a(5),s=Object(_.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h3",{attrs:{id:"osi的七层网络协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#osi的七层网络协议"}},[t._v("#")]),t._v(" OSI的七层网络协议")]),t._v(" "),_("p",[t._v("应用层、表示层、会话层、传输层、网络层、数据链路层、物理层")]),t._v(" "),_("p",[t._v("HTTP协议：应用层"),_("br"),t._v("\nTCP协议：传输层"),_("br"),t._v("\nip协议：网络层")]),t._v(" "),_("p",[t._v("TCP/IP协议是传输层，主要解决数据如何在网络中传输；HTTP协议是基于TCP连接的，主要解决如何包装数据；"),_("br"),t._v("\nSocket是对TCP/IP协议的封装，不是协议，而是调用接口API，通过Socket我们才能使用TCP/IP协议"),_("br"),t._v("\n若双方是 HTTP 连接，则服务器需要等客户端发送请求后，才能将数据回传给客户端"),_("br"),t._v("\n若双方是 Socket 连接，可以由服务器直接向客户端发送数据。")]),t._v(" "),_("p",[t._v("两台主机通信时依赖Socket，Socket则利用TCP/IP协议建立TCP连接，TCP则依赖于更底层的ip协议，ip协议依赖于更底层的链路层。")]),t._v(" "),_("h3",{attrs:{id:"socket"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#socket"}},[t._v("#")]),t._v(" Socket")]),t._v(" "),_("p",[t._v("套接字，是通信的基石，包含了网络通讯必须的5种信息：连接使用的协议、本地主机的ip地址、本地进程的协议端口、远程主机的ip地址、远端进程的协议端口"),_("br"),t._v("\n建立Socket连接：服务器监听等待客户端的连接请求"),_("code",[t._v("--\x3e")]),t._v("客户端请求(指出服务器套接字的ip和端口号)"),_("code",[t._v("--\x3e")]),t._v("服务端响应把套接字描述发给客户端，之后服务端继续监听")]),t._v(" "),_("p",[t._v("HTTP连接是短链接，Socket是长连接，如果协议栈检测到TCP长时间不再发送数据就会把连接断开，所以想要长时间保持连接可以发送心跳包")]),t._v(" "),_("h3",{attrs:{id:"http响应码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http响应码"}},[t._v("#")]),t._v(" http响应码")]),t._v(" "),_("ul",[_("li",[t._v("200 OK 客户端相应成功")]),t._v(" "),_("li",[t._v("301 Moved Permanently 代表永久性转移，会修改url地址")]),t._v(" "),_("li",[t._v("302 found 代表暂时性转移，不会修改url地址")]),t._v(" "),_("li",[t._v("400 Bad Request 客户端请求有语法错误，不能被服务器所理解")]),t._v(" "),_("li",[t._v("401 Unauthorized 请求未授权")]),t._v(" "),_("li",[t._v("403 Forbidden 服务器收到请求，但拒绝提供服务")]),t._v(" "),_("li",[t._v("404 Not Found 请求的资源不存在 eg:输入了错误的url")]),t._v(" "),_("li",[t._v("500 Internal Server Error 服务器发生了不可预知的错误")]),t._v(" "),_("li",[t._v("502 Bad Gateway 服务器响应超时；网络错误；防火墙阻止请求")]),t._v(" "),_("li",[t._v("503 Server Unavailable 服务器当前正在忙，不能处理客户端的请求，一段时间后可能会恢复")]),t._v(" "),_("li",[t._v("504 Gateway timeout 服务器作为网关或代理来完成客户端的请求，但是服务器没有及时从上游服务器得到响应")])]),t._v(" "),_("h3",{attrs:{id:"forword和redirect"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#forword和redirect"}},[t._v("#")]),t._v(" forword和redirect")]),t._v(" "),_("ul",[_("li",[t._v("forword是服务器行为，转发，地址栏不变，可共享request的数据，一般用于用户登录")]),t._v(" "),_("li",[t._v("redirect是客户端行为，重定向，地址栏改变，不可共享数据，一般用于用户注销")])]),t._v(" "),_("h3",{attrs:{id:"get和post"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#get和post"}},[t._v("#")]),t._v(" get和post")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("get：把请求的数据附在url之后（即http协议头中），url和数据用?分隔，参数之间用&相连；"),_("br"),t._v("\n是form表单的默认提交方式，提交的数据会在浏览器显示出来；"),_("br"),t._v("\n不可用于提交二进制数据，如上传文件；"),_("br"),t._v("\n对数据大小有限制，最多1024字节；")])]),t._v(" "),_("li",[_("p",[t._v("post：把请求的数据放在http包的包体中；"),_("br"),t._v("\n比get方式安全性高")]),t._v(" "),_("p",[t._v("get比post速度要快些，在第三次握手时，post请求中浏览器会先发送post请求头，再发送数据，get请求会一并发送get请求头和数据；"),_("br"),t._v("\n多数浏览器会将get请求的静态资源(数据不会)缓存起来，post不会，对安全性要求不高的查询数据建议用get请求")])])]),t._v(" "),_("h3",{attrs:{id:"关于http-xmlhttprequest-ajax的关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#关于http-xmlhttprequest-ajax的关系"}},[t._v("#")]),t._v(" 关于http,XMLHttpRequest,Ajax的关系")]),t._v(" "),_("p",[t._v("http 是浏览器和web服务器交换数据的协议,规范"),_("br"),t._v("\nXMLHttpRequest 是javascript的一个对象,是浏览器实现的一组api函数(方法),使用这些函数,浏览器再通过http协议请求和发送数据"),_("br"),t._v("\nAjax 不是一种技术,是综合多种技术实现交互的模式:用html+css展示页面>使用XMLHttpRequest请求数据>使用js操作dom")]),t._v(" "),_("h3",{attrs:{id:"tcp和udp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp和udp"}},[t._v("#")]),t._v(" TCP和UDP")]),t._v(" "),_("ol",[_("li",[t._v("TCP是基于连接的、只能一对一，UDP是无连接的、可以一对一，一对多，多对一，多对多的交互通信")]),t._v(" "),_("li",[t._v("TCP是基于字节流的，UDP是数据报文模式")]),t._v(" "),_("li",[t._v("TCP多用于对数据准确性比较高的网路服务如文件传输、邮件发送；UDP多用于要求速度比较快的网路服务，如网络视频、网络电话。")]),t._v(" "),_("li",[t._v("重视数据的安全和准确率用TCP，否则用更高效的UDP")])]),t._v(" "),_("h3",{attrs:{id:"udp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[t._v("#")]),t._v(" UDP")]),t._v(" "),_("p",[t._v("首部：8个字节，包括源端口号、目的端口号、长度、检验和，各16位\n数据区：最大1472字节")]),t._v(" "),_("p",[t._v("数据帧的长度必须在46-1500字节之间，ip数据报的首部为20字节，UDP首部为8字节，所以UDP数据区最大为1472字节")]),t._v(" "),_("h3",{attrs:{id:"udp在什么情况下会丢失精度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#udp在什么情况下会丢失精度"}},[t._v("#")]),t._v(" udp在什么情况下会丢失精度")]),t._v(" "),_("p",[t._v("发送频率过高造成阻塞、发送的包过大等"),_("br"),t._v("\n修改接收区缓冲区的大小")]),t._v(" "),_("h3",{attrs:{id:"tcp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[t._v("#")]),t._v(" TCP")]),t._v(" "),_("p",[t._v("发送的数据包括ip首部、ip数据部分，其中ip数据部分又包括TCP首部、TCP数据部分，TCP首部范围20-60字节，其中有20个字节的固定首部")]),t._v(" "),_("p",[t._v("连接：即客户端和服务器内存里各保存一份对方的信息，如ip、端口号")]),t._v(" "),_("h3",{attrs:{id:"tcp首部"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp首部"}},[t._v("#")]),t._v(" TCP首部")]),t._v(" "),_("p",[t._v("源端口、目的端口、"),_("br"),t._v("\n序号：对字节流进行编号。 TCP接收端可丢弃重复的报文段，记录以杂乱次序达到的报文段\n确认号：期望收到的下一个报文的序号，例：B正确收到的A的序号为501，长度为200，则B期望的下个报文的序号为701，确认号也就是701"),_("br"),t._v("\n数据偏移：TCP数据部分距离报文段起始处的偏移量，实际就是TCP首部的长度"),_("br"),t._v("\n控制位：CWR，ECE，URG，ACK，PSH，RST，SYN，FIN")]),t._v(" "),_("p",[t._v("ACK：设为1时确认应答的字段有效，是累积的，N，表示所有直到N(不包括N)的字节已经成功被接收了"),_("br"),t._v("\nSYN：用于建立连接，为1时表示希望建立连接"),_("br"),t._v("\nFIN：为1时表示今后不再有数据发送，希望断开连接。每个主机对对方的FIN确认应答之后可以断开连接，主机接收到FIN为1的TCP段之后不是马上回复，而是等缓冲区的数据发送完毕自动删除后再发FIN包")]),t._v(" "),_("p",[t._v("窗口：窗口值作为接收方让发送方设置其发送窗口的依据，这样限制是因为接收方的数据缓存空间是有限的")]),t._v(" "),_("h3",{attrs:{id:"tcp心跳"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp心跳"}},[t._v("#")]),t._v(" TCP心跳")]),t._v(" "),_("p",[t._v("TCP是传输层协议\nTCP两端A、B建立连接，A断掉电源或拔掉网线，B不会收到通知\nTCP的建立连接（三次握手）和断开连接（四次挥手）是通过发送数据实现的。B端定时给A端发送数据来检测连接是否异常断开，这就是心跳，数据的内容无关紧要，是数据长度为0的心跳包。TCP协议中有一个KEEP_LIVE开关。\n两端都应该互相发送心跳。")]),t._v(" "),_("h3",{attrs:{id:"tcp是面向连接的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp是面向连接的"}},[t._v("#")]),t._v(" TCP是面向连接的")]),t._v(" "),_("p",[t._v("长连接：server端和client端建立连接后，不断开，进行报文发送和接收\n短连接：连接后，交易完毕后立即断开，长用于一对多，例如一个server对多个client")]),t._v(" "),_("p",[t._v("TCP对传送的每个数据字节都进行编号，并请求接收方回传确认信息（ACK），一定时间内没收到确认信息，则重传。\n数据编码使接收方能够处理数据的失序和重复问题。\n没有接收方的流量控制，会因为接收缓冲区溢出而丢失大量数据\n重视数据的安全传出用TCP，否则用更高效的UDP")]),t._v(" "),_("p",[t._v("TCP，基于流的传输，即无保护消息边界：发送三次数据包，只要接收到缓冲区大小比三个数据包总大小大就行，只要一次接收动作。所以TCP会出现粘包问题，即下一个包的头接着上一个包的尾。"),_("br"),t._v("\nUDP，保护消息边界：发送三次数据包，UDP必须接收三次。")]),t._v(" "),_("h3",{attrs:{id:"tcp的三次握手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp的三次握手"}},[t._v("#")]),t._v(" TCP的三次握手")]),t._v(" "),_("p",[t._v("目的：建立TCP连接通道，确认双方都有收发数据的能力。")]),t._v(" "),_("p",[_("strong",[t._v("序列号seq")]),t._v("：占4个字节，报文段携带数据的的第一个字节的编号（TCP连接发送的所有数据字节都编上一个序号，第一个序号由本地随机产生）。"),_("br"),t._v(" "),_("strong",[t._v("确认号ack")]),t._v("：占4个字节，期待收到下一个报文的第一个数据字节的序号，即当前报文段最后一个字节的编号+1。"),_("br"),t._v(" "),_("strong",[t._v("同步SYN")]),t._v("：SYNchronization，请求建立连接，并且设定其序列号（seq）的初始值。"),_("br"),t._v(" "),_("strong",[t._v("确认ACK")]),t._v("：占1位，仅ACK为1时，ack才有效。"),_("br"),t._v(" "),_("strong",[t._v("FIN")]),t._v("：FIN=1表示此报文段发送方的数据已发送完毕，希望断开连接。FIN报文段即使不携带数据，也要消耗一个序号")]),t._v(" "),_("p",[t._v("SYN=1,ACK=0时，表示这是一个连接请求报文段；若同意连接，则在响应报文段中SYN=1,ACK=1，")]),t._v(" "),_("p",[t._v("SYN、ACK表示标志位，要么是1要么是0；")]),t._v(" "),_("p",[t._v("首先服务器端处于LISTEN监听状态，等待客户端的连接请求")]),t._v(" "),_("ul",[_("li",[t._v("第一次握手：客户端发送SYN包(SYN=1,seq=x)到服务器，进入SYN_SENT状态，等待服务器确认； SYN=1，ACK=0  （服务端知道了：客户端的发送能力、服务端的接收能力都是正常的）")]),t._v(" "),_("li",[t._v("第二次握手：服务器收到SYN包，通过发送ACK(ACK=1,ack=x+1)确认客户的SYN，同时也发送一个自己的SYN(SYN=1,seq=y)包，即SYN+ACK包，此时服务器进入SYN_RECV状态；  （客户端知道了：客户端的接收、发送能力正常、；服务端的接收、发送能力正常）")]),t._v(" "),_("li",[t._v("第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ACK=1,ack=y+1)和序号seq=x+1，此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。   （服务端知道了：客户端的接收能力正常；服务端的发送能力正常）")])]),t._v(" "),_("p",[_("img",{attrs:{src:a(578),alt:"TCP三次握手"}}),_("br"),t._v("\n最少需要三次握手才能双方都确认自己和对方的接收、发送能力都是正常的")]),t._v(" "),_("h3",{attrs:{id:"tcp的四次挥手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp的四次挥手"}},[t._v("#")]),t._v(" TCP的四次挥手")]),t._v(" "),_("p",[t._v("目的：断开连接\n主动关闭方：A 被动关闭方：B")]),t._v(" "),_("ul",[_("li",[t._v("第一次挥手：A发送一个FIN，用于关闭A到B的数据传送，但此时A还可以接受数据。进入FIN_WAIT_1(终止等待)状态；")]),t._v(" "),_("li",[t._v("第二次挥手：B收到FIN后，发送确认报文ACK（序号为收到的序号+1，FIN也会占一个序号）给对方，此时进入CLOSE_WAIT（关闭等待）状态；")]),t._v(" "),_("li",[t._v("第三次挥手：B发送一个FIN，用于关闭B到A的数据传送，进入LAST-ACK（最后确认）状态，等待A确认（即等待接收A发送的ACK包）；")]),t._v(" "),_("li",[t._v("第四次挥手：A收到FIN后，发送一个ACK给B，进入TIME-WAIT（时间等待）状态，必须经过2MSL（最长报文段存活时间）后，当A撤销相应的TCB后，才进入CLOSED状态。B收到A发送的ACK，会立即进入CLOSE状态。")])]),t._v(" "),_("p",[_("img",{attrs:{src:a(579),alt:"TCP四次挥手"}}),_("br"),t._v("\nTIME-WAIT：进入此状态为了确保最后一个确认报文能够到达、让本连接持续时间内所产生的报文都从网络中消失，使得下一次新的连接不会出现旧的连接请求的报文")]),t._v(" "),_("p",[t._v("查看等待time_wait状态连接数:  netstat -an |grep TIME_WAIT|wc -l")]),t._v(" "),_("h3",{attrs:{id:"避免粘包"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#避免粘包"}},[t._v("#")]),t._v(" 避免粘包")]),t._v(" "),_("p",[t._v("1、由发送方引起的粘包，TCP提供了强制数据立即传送的操作指令push，而不必等缓冲区满。（影响效率）\n2、由接收方引起的粘包，优化程序设计，设置接收进程优先级。（频率较高时会来不及接收）\n3、由接收方引起的粘包，将一包数据按结构字段，人为控制分多次接收，然后合并。（效率较低，不适合实时应用）\n周全之策：接收方创建一段预处理线程，预处理数据，将粘连的包分开。")]),t._v(" "),_("p",[t._v("Netty 中实现的一些协议都对粘包、拆包做了很好的处理。")]),t._v(" "),_("h3",{attrs:{id:"解决tcp无保护消息边界问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#解决tcp无保护消息边界问题"}},[t._v("#")]),t._v(" 解决TCP无保护消息边界问题：")]),t._v(" "),_("p",[t._v("1、发送固定长度的消息\n2、把消息的尺寸与消息一块发送\n3、使用特殊标记来区分消息间隔")]),t._v(" "),_("h3",{attrs:{id:"拆包"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#拆包"}},[t._v("#")]),t._v(" 拆包")]),t._v(" "),_("p",[t._v("要发送的数据大于 TCP 发送缓冲区剩余空间大小，将会发生拆包")]),t._v(" "),_("h3",{attrs:{id:"封包"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#封包"}},[t._v("#")]),t._v(" 封包")]),t._v(" "),_("p",[t._v("给一段数据加个包头，这样数据包就分为包头+包尾两部分")]),t._v(" "),_("h3",{attrs:{id:"rtt"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rtt"}},[t._v("#")]),t._v(" RTT")]),t._v(" "),_("p",[t._v("一个报文段从发送到接收再到确认所经历的往返时间。")]),t._v(" "),_("h3",{attrs:{id:"tcp滑动窗口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp滑动窗口"}},[t._v("#")]),t._v(" TCP滑动窗口")]),t._v(" "),_("p",[t._v("窗口是缓存的一部分，用来暂时存放字节流，发送方和接收方各有一个窗口，接收方通过TCP报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其他值信息设置自己的窗口大小")]),t._v(" "),_("h2",{attrs:{id:"http"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),_("p",[t._v("默认端口80")]),t._v(" "),_("h3",{attrs:{id:"用于承载用户相关信息的http请求头部"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#用于承载用户相关信息的http请求头部"}},[t._v("#")]),t._v(" 用于承载用户相关信息的Http请求头部")]),t._v(" "),_("p",[t._v("From  用户的email地址  （为防止接收垃圾邮件，浏览器很少发送From）\nUser-Agent  用户的浏览器软件"),_("br"),t._v("\nReferer  用户是从这个页面上依照链接跳转过来的"),_("br"),t._v("\nAuthorization  用户名和密码"),_("br"),t._v("\nClient-IP 客户端的ip地址"),_("br"),t._v("\nX-Forwarded-For  客户端的ip地址"),_("br"),t._v("\nCookie 服务器产生的id标签")]),t._v(" "),_("h3",{attrs:{id:"http方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http方法"}},[t._v("#")]),t._v(" HTTP方法")]),t._v(" "),_("p",[t._v("GET： 用于请求访问已经被URI（统一资源标识符）识别的资源，可以通过URL传参给服务器"),_("br"),t._v("\nPOST：用于传输信息给服务器，主要功能与GET方法类似，但一般推荐使用POST方式。"),_("br"),t._v("\nPUT： 传输文件，报文主体中包含文件内容，保存到对应URI位置。"),_("br"),t._v("\nHEAD： 获得报文首部，与GET方法类似，只是不返回报文主体，一般用于验证URI是否有效。"),_("br"),t._v("\nDELETE：删除文件，与PUT方法相反，删除对应URI位置的文件。"),_("br"),t._v("\nOPTIONS：查询相应URI支持的HTTP方法")]),t._v(" "),_("h3",{attrs:{id:"完整的http请求步骤"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#完整的http请求步骤"}},[t._v("#")]),t._v(" 完整的HTTP请求步骤")]),t._v(" "),_("ol",[_("li",[t._v("建立TCP连接")]),t._v(" "),_("li",[t._v("Web浏览器向Web服务器发送请求行")]),t._v(" "),_("li",[t._v("Web浏览器向Web服务器发送请求头")]),t._v(" "),_("li",[t._v("Web服务器应答")]),t._v(" "),_("li",[t._v("Web服务器发送响应头")]),t._v(" "),_("li",[t._v("Web服务器向Web浏览器发送数据")]),t._v(" "),_("li",[t._v("Web服务器关闭TCP连接。如果浏览器或服务器的头信息加入了Connection:keep-alive，就会保持连接，以节省每次连接都建立新连接所需的时间，还节省了网络带宽")])]),t._v(" "),_("h3",{attrs:{id:"http1-1新特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http1-1新特性"}},[t._v("#")]),t._v(" HTTP1.1新特性")]),t._v(" "),_("ul",[_("li",[t._v("默认持久连接")]),t._v(" "),_("li",[t._v("管线化，可以同时发送多个HTTP请求，而不用一个个等待响应")]),t._v(" "),_("li",[t._v("断点续传，实际就是分块传输")])]),t._v(" "),_("h3",{attrs:{id:"cookie和session"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cookie和session"}},[t._v("#")]),t._v(" Cookie和Session")]),t._v(" "),_("p",[t._v("HTTP是无状态协议，每次的后续请求需要前面的信息时都需要再把所有的信息重传，导致每次连接传送的数据量增大。\n于是，Cookie和Session应运而生")]),t._v(" "),_("p",[t._v("Cookie是服务器返回给客户端的特殊信息(在响应头Response Header中)，这些信息以文本文件的形式存在客户端，然后客户端每次向浏览器发送请求时都会带上这些信息(在请求头中Request Header)")]),t._v(" "),_("p",[t._v("Session是通过服务器保存状态的，Java中是通过HttpServletRequest的getSession方法创建的，"),_("br"),t._v("\n服务器创建Session的同时，会给Session生成一个唯一的SessionId，并将SessionId响应给客户端，"),_("br"),t._v("\n客户端下次请求就带上SessionId，服务器根据SessionId找到相应的Session"),_("br"),t._v(" "),_("img",{attrs:{src:a(580),alt:"Session.png"}})]),t._v(" "),_("p",[t._v("Cookie只能存储String类型的对象，Session可以存储任意类型的Java对象\n重要信息保存在Session（如登陆信息），需要保留的信息存在Cookie（如购物车）\nSession通过Cookie工作，Cookie传输的SessionID让Session知道这个客户端到底是谁")]),t._v(" "),_("p",[t._v("token，适用于项目级的前后端分离（前后端代码运行在不同的服务器下）\n请求登录时，token和sessionId原理相同，是对key和key对应的用户信息进行加密后的加密字符，"),_("br"),t._v("\n登录成功后，会在响应主体中将{token：'字符串'}返回给客户端。"),_("br"),t._v("\n客户端通过cookie、sessionStorage、localStorage都可以进行存储。"),_("br"),t._v("\n再次请求时不会默认携带，需要在请求拦截器位置给请求头中添加认证字段Authorization携带token信息，服务器端就可以通过token信息查找用户登录状态。\n"),_("img",{attrs:{src:a(581),alt:"Token.png"}})]),t._v(" "),_("h3",{attrs:{id:"websockets-应用层协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#websockets-应用层协议"}},[t._v("#")]),t._v(" WebSockets(应用层协议)")]),t._v(" "),_("p",[t._v("一种计算机通信协议，和HTTP是两个完全不同的协议，WebSocket是利用HTTP进行握手，两者都是基于TCP连接的。\nWebSocket是一种持久化的协议，HTTP是非持久化的\nHTTP1.0中，请求是一个Request一个Response，1.1后，做了优化，有一个keep-alive，一个Http连接可以发送多个Request连接，接收多个Response。\nHttp协议永远是这样，一个Request只能有一个Response，Response是被动的，不能主动发起。")]),t._v(" "),_("p",[t._v("WebSocket是一个双通道的连接，在同一个TCP连接上，可以同时双向传送数据")]),t._v(" "),_("p",[t._v("Ajax轮询：浏览器隔几秒发送一个请求，询问服务器是否有新信息。\nlong pull：采用阻塞模型，客户端建立连接后，如果没有消息就一直不返回Response，直到有消息后返回，客户端接收到消息后马上再次建立连接，周而复始。")]),t._v(" "),_("p",[t._v("WebSocket缺点：一个HTTP/WebSocket连接要跨越千山万水、经过无数的路由器、防火墙转发过滤，最后才到终点，"),_("br"),t._v("\n在这些中间结点中可能会以为一份连接在一段时间没有数据就等于失效，会自作主张的切断连接，但服务端和客户端又不会收到任何提示。\n解决：让浏览器和客户端能够发送ping/pong Frame以此来维持连接状态，Frame是一种特殊的数据包，只包含一些元数据")]),t._v(" "),_("p",[t._v("应用场景：即时聊天通信、多玩家游戏、在线协同编辑、实时数据流的拉取和推送、实时地理位置")]),t._v(" "),_("h3",{attrs:{id:"阿里piapia开发规范"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#阿里piapia开发规范"}},[t._v("#")]),t._v(" 阿里PiaPia开发规范")]),t._v(" "),_("p",[t._v("高并发服务器建议调小TCP协议的time_await超时时间，调大最大事件句柄数(fd)")]),t._v(" "),_("h3",{attrs:{id:"ttl"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ttl"}},[t._v("#")]),t._v(" TTL")]),t._v(" "),_("p",[t._v("Time To Live的缩写，该字段指定IP包被路由器丢弃之前允许通过的最大网段数量"),_("br"),t._v("\nTTL与DNS TTL有区别。二者都是生存时间，前者指ICMP包的转发次数（跳数），后者指域名解析信息在DNS中的存在时间。")]),t._v(" "),_("h2",{attrs:{id:"https"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),_("p",[t._v("默认端口443\n传输过程中SSL加密，安全性更好，响应速度较慢，消耗资源较多，需要用到CA证书"),_("br"),t._v("\nSSL是个二进制协议，流量承载默认是443端口"),_("br"),t._v(" "),_("img",{attrs:{src:a(582),alt:"HTTP和HTTPS"}}),t._v("\nHTTPS相比于HTTP，提供了一个传输级的密码安全层")]),t._v(" "),_("h3",{attrs:{id:"ssl握手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ssl握手"}},[t._v("#")]),t._v(" SSL握手")]),t._v(" "),_("p",[t._v("发送已加密的报文之前，客户端和服务端要完成SSL握手，完成以下工作：")]),t._v(" "),_("ul",[_("li",[t._v("交换协议版本号、")]),t._v(" "),_("li",[t._v("选择一个两端都了解的密码、")]),t._v(" "),_("li",[t._v("对两端的身份进行认证、")]),t._v(" "),_("li",[t._v("生成临时的会话密钥，以便加密信道")])]),t._v(" "),_("h3",{attrs:{id:"链接建立过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#链接建立过程"}},[t._v("#")]),t._v(" 链接建立过程")]),t._v(" "),_("ol",[_("li",[t._v("客户端向服务器发送一个请求")]),t._v(" "),_("li",[t._v("服务器发送一个SSL证书给客户端，内容包括：证书的发布机构、有效期、所有者、签名、公钥")]),t._v(" "),_("li",[t._v("客户端对发来的公钥进行真伪校验，校验为真则使用公钥对"),_("strong",[t._v("对称加密算法种类和对称密钥")]),t._v("进行加密")]),t._v(" "),_("li",[t._v("服务器使用私钥进行解密，并使用对称密钥加密确认信息发送给客户端")]),t._v(" "),_("li",[t._v("随后客户端和服务器端使用对称密钥进行信息传输")])]),t._v(" "),_("h3",{attrs:{id:"密钥"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#密钥"}},[t._v("#")]),t._v(" 密钥")]),t._v(" "),_("p",[t._v("改变密码行为的数字化参数，在密码机中输入正确的密钥，解密过程才能正确进行，每个密码机都有不同的密钥"),_("br"),t._v(" "),_("img",{attrs:{src:a(583),alt:"密钥"}})]),t._v(" "),_("p",[t._v("很多情况下，编/解码的算法都是众所周知的，因此密钥就是唯一保密的东西了")]),t._v(" "),_("h3",{attrs:{id:"对称密钥加密算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对称密钥加密算法"}},[t._v("#")]),t._v(" 对称密钥加密算法")]),t._v(" "),_("p",[t._v("编码和解码时使用相同的密钥。加密速度快，如：DES、AES")]),t._v(" "),_("h3",{attrs:{id:"非对称密钥加密算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#非对称密钥加密算法"}},[t._v("#")]),t._v(" 非对称密钥加密算法")]),t._v(" "),_("p",[t._v("编码和解码使用不同的密钥，密钥成对出现：公钥和私钥。")]),t._v(" "),_("p",[t._v("公钥：编码密钥，众所周知的。 公钥是从数字证书里获取的。"),_("br"),t._v("\n私钥：解码密钥，只有主机才知道，不在网络中传输")]),t._v(" "),_("p",[t._v("相对对称加密算法加密速度较慢，如：RSA、DSA")]),t._v(" "),_("h3",{attrs:{id:"公开密钥加密系统"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#公开密钥加密系统"}},[t._v("#")]),t._v(" 公开密钥加密系统")]),t._v(" "),_("p",[t._v("一种能够使数百万计算机便捷的发送机密报文的系统")]),t._v(" "),_("h3",{attrs:{id:"数字签名"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数字签名"}},[t._v("#")]),t._v(" 数字签名")]),t._v(" "),_("p",[t._v("用来验证报文未被伪造或篡改的校验和，校验和只有用户的私有密钥才能产生")]),t._v(" "),_("p",[t._v("A发送一条报文到服务端B：")]),t._v(" "),_("ol",[_("li",[t._v("A将变长的报文转为定长的摘要信息(通过哈希函数)")]),t._v(" "),_("li",[t._v("将摘要通过A的私钥进行加密得到数字签名")]),t._v(" "),_("li",[t._v("将数字签名附加在报文的尾端，发送给B")]),t._v(" "),_("li",[t._v("B同A一样，先将报文转为摘要信息")]),t._v(" "),_("li",[t._v("B用公钥将数字签名进行解密得到摘要信息")]),t._v(" "),_("li",[t._v("将两个摘要信息进行对比，相同则确定是A发送的。")])]),t._v(" "),_("p",[t._v("数字签名技术是将摘要信息用发送者的私钥加密，与原文一起传送给接收者。\n接收者用自己的公钥解密被加密的摘要信息，然后用HASH函数对收到的原文产生一个摘要信息，与解密的摘要信息对比。\n如果相同，则说明收到的信息是完整的，在传输过程中没有被修改，否则说明信息被修改过，因此数字签名能够验证信息的完整性。")]),t._v(" "),_("h3",{attrs:{id:"数字证书"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数字证书"}},[t._v("#")]),t._v(" 数字证书")]),t._v(" "),_("p",[t._v("一个由可信的组织，验证和签发的识别信息")]),t._v(" "),_("p",[t._v("虽然数字证书没有单一的全球标准，但是大多数证书都以一种X.509 v3格式来存储它们的信息")]),t._v(" "),_("p",[_("img",{attrs:{src:a(584),alt:"X.509数字证书"}})]),t._v(" "),_("p",[t._v("HTTPS建立连接时，浏览器都会获取所连接服务器的数字证书，如果没有，则安全连接就会失败")]),t._v(" "),_("h3",{attrs:{id:"暂存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#暂存"}},[t._v("#")]),t._v(" 暂存")]),t._v(" "),_("p",[t._v("客户端向服务器请求对称加密的密钥，服务端用非对称加密加密后再传输")]),t._v(" "),_("h3",{attrs:{id:"jwt鉴权"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jwt鉴权"}},[t._v("#")]),t._v(" JWT鉴权")]),t._v(" "),_("p",[t._v("通过JWT的方式来进行用户认证和信息传递，保证服务之间用户无状态的传递。")]),t._v(" "),_("h3",{attrs:{id:"dns域名解析服务器domain-name-server"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dns域名解析服务器domain-name-server"}},[t._v("#")]),t._v(" DNS域名解析服务器Domain Name Server")]),t._v(" "),_("p",[t._v("把域名翻译成ip")]),t._v(" "),_("h3",{attrs:{id:"mac地址"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mac地址"}},[t._v("#")]),t._v(" MAC地址")]),t._v(" "),_("p",[t._v("网络中用来识别网卡设备的物理地址，不变、唯一。")]),t._v(" "),_("h3",{attrs:{id:"ip"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ip"}},[t._v("#")]),t._v(" ip")]),t._v(" "),_("p",[t._v("分为两个部分：网络部分+主机部分，IPv4中，共四段32位组成，每段的范围为0-255（二进制表示为00000000-11111111），其中前三段（即前24位）是网络部分，最后一段是主机部分")]),t._v(" "),_("h3",{attrs:{id:"局域网的网段有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#局域网的网段有哪些"}},[t._v("#")]),t._v(" 局域网的网段有哪些？")]),t._v(" "),_("p",[t._v("局域网的IP分为3类：\nA类：10段，后三位自由分配，也就是 10.0.0.0 - 10.255.255.255；IP地址数：16777216个\nB类：172.16段，后两位自由分配，也就是 172.16.0.0 - 172.31.255.255；IP地址数：1048576个\nC类：192.168段，后两位自由分配，也就是 192.168.0.0 - 192.168.255.255；IP地址数：65536个")]),t._v(" "),_("h3",{attrs:{id:"子网掩码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#子网掩码"}},[t._v("#")]),t._v(" 子网掩码")]),t._v(" "),_("p",[t._v("为了区分ip地址的网络位和主机位，例：255.255.255.0")]),t._v(" "),_("h3",{attrs:{id:"_192-168-0-0-24什么意思"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_192-168-0-0-24什么意思"}},[t._v("#")]),t._v(" 192.168.0.0/24什么意思？")]),t._v(" "),_("p",[t._v("192.168.0.0/24是一个CIDR（Classless Inter-Domain Routing，无类域间路由）网络地址表示法，用于表示一个IP地址段和其对应的子网掩码。其中，192.168.0.0是IP地址段的起始地址，/24表示子网掩码的长度为24位。即子网掩码的前24位是1，后8位是0，二进制形式是11111111.11111111.11111111.00000000，表示前24位是网络地址，后8位是主机地址。因此，该CIDR地址表示192.168.0.0到192.168.0.255的256个IP地址，其中前24位是网络地址，后8位是主机地址。这意味着该CIDR地址对应的子网可以容纳最多256个主机。")]),t._v(" "),_("h3",{attrs:{id:"网关gateway"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网关gateway"}},[t._v("#")]),t._v(" 网关Gateway")]),t._v(" "),_("p",[t._v("又称网间连接器，两个网络通过网关在传输层上实现网络互连，TCP/IP协议里的网关是最常用的。"),_("br"),t._v("\n根据子网掩码与主机的ip地址做与运算，根据结果判断两个主机的是否在同一个网络里，"),_("br"),t._v("\n如果主机A发送数据到主机B，但是和B不在同一个网络中，"),_("br"),t._v("\n则A先将数据包转发给自己的网关A，然后网关A再转发给网关B，网关B再将数据包转发给主机B；"),_("br"),t._v("\n所以应该设置好网关的ip地址(默认通常是该子网段的第一个ip)，是具有路由功能的设备的ip地址，如路由器、启用了路由协议的服务器。")]),t._v(" "),_("h3",{attrs:{id:"内网和外网"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内网和外网"}},[t._v("#")]),t._v(" 内网和外网")]),t._v(" "),_("p",[t._v("浏览器查询的地址是外网地址，都可以访问的；ipconfig查询的是内网地址，只能同一个网关下(同一局域网)的设备才能互相访问；ipconfig和浏览器查询出的ip不一样说明本机分配的是内网地址")]),t._v(" "),_("h3",{attrs:{id:"外网ip地址、内网ip地址之间如何转化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#外网ip地址、内网ip地址之间如何转化"}},[t._v("#")]),t._v(" 外网IP地址、内网IP地址之间如何转化？")]),t._v(" "),_("p",[t._v("外网IP地址和内网IP地址之间可以用NAT（Network Address Translation）技术来进行地址映射，从而互相转化。一般来说，主要是让内网IP地址设备通过网关的外部IP地址访问外部的服务。也可以将网关的外部IP地址的多个端口映射到不同的内部IP地址设备上。")]),t._v(" "),_("h3",{attrs:{id:"ipv6是否也有内网ip"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ipv6是否也有内网ip"}},[t._v("#")]),t._v(" IPv6是否也有内网IP？")]),t._v(" "),_("p",[t._v("IPv6的内网地址可以用CIDR方式表示为fd00::/8，包含的内网IP地址数量远远大于IPv4的内网IP地址数量。")]),t._v(" "),_("h3",{attrs:{id:"吞吐量"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#吞吐量"}},[t._v("#")]),t._v(" 吞吐量")]),t._v(" "),_("p",[t._v("网络中的数据是由一个个数据包组成，防火墙对每个数据包的处理要耗费资源。"),_("br"),t._v("\n吞吐量是指在没有帧丢失的情况下，设备能够接受的最大速率。"),_("br"),t._v("\n其测试方法是：在测试中以一定速率发送一定数量的帧，并计算待测设备传输的帧，"),_("br"),t._v("\n如果发送的帧与接收的帧数量相等，那么就将发送速率提高并重新测试；"),_("br"),t._v("\n如果接收帧少于发送帧则降低发送速率重新测试，直至得出最终结果。"),_("br"),t._v("\n吞吐量测试结果以比特/秒或字节/秒表示。")]),t._v(" "),_("h3",{attrs:{id:"http协议content-type和accept的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http协议content-type和accept的区别"}},[t._v("#")]),t._v(" HTTP协议content-type和accept的区别")]),t._v(" "),_("p",[t._v("Content-type代表客户端发送的实体数据的数据类型"),_("br"),t._v("\nAccept代表客户端希望接收的数据类型")]),t._v(" "),_("h3",{attrs:{id:"访问tyrz-gd-gov-cn时-java-net-unknownhostexception-tyrz-gd-gov-cn-name-or-service-not-known"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#访问tyrz-gd-gov-cn时-java-net-unknownhostexception-tyrz-gd-gov-cn-name-or-service-not-known"}},[t._v("#")]),t._v(" 访问tyrz.gd.gov.cn时，java.net.UnknownHostException: tyrz.gd.gov.cn Name or service not known")]),t._v(" "),_("p",[t._v("解决方式：在/etc/hosts中添加映射210.76.73.10\ttyrz.gd.gov.cn"),_("br"),t._v("\n127.0.0.1是ip4的访问映射，::1是ip6的访问映射")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4  \n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n210.76.73.10\ttyrz.gd.gov.cn\n19.15.0.200:8080 zwwx.gdzwfw.gov.cn\n")])])])])}),[],!1,null,null,null);v.default=s.exports}}]);