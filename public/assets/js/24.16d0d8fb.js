(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{585:function(t,a,e){t.exports=e.p+"assets/img/存储引擎对比.fd06dbbf.png"},648:function(t,a,e){"use strict";e.r(a);var v=e(5),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h3",{attrs:{id:"默认端口号"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#默认端口号"}},[t._v("#")]),t._v(" 默认端口号")]),t._v(" "),v("p",[t._v("3306")]),t._v(" "),v("h3",{attrs:{id:"三大范式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三大范式"}},[t._v("#")]),t._v(" 三大范式")]),t._v(" "),v("ol",[v("li",[t._v("列都是不可再分的")]),t._v(" "),v("li",[t._v("每张表只描述一件事情")]),t._v(" "),v("li",[t._v("不存在对非主键列的传递依赖")])]),t._v(" "),v("h3",{attrs:{id:"if"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#if"}},[t._v("#")]),t._v(" if")]),t._v(" "),v("p",[t._v("if(a.status = #{status},1,0)")]),t._v(" "),v("h3",{attrs:{id:"if、else语句"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#if、else语句"}},[t._v("#")]),t._v(" if、else语句")]),t._v(" "),v("p",[t._v("case 字段 when 值 then 结果 else 其他情况 end\ncase when 表达式（字段=值） then 结果 else 其他情况 end")]),t._v(" "),v("h3",{attrs:{id:"format"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#format"}},[t._v("#")]),t._v(" format（）")]),t._v(" "),v("p",[t._v("format(100.234,2) 四舍五入取两位小数 结果为100.23")]),t._v(" "),v("h3",{attrs:{id:"distinct"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#distinct"}},[t._v("#")]),t._v(" DISTINCT")]),t._v(" "),v("p",[t._v("只能放在最前面，只会查出一个字段值\nselect DISTINCT id，name 则只会查到id\n可用group by id 查出多个字段值")]),t._v(" "),v("h3",{attrs:{id:"limit"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#limit"}},[t._v("#")]),t._v(" limit")]),t._v(" "),v("p",[t._v("limit 4 OFFSET 3\n等同于\nlimit 3，4\n从第3个开始取4行")]),t._v(" "),v("h3",{attrs:{id:"and-和-or"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#and-和-or"}},[t._v("#")]),t._v(" and 和 or")]),t._v(" "),v("p",[t._v("and的优先级比or高，（）优先级更高，建议多用，没坏处")]),t._v(" "),v("h3",{attrs:{id:"not-否定"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#not-否定"}},[t._v("#")]),t._v(" not 否定")]),t._v(" "),v("p",[t._v("not in")]),t._v(" "),v("h3",{attrs:{id:"正则表达式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),v("p",[t._v("REGEXP用法如like")]),t._v(" "),v("h3",{attrs:{id:"拼接-concat"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#拼接-concat"}},[t._v("#")]),t._v(" 拼接 CONCAT（）")]),t._v(" "),v("h3",{attrs:{id:"取出空格整理数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#取出空格整理数据"}},[t._v("#")]),t._v(" 取出空格整理数据")]),t._v(" "),v("p",[t._v("Trim()函数去掉值左右两边的空格\nRTrim()去掉值右边的空格\nLTrim()去掉值左边的空格")]),t._v(" "),v("h3",{attrs:{id:"select-now"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#select-now"}},[t._v("#")]),t._v(" select now()")]),t._v(" "),v("p",[t._v("返回当前时间与日期 2019-11-09 15:46:07")]),t._v(" "),v("h3",{attrs:{id:"abs"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#abs"}},[t._v("#")]),t._v(" Abs()")]),t._v(" "),v("p",[t._v("返回一个数的绝对值")]),t._v(" "),v("h3",{attrs:{id:"聚集函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#聚集函数"}},[t._v("#")]),t._v(" 聚集函数")]),t._v(" "),v("p",[t._v("AVG()平均数\nCOUNT()某列的行数\nMAX()最大值\nMIN()最小值\nSUM()某列值之和")]),t._v(" "),v("h3",{attrs:{id:"where后不能跟聚集函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#where后不能跟聚集函数"}},[t._v("#")]),t._v(" where后不能跟聚集函数")]),t._v(" "),v("p",[t._v("因为where是对数据进行筛选，聚集函数是基于完整的所有数据进行计算")]),t._v(" "),v("h3",{attrs:{id:"null"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#null"}},[t._v("#")]),t._v(" null")]),t._v(" "),v("p",[t._v("某字段为null, where a is null\n某字段不为null, where a is not null")]),t._v(" "),v("h3",{attrs:{id:"group-by"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#group-by"}},[t._v("#")]),t._v(" group by")]),t._v(" "),v("p",[t._v("select\nfrom\nwhere       过滤行\ngroup by\nhaving      过滤分组\norder by\nlimit")]),t._v(" "),v("h3",{attrs:{id:"组合查询union"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#组合查询union"}},[t._v("#")]),t._v(" 组合查询UNION")]),t._v(" "),v("p",[t._v("必须包含相同的列、表达式或聚集函数（查询的顺序可以不同,但类型必须相同，或可以隐式转换）")]),t._v(" "),v("h3",{attrs:{id:"union-和union-all"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#union-和union-all"}},[t._v("#")]),t._v(" UNION 和UNION ALL")]),t._v(" "),v("p",[t._v("union会自动去除重复的行，union all会返回所有的行（数据）")]),t._v(" "),v("h3",{attrs:{id:"union-的排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#union-的排序"}},[t._v("#")]),t._v(" UNION 的排序")]),t._v(" "),v("p",[t._v("多个select语句进行union，只有最后一条语句中的order by才生效")]),t._v(" "),v("h3",{attrs:{id:"函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),v("p",[t._v("timediff(a,b) 返回a-b的时间间隔，a和b表示日期或时间，必须格式一致")]),t._v(" "),v("p",[t._v("now() 返回当前日期时间\ncurdate() 当前日期\ncurtime() 当前时间")]),t._v(" "),v("p",[t._v("1、round(x,d)  ，x指要处理的数，d是指保留几位小数")]),t._v(" "),v("p",[t._v("这里有个值得注意的地方是，d可以是负数，这时是指定小数点左边的d位整数位为0,同时小数位均为0；")]),t._v(" "),v("p",[t._v("2、round(x)  ,其实就是round(x,0),也就是默认d为0；")]),t._v(" "),v("h3",{attrs:{id:"全文本搜索"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#全文本搜索"}},[t._v("#")]),t._v(" 全文本搜索")]),t._v(" "),v("ol",[v("li",[t._v("normal：普通索引; unique：唯一索引; fulltext：全文本索引; spatial：空间索引")]),t._v(" "),v("li",[t._v("要进行全文本搜索，必须索引被搜索的列 fulltext（）")]),t._v(" "),v("li",[t._v("Match中的值必须和fulltext的一致，且次序一致")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('select *\nfrom user\n//where Match(name) Against("zhangsan")   查询name中有zhangsan的数据\n//where Match(name) Against("zhangsan" with query expansion)  查询扩张，第一行有zhangsan和lisi 第二行有只有lisi，但第二行也能被查出来\n\n')])])]),v("h3",{attrs:{id:"插入数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#插入数据"}},[t._v("#")]),t._v(" 插入数据")]),t._v(" "),v("p",[t._v('insert into user (id , name , gender ,age ) values ( "1","张三",1,"18"),("2","李四",0,"19")')]),t._v(" "),v("h3",{attrs:{id:"插入检索出的数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#插入检索出的数据"}},[t._v("#")]),t._v(" 插入检索出的数据")]),t._v(" "),v("p",[t._v("insert into  user （id，name,gender,age)  select id ,name ,gender ,age from user_new  //并不要求两个表的列名相同")]),t._v(" "),v("h3",{attrs:{id:"更新数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#更新数据"}},[t._v("#")]),t._v(" 更新数据")]),t._v(" "),v("p",[t._v('update user set age = "28" , gender = 0  where id = "1"')]),t._v(" "),v("h3",{attrs:{id:"删除数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#删除数据"}},[t._v("#")]),t._v(" 删除数据")]),t._v(" "),v("p",[t._v('delete from user where id = "2"')]),t._v(" "),v("p",[t._v("如果要删除所有数据，truncate user （更快，因为不是逐条删除，实际是删除了此表又重新创建了）")]),t._v(" "),v("h3",{attrs:{id:"删除表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#删除表"}},[t._v("#")]),t._v(" 删除表")]),t._v(" "),v("p",[t._v("drop table [IF EXISTS] <表名1> [ , <表名2> , <表名3> …];")]),t._v(" "),v("h3",{attrs:{id:"in和exist"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#in和exist"}},[t._v("#")]),t._v(" in和exist")]),t._v(" "),v("p",[t._v("in没有用到索引")]),t._v(" "),v("p",[t._v("select *\nfrom A\nwhere 1=1\nand exist （select 1 from B where 。。。） exist检测行的存在，返回的是true或false")]),t._v(" "),v("p",[t._v("exist用于B表比A表数据大的情况")]),t._v(" "),v("h3",{attrs:{id:"自动增长"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自动增长"}},[t._v("#")]),t._v(" 自动增长")]),t._v(" "),v("p",[t._v("Auto_increment 每个表只允许一个自动增长列")]),t._v(" "),v("p",[t._v("select last_insert_id() 函数，返回最后一个Auto_increment的值")]),t._v(" "),v("h3",{attrs:{id:"默认值"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#默认值"}},[t._v("#")]),t._v(" 默认值")]),t._v(" "),v("p",[t._v("插入列时default 指定默认值，不允许使用函数，只支持常量")]),t._v(" "),v("h3",{attrs:{id:"重命名表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重命名表"}},[t._v("#")]),t._v(" 重命名表")]),t._v(" "),v("p",[t._v("rename table user to user_new")]),t._v(" "),v("h3",{attrs:{id:"视图"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#视图"}},[t._v("#")]),t._v(" 视图")]),t._v(" "),v("p",[t._v("创建 create view shitu_name as select 。。。。。。")]),t._v(" "),v("h3",{attrs:{id:"存储过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#存储过程"}},[t._v("#")]),t._v(" 存储过程")]),t._v(" "),v("ol",[v("li",[t._v("创建\ncreate procedure procedure_name1()\nbegin\nselect * from employee;\nend")])]),t._v(" "),v("p",[t._v("SQL语句后要有分号;")]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[v("p",[t._v("调用\ncall procedure_name1()")])]),t._v(" "),v("li",[v("p",[t._v("删除\ndrop procedure procedure_name1")])]),t._v(" "),v("li",[v("p",[t._v("有参的存储过程\ncreate procedure procedure_name2(in employee_id varchar , out employee_name varchar , out employee_age int)\nbegin\nselect name into employee_name from employee where id = employee_id;\nselect age into employee_age from employee where id = employee_id;\nend")])])]),t._v(" "),v("p",[t._v("call procedure_name2(@employee_id, @employee_id , @employee_age)")]),t._v(" "),v("h3",{attrs:{id:"事务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[t._v("#")]),t._v(" 事务")]),t._v(" "),v("p",[t._v("MyISAM 不支持\nInnoDB 支持")]),t._v(" "),v("h2",{attrs:{id:"mysql数据库设计规范"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mysql数据库设计规范"}},[t._v("#")]),t._v(" MySQL数据库设计规范")]),t._v(" "),v("h3",{attrs:{id:"命名规范"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#命名规范"}},[t._v("#")]),t._v(" 命名规范")]),t._v(" "),v("ol",[v("li",[t._v("命名有意义，一眼知道表、字段是干什么用的")]),t._v(" "),v("li",[v("strong",[t._v("表名、字段")]),t._v("名均使用 "),v("strong",[t._v("小写字母")]),t._v("，单词间以下划线“_”分割，如：“device_model”。")]),t._v(" "),v("li",[t._v("表名字段名长度禁止超过32个字符，为了统一规范，易于查询，"),v("strong",[t._v("超过的单词尽量可读缩略的形式进行书写")])]),t._v(" "),v("li",[t._v("普通索引名称以 "),v("strong",[t._v("idx_")]),t._v(" 开头，唯一索引以 "),v("strong",[t._v("uk_")]),t._v(" 开头。")]),t._v(" "),v("li",[t._v("外键尽量以被引用表名称加 "),v("strong",[t._v("_id")]),t._v(" 组成，如：“device_id”。")]),t._v(" "),v("li",[t._v("临时库、表名必须以tmp为前缀，并以日期为后缀，如：“tmp_device”")]),t._v(" "),v("li",[t._v("备份库、表必须以bak为前缀，并以日期为后缀，如：“bak_device_20180611”")]),t._v(" "),v("li",[t._v("避免使用NULL字段，NULL字段很难查询优化，NULL字段的索引需要额外空间，NULL字段的复合索引无效")])]),t._v(" "),v("h3",{attrs:{id:"基础规范"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基础规范"}},[t._v("#")]),t._v(" 基础规范")]),t._v(" "),v("ol",[v("li",[t._v("统一使用 INNODB 存储引擎，除非某些特定原因再行商议。")]),t._v(" "),v("li",[t._v("表字符集统一使用 "),v("strong",[t._v("UTF8")]),t._v("，如果emoji等表情符号的存储需求，可申请使用 "),v("strong",[t._v("UTF8MB4")]),t._v(" 字符集。")]),t._v(" "),v("li",[v("strong",[t._v("所有表、字段必须添加注释")]),t._v("，id 可除外， "),v("strong",[t._v("type型(枚举)需指明主要值的含义")]),t._v("，如”1 公开课，2 线上课”。")]),t._v(" "),v("li",[t._v("使用 "),v("strong",[t._v("timestamp")]),t._v(" 存储时间。")]),t._v(" "),v("li",[t._v("表必需指定主键，尽量采用自增方式。")]),t._v(" "),v("li",[t._v("不强制使用外键约束，此过程由业务端实现，提高性能。")]),t._v(" "),v("li",[t._v("能不用 NOT IN 就不用 NOT IN，会把空和NULL给查出来。")]),t._v(" "),v("li",[t._v("尽可能少的使用 TEXT、BLOB 类型。")]),t._v(" "),v("li",[t._v("单表数据量建议控制在5000W以内，超过的表必须考虑水平切分。")]),t._v(" "),v("li",[t._v("用 "),v("strong",[t._v("DECIMAL代替FLOAT和DOUBLE")]),t._v("存储精确浮点数")]),t._v(" "),v("li",[t._v("禁止在数据库中存储明文密码，把密码加密后存储")]),t._v(" "),v("li",[t._v("注意limit分页效率。Limit越大，效率越低。可以改写limit，如：select id from t limit 10000, 10   改写为=>   select id from t where id > 10000 limit 10")])]),t._v(" "),v("h3",{attrs:{id:"索引优化规范"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#索引优化规范"}},[t._v("#")]),t._v(" 索引优化规范")]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("对于复杂的查询，执行 explain，查看索引使用情况")]),t._v("。")]),t._v(" "),v("li",[t._v("重要的 SQL 必须被索引，比如 UPDATE、DELETE 语句的 "),v("strong",[t._v("WHERE条件列 ORDER BY、GROUP BY、DISTINCT的字段")]),t._v("。")]),t._v(" "),v("li",[t._v("不在低基数列上建立索引，例如“性别”。")]),t._v(" "),v("li",[t._v("如果是 "),v("strong",[t._v("索引字段，一定要定义为not null")]),t._v("，因为 null 值会影响 cordinate 统计，影响优化器对索引的选择,不能保证有值，设置相应的默认值。")]),t._v(" "),v("li",[t._v("单表索引个数尽量限制在5个以内。")]),t._v(" "),v("li",[t._v("避免使大表的 JOIN。")]),t._v(" "),v("li",[t._v("最左前缀原则，mysql 使用联合索引时，从左向右匹配，遇到断开或者范围查询时，无法用到后续的索引列。")]),t._v(" "),v("li",[t._v("尽量减少直接使用 SELECT * 读取全部字段。")]),t._v(" "),v("li",[t._v("使用 like 模糊匹配，%不要放首位。")]),t._v(" "),v("li",[t._v("考虑适当的字段冗余，减少不必要的关联查询。")])]),t._v(" "),v("h3",{attrs:{id:"事务四大特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事务四大特性"}},[t._v("#")]),t._v(" 事务四大特性")]),t._v(" "),v("ul",[v("li",[t._v("原子性")]),t._v(" "),v("li",[t._v("一致性")]),t._v(" "),v("li",[t._v("隔离性")]),t._v(" "),v("li",[t._v("持久性")])]),t._v(" "),v("h3",{attrs:{id:"事务-隔离级别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事务-隔离级别"}},[t._v("#")]),t._v(" 事务-隔离级别")]),t._v(" "),v("p",[t._v("@Transactional(isolation = Isolation.DEFAULT)在B方法上声明")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("Isolation.DEFAULT 使用数据库的隔离级别")])]),t._v(" "),v("li",[v("p",[t._v("Isolation.READ_UNCOMMITTED 读未提交 最低的隔离级别，事务未提交前就可以被其他事务读取（会出现 脏读、不可重复读、幻读）")])]),t._v(" "),v("li",[v("p",[t._v("Isolation.READ_COMMITTED 读已提交 一个事务提交后才能被其他事务读取 （会出现 不可重复读、幻读） SQL Server的默认级别")])]),t._v(" "),v("li",[v("p",[t._v("Isolation.REPEATABLE_READ 可重复读 保证多次读取同一数据时，其值都和开始时的数据一致，禁止读取到别的事务未提交的数据 （会出现幻读） MySQL的默认级别")])]),t._v(" "),v("li",[v("p",[t._v("Isolation.SERIALIZABLE 序列化 写会加写锁，读会加读锁，代价最高最可靠。")])])]),t._v(" "),v("h3",{attrs:{id:"事务安全问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事务安全问题"}},[t._v("#")]),t._v(" 事务安全问题")]),t._v(" "),v("p",[t._v("脏读：一个事务读取了另一个事务未提交的数据\n不可重复读：同一事务中，根据同一条件查询出的同一行记录的值不一致\n幻读：同一事务中，根据同一条件查询出的记录行数不一致")]),t._v(" "),v("h3",{attrs:{id:"索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[t._v("#")]),t._v(" 索引")]),t._v(" "),v("p",[t._v("帮助快速获取数据的排好序的数据结构\n索引的建立就是对数据的排序的过程")]),t._v(" "),v("p",[t._v("or的查询条件里必须要保证 OR 两端的条件都存在可以用的索引，该查询才可以使用索引")]),t._v(" "),v("p",[t._v("主键索引：primary key,关键字不能重复、不能为null，同时增加主键约束"),v("br"),t._v("\n唯一索引：unique index, 关键字不能重复，同时增加唯一约束"),v("br"),t._v("\n普通索引：Normal index，对关键字没有要求"),v("br"),t._v("\n全文索引：fulltext key，关键字的来源不是所有字段的数据，而是从字段中提取的特别关键词(MySQL的全文索引几乎不用，因为它不支持中文)")]),t._v(" "),v("h3",{attrs:{id:"约束"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#约束"}},[t._v("#")]),t._v(" 约束")]),t._v(" "),v("p",[t._v("在MySQL中设置字段为唯一约束，程序中再插入相同字段的数据时会报错")]),t._v(" "),v("h3",{attrs:{id:"二叉树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[t._v("#")]),t._v(" 二叉树")]),t._v(" "),v("p",[t._v("最多有两个子节点\n左子结点元素<父节点元素<右子节点元素")]),t._v(" "),v("h4",{attrs:{id:"满二叉树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#满二叉树"}},[t._v("#")]),t._v(" 满二叉树")]),t._v(" "),v("p",[t._v("所有结点都有左右两个子节点，并且叶子都同一层。")]),t._v(" "),v("h4",{attrs:{id:"完全二叉树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#完全二叉树"}},[t._v("#")]),t._v(" 完全二叉树")]),t._v(" "),v("p",[t._v("按照层次给所有结点编号，编号是连续的 。 没有满二叉树完美，满二叉树也属于完全二叉树")]),t._v(" "),v("h3",{attrs:{id:"二叉树的存储结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的存储结构"}},[t._v("#")]),t._v(" 二叉树的存储结构")]),t._v(" "),v("h4",{attrs:{id:"顺序存储结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#顺序存储结构"}},[t._v("#")]),t._v(" 顺序存储结构")]),t._v(" "),v("p",[t._v("用一维数组存储二叉树的结点，\n一般只用于存储完全二叉树。")]),t._v(" "),v("h4",{attrs:{id:"链表存储结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#链表存储结构"}},[t._v("#")]),t._v(" 链表存储结构")]),t._v(" "),v("p",[t._v("数据域+指针域")]),t._v(" "),v("h3",{attrs:{id:"int和bigint"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#int和bigint"}},[t._v("#")]),t._v(" int和bigint")]),t._v(" "),v("p",[t._v("int 占4个字节，带符号范围 [-2^31,2^31-1]，无符号位[0,2^32-1]\nbigint 占8个字节，带符号位 [-2^63,2^63-1],无符号位[0,2^64-1]")]),t._v(" "),v("p",[t._v("推荐自增主键用 int unsigned类型\nMySQL中int(5)表示显示的宽度为5，但存放123456仍然能插入，默认宽度为11，指定zerofill则会补0")]),t._v(" "),v("h3",{attrs:{id:""}},[v("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),v("p",[t._v("MySQL创建的B+Tree索引的根节点是常驻内存的，根节点中的指针域对应的数据在磁盘中。")]),t._v(" "),v("h3",{attrs:{id:"存储引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#存储引擎"}},[t._v("#")]),t._v(" 存储引擎")]),t._v(" "),v("p",[t._v("是用来存储对象(记录和索引)的一种文件结构")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("InnoDB （聚集）:\n用的较多，擅长事务、数据的完整性及高并发处理，擅长更新、删除")]),t._v(" "),v("p",[t._v(".frm文件：存放表结构信息\n.idb文件：存放数据和索引，非主键索引的叶结点存了主键，主键索引存储了和(与当前索引字段同行的其他字段)的数据，即叶结点包含了完整的数据记录。所以非主键索引需要两次检索，先检索到主键ID，再检索记录")])]),t._v(" "),v("li",[v("p",[t._v("MyISAM :\n数据文件和索引文件是分离的（非聚集）："),v("br"),t._v("\n支持全文索引，数据的压缩存储，擅长快速读与写。\n.frm文件： 表结构信息\n.MYD文件： 数据\n.MYI文件： 索引 找到指定结点对应的数据指针位置，再从.myd文件中找到数据")])])]),t._v(" "),v("p",[v("img",{attrs:{src:e(585),alt:"存储引擎对比"}})]),t._v(" "),v("h3",{attrs:{id:"innodb下的当前读和快照读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#innodb下的当前读和快照读"}},[t._v("#")]),t._v(" InnoDB下的当前读和快照读")]),t._v(" "),v("p",[t._v("当前读：加锁的select操作、update、insert、delete。会加锁，悲观锁的一种实现，读取的是记录的最新版本。"),v("br"),t._v("\n快照读：不加锁的select操作，即不加锁的非阻塞读，避免了加锁，降低了开销。但读的不一定是最新的记录，可能是之前的历史版本。")]),t._v(" "),v("h3",{attrs:{id:"聚集索引、非聚集索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#聚集索引、非聚集索引"}},[t._v("#")]),t._v(" 聚集索引、非聚集索引")]),t._v(" "),v("p",[t._v("聚集索引：数据行的物理顺序与列值(一般是主键的那一列)的逻辑顺序相同，一个表中只能有一个聚集索引。主键索引其实就是聚集索引\n非聚集索引：索引的逻辑顺序与磁盘上行的物理存储顺序不同，一个表中可以有多个非聚集索引")]),t._v(" "),v("h3",{attrs:{id:"行锁、表锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#行锁、表锁"}},[t._v("#")]),t._v(" 行锁、表锁")]),t._v(" "),v("p",[t._v("InnoDB：支持行锁和表锁，默认行锁\nMyISM：只支持表锁")]),t._v(" "),v("p",[t._v("行锁：开销小、加锁快、不会出现死锁、锁定粒度大、发生锁冲突的概率高、并发量最低\n表锁：开销大、加锁慢、会出现死锁、锁粒度小、发生锁冲突的概率小、并发度高")]),t._v(" "),v("h3",{attrs:{id:"读写锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#读写锁"}},[t._v("#")]),t._v(" 读写锁")]),t._v(" "),v("p",[t._v("分为互斥锁和共享锁")]),t._v(" "),v("p",[t._v("互斥锁(排他锁)：事务对数据加了互斥锁后可读取、修改数据;  加了互斥锁后其他事务就不能再加任何锁了\n共享锁：事务对数据加了共享锁后只能读数据、不能写; 加了共享锁后其他事务还可以再加共享锁，但不能加互斥锁")]),t._v(" "),v("h3",{attrs:{id:"primary-key和second-key"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#primary-key和second-key"}},[t._v("#")]),t._v(" primary key和second key")]),t._v(" "),v("p",[t._v("InnoDB中，主键索引的叶结点包含了完整的数据，非主键索引叶节点存的是主键的值")]),t._v(" "),v("h3",{attrs:{id:"索引类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#索引类型"}},[t._v("#")]),t._v(" 索引类型")]),t._v(" "),v("ol",[v("li",[t._v("b-tree")]),t._v(" "),v("li",[t._v("hash")]),t._v(" "),v("li",[t._v("全局索引FULLTEXT")]),t._v(" "),v("li",[t._v("R-Tree索引")])]),t._v(" "),v("h3",{attrs:{id:"b-tree相对于btree优化了范围查找"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#b-tree相对于btree优化了范围查找"}},[t._v("#")]),t._v(" b+tree相对于bTree优化了范围查找")]),t._v(" "),v("p",[t._v("因为每个叶结点对应的数据段的第一个和最后一个都存了下一个数据块的指针，可直接顺着查找")]),t._v(" "),v("h3",{attrs:{id:"联合索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#联合索引"}},[t._v("#")]),t._v(" 联合索引")]),t._v(" "),v("p",[t._v("假设某个表有一个联合索引（c1,c2,c3,c4）以下选项哪些字段使用了该索引：\nA where c1=x and c2=x and c4>x and c3=x"),v("br"),t._v("\nB where c1=x and c2=x and c4=x order by c3"),v("br"),t._v("\nC where c1=x and c4= x group by c3,c2"),v("br"),t._v("\nD where c1=? and c5=? order by c2,c3"),v("br"),t._v("\nE where c1=? and c2=? and c5=? order by c2,c3")]),t._v(" "),v("p",[t._v("根据最左前缀原则\nA:四个字段均使用了该索引")]),t._v(" "),v("p",[t._v("B:c1，c2字段使用了该索引")]),t._v(" "),v("p",[t._v("C:c1字段使用该索引")]),t._v(" "),v("p",[t._v("D:c1字段使用该索引")]),t._v(" "),v("p",[t._v("E:c1，c2字段使用了该索引")]),t._v(" "),v("blockquote",[v("p",[t._v("注意将区分度低的索引放在后面，如性别、状态；最左前缀匹配遇到范围查找就会停止匹配")])]),t._v(" "),v("h3",{attrs:{id:"csc16"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#csc16"}},[t._v("#")]),t._v(" CSC16")]),t._v(" "),v("h3",{attrs:{id:"索引优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#索引优化"}},[t._v("#")]),t._v(" 索引优化")]),t._v(" "),v("p",[t._v("最左前缀原则")]),t._v(" "),v("h2",{attrs:{id:"优化慢查询-explain"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优化慢查询-explain"}},[t._v("#")]),t._v(" 优化慢查询 - Explain")]),t._v(" "),v("p",[t._v("可以知道表的读取顺序、数据读取操作的类型、哪些索引可以使用、实际使用了哪些索引、表之间的引用、每张表有多少张被优化器查询等。")]),t._v(" "),v("h3",{attrs:{id:"字段含义-共10列"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字段含义-共10列"}},[t._v("#")]),t._v(" 字段含义(共10列)")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("id 序列号，表示select子句的查询顺序\n值不同时，值越大优先级越高，值相同时从上往下执行")])]),t._v(" "),v("li",[v("p",[t._v("select_type 查询类型 ， 区分普通查询、联合查询、子查询等类型")]),t._v(" "),v("p",[v("strong",[t._v("select")]),t._v(" 简单查询，不包括子查询和union\n"),v("strong",[t._v("primary")]),t._v(" 查询中包含任何复杂的子部分，最外层的查询就被标记为primary\n"),v("strong",[t._v("subquery")]),t._v(" select或where中包含子查询\n"),v("strong",[t._v("derived")]),t._v(" from中包含子查询(也称为派生表)"),v("br"),t._v("\nunion union后的第二个查询语句\nunion result 表示两个union的查询语句的查询结果，id为null")])]),t._v(" "),v("li",[v("p",[t._v("table表示这一行的数据是关于哪张表的")])]),t._v(" "),v("li",[v("p",[t._v("type")]),t._v(" "),v("p",[t._v("system 表示只有一行记录（系统表），是const的特例"),v("br"),t._v("\nconst 表示通过一次索引就找到了，用于比较主键（primary key）或唯一索引（unique）"),v("br"),t._v("\neq_ref 唯一性索引扫描，对于索引键，表中只有一条记录与之匹配。"),v("br"),t._v("\nref 非唯一性索引扫描，"),v("br"),t._v("\nrange 检索指定范围的行，where后有between，>,<,in等"),v("br"),t._v("\nindex 只遍历索引树，索引文件比数据文件小"),v("br"),t._v("\nall 从硬盘全盘扫描，最慢了")]),t._v(" "),v("p",[t._v("以上查找类型效率递减，一般达到range级别就好，最好达到ref级别")])]),t._v(" "),v("li",[v("p",[t._v("possible key 可能会用到的索引")])]),t._v(" "),v("li",[v("p",[t._v("key 真正用到的索引")]),t._v(" "),v("p",[t._v("为null表示没有用到索引")])]),t._v(" "),v("li",[v("p",[t._v("key_len 索引可能会使用的最大长度，通过建表时的长度定义计算而来")])])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("key_len的长度计算公式：\nvarchr(10)变长字段且允许NULL    =  10 * ( character set：utf8=3,gbk=2,latin1=1)+1(NULL)+2(变长字段)\nvarchr(10)变长字段且不允许NULL  =  10 *( character set：utf8=3,gbk=2,latin1=1)+2(变长字段)\n\nchar(10)固定字段且允许NULL      =  10 * ( character set：utf8=3,gbk=2,latin1=1)+1(NULL)\nchar(10)固定字段且不允许NULL    =  10 * ( character set：utf8=3,gbk=2,latin1=1)\n")])])]),v("ol",{attrs:{start:"8"}},[v("li",[v("p",[t._v("ref 显示索引的哪一列被使用了，如果可能的话，是一个常数")])]),t._v(" "),v("li",[v("p",[t._v("rows 估计出 要找到所需的行而要查找的行数，原则上值越小越好")])]),t._v(" "),v("li",[v("p",[t._v("extra 关于MYSQL如何解析查询的额外信息")])])]),t._v(" "),v("h3",{attrs:{id:"select语句的执行顺序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#select语句的执行顺序"}},[t._v("#")]),t._v(" select语句的执行顺序：")]),t._v(" "),v("p",[t._v("from -> on -> join -> where -> group by -> 聚合函数 -> having -> 计算所有的表达式 -> select字段 -> DISTINCT -> order by对结果集进行排序\n每个步骤都会产生一个虚拟表，用作下一个步骤的输入")]),t._v(" "),v("h3",{attrs:{id:"sql注入"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#sql注入"}},[t._v("#")]),t._v(" SQL注入")]),t._v(" "),v("p",[t._v("恶意添加输入or “a”=”a” 时恒成立\n解决：用预编译语句 ？ ； mybatis中的mapper方式 #")]),t._v(" "),v("h3",{attrs:{id:"mysql性能优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mysql性能优化"}},[t._v("#")]),t._v(" MySQL性能优化：")]),t._v(" "),v("p",[t._v("① 当只要一行数据时，用limit 1；//找到一条结果后就停止搜索了\n② 数据库引擎：\nMyISAM ：适用于大量查询\nInnoDB ：支持“行锁”，写操作时很优秀，还支持事务\n③ 用not exists 代替 not in\nnot exists 用到了连接中建立的索引的作用，not in 会和每条记录进行比较\n④ 尽量不采用不利于索引的操作，如 not in ， in ， is null，is not null ， < > 等\n⑤ limit基数比较大时，使用between and\nalter table tName add index(字段名)\n⑥ 某个字段总要拿来搜索，就为其建立索引\n索引可以提高select的效率，同时也降低了insert和update的效率，因为insert和update时可能会重建索引\n7.避免在where语句后进行null值判断")]),t._v(" "),v("h3",{attrs:{id:"创建存储过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#创建存储过程"}},[t._v("#")]),t._v(" 创建存储过程")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("\ncreate procedure pr_add( a int , b int ) \nbegin \ndeclare c int ;\nif a is null  then set a = 0;\nend if;\nif b is null  then set b = 0;\nend if; \nset c = a + b;\nselect c as sum;\n调用存储过程 call pro_add( 10 , 20 );\n\n触发器（实现级联更改）：\ncreate Trigger Tri_name\nbefore/after  insert/update/delete\non tbl_name \nfor each row\nbegin \n包含SQL语句的程序体\nend\n\n")])])]),v("h3",{attrs:{id:"char和varchar"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#char和varchar"}},[t._v("#")]),t._v(" char和varchar")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("char(n)固定长度、占用内存多但效率更高一点; varchar(n)可变的字符类型;"),v("br"),t._v("\n都表示n个字符，注意是字符")])]),t._v(" "),v("li",[v("p",[t._v("char最大长度255个字符；varchar最大长度65535个字节，当UTF-8 字符集下，一个字符串最多需要三个字节，此时varchar(n)的n最大是65532/3 = 21844")])]),t._v(" "),v("li",[v("p",[t._v("实际存储的是实际字符串+记录字符串长度的字节")])])]),t._v(" "),v("h3",{attrs:{id:"timestamp和datetime"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#timestamp和datetime"}},[t._v("#")]),t._v(" TIMESTAMP和DATETIME")]),t._v(" "),v("p",[t._v("timestamp：4个字节存储，只能存到2038年，跟时区有关\ndatetime：8个字节存储，只是保留文本表示的日期和时间")]),t._v(" "),v("h3",{attrs:{id:"一个字符所占字节数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一个字符所占字节数"}},[t._v("#")]),t._v(" 一个字符所占字节数")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("编码方式")]),t._v(" "),v("th",[t._v("英文")]),t._v(" "),v("th",[t._v("中文")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("ASCII码")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("UTF-8")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("3")])]),t._v(" "),v("tr",[v("td",[t._v("GBK")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("2")])]),t._v(" "),v("tr",[v("td",[t._v("Unicode")]),t._v(" "),v("td",[t._v("2")]),t._v(" "),v("td",[t._v("2")])])])]),t._v(" "),v("h3",{attrs:{id:"innodb-引擎的四大特性是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#innodb-引擎的四大特性是什么"}},[t._v("#")]),t._v(" InnoDB  引擎的四大特性是什么？")]),t._v(" "),v("ol",[v("li",[t._v("插入缓存")]),t._v(" "),v("li",[t._v("二次写")]),t._v(" "),v("li",[t._v("自适应哈希索引")]),t._v(" "),v("li",[t._v("缓存池")])]),t._v(" "),v("h3",{attrs:{id:"count-列名-、count-1-、count"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#count-列名-、count-1-、count"}},[t._v("#")]),t._v(" count(列名)、count(1)、count(*)")]),t._v(" "),v("p",[t._v("执行效果上：")]),t._v(" "),v("ul",[v("li",[t._v("count(列名)：只包括列名那一列，统计结果时会忽略列值为null的计数")]),t._v(" "),v("li",[t._v("count(1)：忽略所有列，用1表示代码行，统计结果时不会忽略列值为null的计数")]),t._v(" "),v("li",[t._v("count(*)：包括了所有列，统计结果时不会忽略列值为null的计数")])]),t._v(" "),v("p",[t._v("执行效率上：")]),t._v(" "),v("ul",[v("li",[t._v("列名为主键，count(列名)会比count(1)快")]),t._v(" "),v("li",[t._v("列名不为主键，count(1)会比count(列名)快")]),t._v(" "),v("li",[t._v("表中多个列并没有主键，count(1)比count(*)快")]),t._v(" "),v("li",[t._v("表中有主键，count(主键)执行效率最优")]),t._v(" "),v("li",[t._v("表中只有一个字段，count(*)最优")])]),t._v(" "),v("h3",{attrs:{id:"外键的优缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#外键的优缺点"}},[t._v("#")]),t._v(" 外键的优缺点")]),t._v(" "),v("p",[t._v("优点：由数据库自身保证数据的一致性、完整性；业务逻辑更清晰\n缺点：设计外键的增删改都会涉及到检查操作，消耗资源；需要请求对其他表内部加锁可能出现死锁情况")]),t._v(" "),v("h3",{attrs:{id:"a、b两张表连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#a、b两张表连接"}},[t._v("#")]),t._v(" a、b两张表连接")]),t._v(" "),v("p",[t._v("a表3条数据，b表5条数据"),v("br"),t._v("\nfrom a left join b，查询最少3条，最多(3-1+5)=7条数据"),v("br"),t._v("\nfrom a inner join b，查询最少0条，最多5条数据")]),t._v(" "),v("h3",{attrs:{id:"数据库连接池"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据库连接池"}},[t._v("#")]),t._v(" 数据库连接池")]),t._v(" "),v("p",[t._v("c3p0,dbcp,HikariCP,Druid")]),t._v(" "),v("h3",{attrs:{id:"sql优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#sql优化"}},[t._v("#")]),t._v(" SQL优化")]),t._v(" "),v("p",[t._v("查询语句：")]),t._v(" "),v("blockquote",[v("p",[t._v("where后不要使用函数或表达式，或导致全表扫描而不能用索引\nwhere后尽量不要null判断、不要 !=或<>\n尽量不用not in。或用not exists代替，not in后面('a','b')里没有null时会查出非null的正常数据，('a','b',null)里面有null时，会查不到数据\nselect语句只需要查询一条记录时用 limit 1\nEXPLAIN 优化SELECT语句\n为搜索字段创建索引\nlike '%abc%'不会走索引，而'abc%'会走索引\n不要直接使用select * 导致这全局扫描"),v("br"),t._v("\njoin代替子查询"),v("br"),t._v("\nOR改写成IN ，OR是n级别，IN是log(n)级别\n对于连续数值，使用between and代替in\n避免强制类型转换，使用同类型进行比较'123'和'123'比，123和123比")])]),t._v(" "),v("p",[t._v("设计表：")]),t._v(" "),v("blockquote",[v("p",[t._v("每一张表都设置ID属性\n对于枚举类型的值，最好用ENUM而不是VARCHAR，如性别、星期、类型\n字段设计尽量NOT NULL")])]),t._v(" "),v("p",[t._v("其他：")]),t._v(" "),v("blockquote",[v("p",[t._v("拆分大的delete、insert语句")])]),t._v(" "),v("h3",{attrs:{id:"遇到过的性能问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#遇到过的性能问题"}},[t._v("#")]),t._v(" 遇到过的性能问题")]),t._v(" "),v("h3",{attrs:{id:"mvcc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mvcc"}},[t._v("#")]),t._v(" MVCC")]),t._v(" "),v("p",[t._v("What？ 多版本并发控制"),v("br"),t._v("\nFor? 一般在数据库的管理系统中，实现对数据库的并发访问。例如在MySQL的InnoDB中是为了提高数据库的并发性能，解决读写冲突，即使有读写冲突时也能做到不加锁、非阻塞并发读。"),v("br"),t._v("\nHow？ 基于3个隐式字段、undo日志、Read View等完成的")]),t._v(" "),v("blockquote",[v("p",[t._v("隐式字段:\nDB_TRX_ID  6byte,记录最近修改/插入事务的ID"),v("br"),t._v("\nDB_ROLL_PTR  7byte,回滚指针，指向这条记录的上一个版本。用于配合undo日志"),v("br"),t._v("\nDB_ROLL_ID  6byte,隐式的自增ID(主键)")])]),t._v(" "),v("blockquote",[v("p",[t._v("Read View\n事务进行快照读操作时产生的读视图")])]),t._v(" "),v("blockquote",[v("p",[t._v("undo log")])]),t._v(" "),v("ol",[v("li",[t._v("insert undo log，在事务insert新纪录时产生的undo log，在事务回滚时需要，在事务提交后丢弃。")]),t._v(" "),v("li",[t._v("update undo log，在事务update或delete时产生，不仅在事务回滚时需要，在快照读时也需要，所以不能随便删除，只有在快速读或事务回滚不涉及该日志时才会被purge线程线程统一清除")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("purge线程：更新或删除操作都会设置一个老记录的delete_bit，purge自己也维护了一个read view，\n如果DB_TRX_ID相对于purge的read view可见，而且该条记录的delete_bit为true，那么这条记录就会被安全清除掉。\n")])])]),v("h3",{attrs:{id:"mysql-binlog"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mysql-binlog"}},[t._v("#")]),t._v(" Mysql binlog")]),t._v(" "),v("p",[t._v("是二进制日志文件，用于记录mysql的数据更新或者潜在更新(比如DELETE语句执行删除而实际并没有符合条件的数据)，在mysql主从复制中就是依靠的binlog")]),t._v(" "),v("h3",{attrs:{id:"mysql的优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mysql的优化"}},[t._v("#")]),t._v(" MySQL的优化")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("存储引擎")])]),t._v(" "),v("li",[v("p",[t._v("字段类型：")])])]),t._v(" "),v("p",[t._v("尽可能小（占用存储空间少）、尽可能定长（占用存储空间固定）、尽可能使用整数")]),t._v(" "),v("p",[v("strong",[t._v("数值")]),t._v("：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("整型")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("有符号最小值、最大值")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("无符号最小值、最大值")]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[t._v("适用场景")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("tinyint")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("-128~127")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("0~255")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("年龄 255")])]),t._v(" "),v("tr",[v("td",[t._v("smallint")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("-2^15 ~ 2^15-1")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("0~2^16")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("端口号 65535")])]),t._v(" "),v("tr",[v("td",[t._v("mediumint")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("-2^23 ~ 2^23-1")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("0~2^24")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("注册会员用户 1600多万")])]),t._v(" "),v("tr",[v("td",[t._v("int")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("-2^31 ~ 2^31-1")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("0~2^32")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("编号 42亿")])]),t._v(" "),v("tr",[v("td",[t._v("bigint")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("-2^63 ~ 2^63-1")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("0~2^64")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("微博量 几百亿")])])])]),t._v(" "),v("p",[t._v("浮点型：float 4位、double 8位，内部存储方式是数值，是近似值而非精确值"),v("br"),t._v("\n定点型：Decimal、Dumeric，内部存储方式是字符串，可以精确取出小数部分。 Decimal(M,D) 最大M位整数，D位小数")]),t._v(" "),v("p",[v("strong",[t._v("日期")]),t._v("：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("日期")]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[t._v("所占字节")]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[t._v("最小值")]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[t._v("最大值")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Year")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("1901")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("2155")])]),t._v(" "),v("tr",[v("td",[t._v("Time")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("-838:59:59")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("838:59:59")])]),t._v(" "),v("tr",[v("td",[t._v("Date")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("1000-01-01")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("9999-12-31")])]),t._v(" "),v("tr",[v("td",[t._v("TimeStamp")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("1970-01-01 00:00:00")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("2038-01-19 03:14:07")])]),t._v(" "),v("tr",[v("td",[t._v("DataTime")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("1000-01-01 00:00:00")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("9999-12-31 23:59:59")])])])]),t._v(" "),v("p",[t._v("TimeStemp可根据当前系统时间自动更新时间、插入null也是自动插入当前系统时间、会根据当前时区来存储和查询时间(存储时对当前时区进行转换，查询时再转换为当前的时区)"),v("br"),t._v("\n也可用int(11)存放时间戳来替换DataTime，int占4个字节、查询快、排序效率高、计算时间差范围时比较方便")]),t._v(" "),v("p",[v("strong",[t._v("字符")]),v("br"),t._v("\n字符集校对规则、字符集类型"),v("br"),t._v("\n短文本定长用char、变长用varchar、长文本用text")]),t._v(" "),v("p",[v("strong",[t._v("属性")]),t._v("\n无符号(Unsigned)、填充零(ZeroFill)、是否为空、默认值、主键、自动编码")]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[v("p",[t._v("索引："),v("br"),t._v("\n尽可能的使用唯一索引，重复值越少，索引效果越强"),v("br"),t._v("\n充分利用左前缀，针对复合索引\n索引字段定义为非null，where后不要用null作为条件"),v("br"),t._v("\n值分布较少的不适合建索引，如性别，索引多影响更新、插入，占更多的内存"),v("br"),t._v("\n不用外键，用程序来保证约束")])]),t._v(" "),v("li",[v("p",[t._v("缓存："),v("br"),t._v("\n读多写少采用缓存，如redis")])]),t._v(" "),v("li",[v("p",[t._v("分区："),v("br"),t._v("\n分区只是将数据划分在多个位置存放，可以是相同的磁盘也可以在不同的机器上；"),v("br"),t._v("\n分区后表面上还是一张表，只是数据散列到多个位置了，依然正常查询，db自动组织分区的数据；"),v("br"),t._v("\n分区与存储引擎无关，是MySQL逻辑层完成的"),v("br"),t._v("\nMySQL的分区算法：取余：key、hash 条件：List、Rang"),v("br"),t._v("\n分区表无法使用外键约束"),v("br"),t._v("\n所有的分区必须使用相同的存储引擎")])]),t._v(" "),v("li",[v("p",[t._v("分表："),v("br"),t._v("\n一张表分为多张，一次查询分为多次查询，再把结果代码实现组合起来返回给用户，MySQL5.1之后分表就很少用了，都是用分区代替分表。"),v("br"),t._v("\n水平分表：多个表字段一样"),v("br"),t._v("\n垂直分表：表字段不一样，可依据常用字段和非常用字段分开存数据")])]),t._v(" "),v("li",[v("p",[t._v("服务器："),v("br"),t._v("\nMySQL服务器支持复制功能，主从复制，主写从读，进行读写分离实现负载均衡")])]),t._v(" "),v("li",[v("p",[t._v("SQL优化："),v("br"),t._v("\n并发性sql， 少用多表操作，拆分为多次执行，这样可能会增加查询缓存的利用率。"),v("br"),t._v("\n大量数据插入， 多次insert或从文件载入；建议先关闭约束及索引，插入完成后再生成约束和索引。"),v("br"),t._v("\nlimit分页的使用，Limit越大，效率越低。使用条件过滤先精确定位到需要的数据上，如select id from t limit 10000, 10   改写为=>   select id from t where id > 10000 limit 10\n慢查询日志的使用")])])]),t._v(" "),v("p",[t._v("慢查询优化："),v("br"),t._v("\nexplain select SQL_NO_CACHE")]),t._v(" "),v("h2",{attrs:{id:"sql"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#sql"}},[t._v("#")]),t._v(" SQL")]),t._v(" "),v("h3",{attrs:{id:"获取明天一整天的数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#获取明天一整天的数据"}},[t._v("#")]),t._v(" 获取明天一整天的数据")]),t._v(" "),v("p",[t._v("select  *\nfrom statistic_data\nwhere data_type = 0\nand get_time >= DATE_FORMAT(DATE_ADD(now() ,INTERVAL 1 day),'%Y-%m-%d')\nand get_time < DATE_FORMAT(DATE_ADD(now() ,INTERVAL 2 day),'%Y-%m-%d')")]),t._v(" "),v("h3",{attrs:{id:"排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[t._v("#")]),t._v(" 排序")]),t._v(" "),v("p",[t._v('ORDER BY FIELD( r.onlineStatus , 0 , 2 )  , FIELD(r.title, "医师", "副主任医师", "主任医师" ) DESC')]),t._v(" "),v("h3",{attrs:{id:"centos7里操作命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#centos7里操作命令"}},[t._v("#")]),t._v(" CentOS7里操作命令")]),t._v(" "),v("p",[t._v("查看MySQL启动状态  service mysqld status\n重启MySQL   service mysqld start"),v("br"),t._v("\n启动报错，可能是使用的用户不对，用 service mysqld start --user=root")]),t._v(" "),v("p",[t._v("登录到MySQL    mysql -uroot -p123456\n查看所有数据库 show databases;")]),t._v(" "),v("h2",{attrs:{id:"报错"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#报错"}},[t._v("#")]),t._v(" 报错")]),t._v(" "),v("h3",{attrs:{id:"启动mysql服务时"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#启动mysql服务时"}},[t._v("#")]),t._v(" 启动MySQL服务时")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("service mysqld start --user=root 启动MySQL服务时，\n/var/log/mysqld.log中打印的错误日志\n\n2022-06-18T02:53:34.911359Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.0.23) starting as process 16057\n2022-06-18T02:53:35.040744Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.\n2022-06-18T02:55:25.086791Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.\n2022-06-18T02:57:20.000077Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: '::' port: 33060, socket: /var/run/mysqld/mysqlx.sock\n2022-06-18T02:57:26.622027Z 0 [System] [MY-010229] [Server] Starting XA crash recovery...\n\n端口占用，可能是MySQL没有完全关闭，使用重启命令就好了\nservice mysqld restart --user=root\n\n")])])]),v("h3",{attrs:{id:"tinyint-1"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tinyint-1"}},[t._v("#")]),t._v(" tinyint(1)")]),t._v(" "),v("p",[t._v("数据库的字段类型Bool和Boolean是tinyint(1)的别名，0是false，其他都是true")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("返回的数值")]),t._v(" "),v("th",[t._v("Java字段类型")]),t._v(" "),v("th",[t._v("MySQL字段类型")]),t._v(" "),v("th",[t._v("MySQL保存的数值")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("true、false")]),t._v(" "),v("td",[t._v("Boolean")]),t._v(" "),v("td",[t._v("bit(1)")]),t._v(" "),v("td",[t._v("只能存1、0")])]),t._v(" "),v("tr",[v("td",[t._v("1、0")]),t._v(" "),v("td",[t._v("Integer")]),t._v(" "),v("td",[t._v("bit(1)")]),t._v(" "),v("td",[t._v("只能存1、0")])]),t._v(" "),v("tr",[v("td",[t._v("-128~127")]),t._v(" "),v("td",[t._v("Integer")]),t._v(" "),v("td",[t._v("tinyint、tinyint(1)、tinyint(4)")]),t._v(" "),v("td",[t._v("-128~127")])]),t._v(" "),v("tr",[v("td",[t._v("好乱")]),t._v(" "),v("td",[t._v("Boolean")]),t._v(" "),v("td",[t._v("tinyint(1)、tinyint(4)")]),t._v(" "),v("td",[t._v("-128~127")])]),t._v(" "),v("tr",[v("td"),t._v(" "),v("td",[t._v("Data、LocalDate")]),t._v(" "),v("td",[t._v("date")]),t._v(" "),v("td",[t._v("2022-03-10")])]),t._v(" "),v("tr",[v("td"),t._v(" "),v("td"),t._v(" "),v("td",[t._v("time")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td"),t._v(" "),v("td"),t._v(" "),v("td",[t._v("datetime")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td"),t._v(" "),v("td"),t._v(" "),v("td",[t._v("timestamp")]),t._v(" "),v("td")])])]),t._v(" "),v("h3",{attrs:{id:"date-date"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#date-date"}},[t._v("#")]),t._v(" Date<---\x3edate")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('入参和Java注解中的格式要对应一致，或者比注解中格式多，不然会报错\n\n1.\n入参：testDate：2022-03-10\nJava：\n@DateTimeFormat(pattern="yyyy-MM-dd")\nprivate Date testDate;\nMySQL：2022-03-10\n\n2.\n入参：testDate：2022-03-10 06:03\nJava：\n@DateTimeFormat(pattern="yyyy-MM-dd HH:mm")\nprivate Date testDate;\nMySQL：2022-03-10\n\n3. \n入参：testDate：2022-03-10 06:03:25\nJava：\n@DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss")\nprivate Date testDate;\nMySQL：2022-03-10\n\n\n4.\n返回："testDate": "2022-03-09T16:00:00.000+00:00"\nJava：private Date testDate;\nMySQL：2022-03-10\n\n5.\n返回："testDate": "2022-03-09"\nJava：@JsonFormat(pattern = "yyyy-MM-dd")\n    private Date testDate;\nMySQL：2022-03-10\n\n6. \n返回："testDate": "2022-03-09 16:00"\nJava：@JsonFormat(pattern = "yyyy-MM-dd HH:mm")\n    private Date testDate;\nMySQL：2022-03-10\n\n7. \n返回："testDate": "2022-03-09 16:00:00"\nJava：@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")\n    private Date testDate;\nMySQL：2022-03-10\n\n')])])]),v("h3",{attrs:{id:"localdate-date"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#localdate-date"}},[t._v("#")]),t._v(" LocalDate<---\x3edate")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('入参只能这一种方式，其他会报错\n1. \n入参：testDate：2022-03-11\nJava：\n@DateTimeFormat(pattern="yyyy-MM-dd")\nprivate LocalDate testDate;\nMySQL：2022-03-11\n\n\n4.\n返回："testDate": "2022-03-11"\nJava：private LocalDate testDate;\nMySQL：2022-03-11\n\n5.\n返回："testDate": "2022-03-11"\nJava：@JsonFormat(pattern = "yyyy-MM-dd")\n    private LocalDate testDate;\nMySQL：2022-03-11\n\n')])])]),v("h3",{attrs:{id:"localdatetime-date"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#localdatetime-date"}},[t._v("#")]),t._v(" LocalDateTime<---\x3edate")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('入参和Java注解中的格式要对应一致，或者比注解中格式多，不然会报错\n1.\n入参：testDate：2022-03-12\nJava：\n@DateTimeFormat(pattern="yyyy-MM-dd")\nprivate LocalDateTime testDate;\nMySQL：2022-03-12\n\n2.\n入参：testDate：2022-03-12 06:03\nJava：\n@DateTimeFormat(pattern="yyyy-MM-dd HH:mm")\nprivate LocalDateTime testDate;\nMySQL：2022-03-12\n\n3. \n入参：testDate：2022-03-12 06:03:25\nJava：\n@DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss")\nprivate LocalDateTime testDate;\nMySQL：2022-03-12\n\n\n4.\n返回："testDate": "2022-03-12T00:00:00"\nJava：private LocalDateTime testDate;\nMySQL：2022-03-12\n\n5.\n返回："testDate": "2022-03-12"\nJava：@JsonFormat(pattern = "yyyy-MM-dd")\n    private LocalDateTime testDate;\nMySQL：2022-03-12\n\n6. \n返回："testDate": "2022-03-12 16:00"\nJava：@JsonFormat(pattern = "yyyy-MM-dd HH:mm")\n    private LocalDateTime testDate;\nMySQL：2022-03-12\n\n7. \n返回："testDate": "2022-03-12 16:00:00"\nJava：@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")\n    private LocalDateTime testDate;\nMySQL：2022-03-12\n\n')])])]),v("p",[t._v("datetime相比于date只是在数据库中存储了时分秒，和Java中类型对应关系是一样的")]),t._v(" "),v("h1",{attrs:{id:"others"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#others"}},[t._v("#")]),t._v(" Others")]),t._v(" "),v("p",[t._v("SELECT * FROM information_schema.innodb_trx")]),t._v(" "),v("h2",{attrs:{id:"查看正在锁的事务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查看正在锁的事务"}},[t._v("#")]),t._v(" 查看正在锁的事务")]),t._v(" "),v("p",[t._v("SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS;")]),t._v(" "),v("h2",{attrs:{id:"查看等待锁的事务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查看等待锁的事务"}},[t._v("#")]),t._v(" 查看等待锁的事务")]),t._v(" "),v("p",[t._v("SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;")]),t._v(" "),v("h2",{attrs:{id:"首先查询是否锁表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#首先查询是否锁表"}},[t._v("#")]),t._v(" 首先查询是否锁表")]),t._v(" "),v("p",[t._v("SHOW OPEN TABLES WHERE In_use > 0;")]),t._v(" "),v("h2",{attrs:{id:"查询进程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查询进程"}},[t._v("#")]),t._v(" 查询进程")]),t._v(" "),v("p",[t._v("SHOW PROCESSLIST;")]),t._v(" "),v("p",[t._v("kill 45760")])])}),[],!1,null,null,null);a.default=_.exports}}]);