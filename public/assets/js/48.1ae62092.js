(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{648:function(t,e,a){"use strict";a.r(e);var n=a(5),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"spring3-0后支持的http请求工具-resttemplate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring3-0后支持的http请求工具-resttemplate"}},[t._v("#")]),t._v(" Spring3.0后支持的http请求工具 RestTemplate")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public interface MultiValueMap<K, V> extends Map<K, List<V>>  //一个key可以存多个value\npublic class HttpHeaders implements MultiValueMap<String, String>, Serializable //请求头\npublic class RequestEntity<T> extends HttpEntity<T>  //请求实体\npublic class ResponseEntity<T> extends HttpEntity<T> //返回实体\n\n\n  @Autowired\n   RestTemplate restTemplate;\n\n")])])]),a("h3",{attrs:{id:"get请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get请求"}},[t._v("#")]),t._v(" GET请求")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('1. 参数name、age在urlString路径上，用占位符依次表示{1}、{2}、、、\n\n\tString urlString1 = "https://nfys-test.kinglian.cn/serviceResourc/User/page?name={1}&age={2}";  \n\tname = "vaq", age = "18";\n\tResponseEntity<User> responseEntity = restTemplate.getForEntity(urlString1, User.class, name, age); \n\n2. 参数map的key和占位符的key相对应\n\n    String urlString2 = "https://nfys-test.kinglian.cn/serviceResourc/User/page?name={name}&age={age}";\n\tMap map = new HashMap();\n\tmap.put("name","vaq");\n\tmap.put("age","18");\n\tResponseEntity<User> responseEntity = restTemplate.getForEntity(urlString2, User.class, map); \n\n3. 使用URI对象，参数可直接拼在地址上，但对中文参数要进行编码\n\n\tString name = "vaq", age = "18"; \n    String urlString3 = "https://nfys-test.kinglian.cn/serviceResourc/User/page?name="+URLEncoder.encode(name, "UTF-8")+"&age="+age;\n\tURI uri = URI.create(urlString3);\n\tResponseEntity<User> responseEntity = restTemplate.getForEntity(urlString, User.class); \n\nUser user = responseEntity.getBody();\n\n\n### getForEntity和getForObject\ngetForEntity可以获取响应头、状态码等\ngetForObject只有响应体，相当于getForEntity().getBody();\n')])])]),a("h3",{attrs:{id:"post请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post请求"}},[t._v("#")]),t._v(" POST请求")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('地址URLString或者URI对象都可以\n\n* 不要请求头时\n1. 参数map对象，地址中参数占位符可有可无\n\nMultiValueMap map = new LinkedMultiValueMap();\nmap.add("name","vaq");\nrestTemplate.postForEntity(urlString,map,User.class);\n\n2. 传递JOSN数据或类对象\nUser user = new User();\nuser.setName("age");\nrestTemplate.postForEntity(urlString,user,User.class);\n\n* 需要请求头时\n\n//请求头\nHttpHeaders httpHeaders = new HttpHeaders();\n        MediaType mediaType = MediaType.APPLICATION_JSON_UTF8;\n        httpHeaders.setContentType(mediaType);\n        httpHeaders.add("Accept",MediaType.APPLICATION_JSON_VALUE);\n//请求体\t\t\nMap<String,Object> map = new HashMap<>();\n        Map body = new HashMap();\n        body.put("roleId","1550246");\n        body.put("roleType","1");\n        map.put("body",body);\n//创建请求实体并调用\nHttpEntity<Map> httpEntity = new HttpEntity<>(map,httpHeaders);\nResponseEntity<String> responseEntity = restTemplate.postForEntity(urlString,httpEntity,String.class);\n\n或者\n\nRequestEntity requestEntity = RequestEntity.post(uri).header("Accept",MediaType.APPLICATION_JSON_VALUE).contentType(MediaType.APPLICATION_JSON_UTF8).body(map);\nResponseEntity<String> responseEntity1 = restTemplate.exchange(requestEntity,String.class);\n')])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("form-data表单传值")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.MULTIPART_FORM_DATA);\n        MultiValueMap map = new LinkedMultiValueMap();\n        map.add("pollutantCode",pollutantCode);\n        HttpEntity requestBody = new HttpEntity(map, headers);\n\n        ResponseEntity<String> responseEntity = restTemplate.postForEntity(urlString, requestBody, String.class);\n        \n')])])]),a("h3",{attrs:{id:"delete请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete请求"}},[t._v("#")]),t._v(" DELETE请求")]),t._v(" "),a("h3",{attrs:{id:"put请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#put请求"}},[t._v("#")]),t._v(" PUT请求")]),t._v(" "),a("h3",{attrs:{id:"通用方法请求exchange-可用于封装类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通用方法请求exchange-可用于封装类"}},[t._v("#")]),t._v(" 通用方法请求exchange,可用于封装类")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//相对于有请求头的Post请求，需指定方法类型\nResponseEntity<User> responseEntity = restTemplate.exchange("url",HttpMethod.GET,httpEntity,User.class);\nUser result = responseEntity.getBody();\n')])])]),a("h3",{attrs:{id:"mediatype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mediatype"}},[t._v("#")]),t._v(" MediaType")]),t._v(" "),a("p",[t._v("问题背景：微信支付通知响应报文，之前是response.print,后来改为了@ResponseBody String，发现不好使了，即使业务成功，返回success应答，微信仍然一直通知到极限次数。")]),t._v(" "),a("p",[t._v("排查思路：找convertor，json转换器的没问题，但是他只支持application/json，二微信不接受application/json，string转换器没问题，然后看了看控制器代码，resopnseBody默认mediaType是 application/json,找到问题。")]),t._v(" "),a("p",[t._v('解决方案：制器代码 方法的 mapping 注解后面，增加produces = {"text/plain","application/xml"}')]),t._v(" "),a("h3",{attrs:{id:"注意入参中的key有空格-将接收不到url参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意入参中的key有空格-将接收不到url参数"}},[t._v("#")]),t._v(" 注意入参中的key有空格，将接收不到url参数")]),t._v(" "),a("p",[t._v('map.put("url ","https://www.baidu.com");')]),t._v(" "),a("h3",{attrs:{id:"resttemplatebuilder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resttemplatebuilder"}},[t._v("#")]),t._v(" RestTemplateBuilder")]),t._v(" "),a("p",[t._v("当有自定义的序列化和反序列话的类时候要通过RestTemplateBuilder.build()来注册RestTemplate，替代new RestTemplate();")])])}),[],!1,null,null,null);e.default=s.exports}}]);