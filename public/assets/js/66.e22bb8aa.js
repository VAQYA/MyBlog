(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{678:function(t,a,e){"use strict";e.r(a);var s=e(5),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"java8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java8"}},[t._v("#")]),t._v(" Java8")]),t._v(" "),e("h3",{attrs:{id:"jdk1-8对hash算法的优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-8对hash算法的优化"}},[t._v("#")]),t._v(" JDK1.8对hash算法的优化")]),t._v(" "),e("p",[t._v("低16位融合了高16位和低16位的特征，避免了hash冲突")]),t._v(" "),e("p",[e("code",[t._v("(h = key.hashCode()) ^ (h >>> 16);")]),t._v("\nhash值先右移16位，在同原值异或")]),t._v(" "),e("h3",{attrs:{id:"jdk1-8对寻址算法的优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-8对寻址算法的优化"}},[t._v("#")]),t._v(" JDK1.8对寻址算法的优化")]),t._v(" "),e("p",[t._v("与运算替代取模，提升性能\n之前是对数组长度取模 hash%length ，改为hash&(length-1)要求数组长度length是2的n次方\nHashMap 默认的长度一定是 2 的指数幂，所以这一个等式 hash%length = hash&(length-1) 针对 HashMap 是永远成立的")]),t._v(" "),e("h3",{attrs:{id:"jdk1-8新特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-8新特性"}},[t._v("#")]),t._v(" jdk1.8新特性")]),t._v(" "),e("ol",[e("li",[t._v("Lambda表达式，允许像对象一样传递匿名函数")]),t._v(" "),e("li",[t._v("Stream API,充分利用多核CPU，可以写出更简洁的代码")]),t._v(" "),e("li",[t._v("Date和Time API，使日期、时间更稳定、简单。")]),t._v(" "),e("li",[t._v("接口中可以有普通方法和静态方法，普通方法必须由default修饰，静态方法必须有方法体")]),t._v(" "),e("li",[t._v("重复注释，可以在一个类中多次使用同一个注释")])]),t._v(" "),e("h3",{attrs:{id:"变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),e("p",[t._v("lambda表达式只能引用标记了final的外层局部变量，即不能lambda内部修改局部变量")]),t._v(" "),e("h3",{attrs:{id:"双冒号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双冒号"}},[t._v("#")]),t._v(" 双冒号")]),t._v(" "),e("ol",[e("li",[t._v("类名::静态方法")]),t._v(" "),e("li",[t._v("对象::实例方法")]),t._v(" "),e("li",[t._v("类名::new")])]),t._v(" "),e("p",[t._v("后面没()")]),t._v(" "),e("h3",{attrs:{id:"optional"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#optional"}},[t._v("#")]),t._v(" Optional")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('Student stu1 = null;\nStudent stu2 = new Student();\nstu2.setId("123");\n\nstatic<T> Optional<T>\tofNullable(T value); \t//value为空时则返回一个空的Optional实例，否则返回包含了value的Optional实例 \n\n T orElse(T other);\t//返回值如果存在则返回，否则返回other \n\nOptional<Student> optionalA = Optional.ofNullable(stu1);\nStudent student = optionalA.orElse(stu2);  //如果stu1不为空则返回，否则返回stu2。\n\n\n public Optional<T> filter(Predicate<? super T> predicate);\t//括号内方法必须返回boolea类型，结果为true则返回该optional对象，否则返回一个空optional对象 \n  void\tifPresent(Consumer<? super T> consumer);\t//如果存在值，则调用指定的逻辑，否则不做任何操作\n\nOptional<Student> optionalB = Optional.ofNullable(stu2);\noptionalB.filter(a->a.getId().equals("123")).ifPresent(o->{\n\tSystem.out.println(o.getId());\n});\n\n\npublic <U> Optional<U> map(Function<? super T,? extends U> mapper);\t//经过一系列操作，返回 U  \npublic <U> Optional<U> flatMap(Function<? super T,Optional<U>> mapper);\t//经过一系列操作，返回Optional<U>   \n\noptionalB.map(b->{\n\tb.setId("111");\n\treturn b;\n});\noptionalB.flatMap(b->{\n\tb.setId("111");\n\treturn Optional.ofNullable(b);\n});\n\n\n* static<T> Optional<T> empty();\t//返回一个空的 Optional实例   \n* T get();\t//如果 Optional中有一个值，返回值，否则抛出 NoSuchElementException   \n* public static <T> Optional<T> of(T value);\t//返回具有 Optional的当前非空值的Optional,如果值为null，则NullPointerException\n')])])]),e("h3",{attrs:{id:"stream"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stream"}},[t._v("#")]),t._v(" Stream")]),t._v(" "),e("h3",{attrs:{id:"初始化list"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化list"}},[t._v("#")]),t._v(" 初始化List")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('List<String> colors = Stream.of("blue", "red", "yellow").collect(java.util.stream.Collectors.toList());\n')])])]),e("h3",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("        List<String> userIds = Stream.of(byId.getFromUserId(), byId.getToUserId()).collect(toList());\n        List<SysUser> userList = sysUserService.listByUserIds(userIds);\n        Map<String, String> hashMap = userList.stream().collect(toMap(SysUser::getUserId, SysUser::getLoginId));\n        String fromLoginId = hashMap.get(byId.getFromUserId());\n        String toLoginId = hashMap.get(byId.getToUserId());\n")])])]),e("h3",{attrs:{id:"-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[t._v("#")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Optional.ofNullable(list).orElse(new ArrayList<>()).forEach\n\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);