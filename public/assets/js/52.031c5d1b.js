(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{654:function(t,e,a){"use strict";a.r(e);var n=a(5),i=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"时间相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间相关"}},[t._v("#")]),t._v(" 时间相关")]),t._v(" "),a("h2",{attrs:{id:"localdatetime-与-string-相互转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#localdatetime-与-string-相互转换"}},[t._v("#")]),t._v(" LocalDateTime 与 String 相互转换")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\t DateTimeFormatter df = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");\n\t LocalDateTime time = LocalDateTime.now();\n\t String localTime = df.format(time);\n\t LocalDateTime ldt = LocalDateTime.parse("2018-01-12 17:07:05",df);\n\t System.out.println("LocalDateTime转成String类型的时间："+localTime);\n\t System.out.println("String类型的时间转成LocalDateTime："+ldt);\n')])])]),a("h2",{attrs:{id:"date-与-string-相互转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#date-与-string-相互转换"}},[t._v("#")]),t._v(" Date 与 String 相互转换")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\tDateFormat format = new SimpleDateFormat("yyyy-MM-dd");\n\tDate date = format.parse("2018-01-12 17:07:05");\n\tSystem.out.println("String类型的时间转成Date："+date);\n')])])]),a("h2",{attrs:{id:"两个时间相差的天数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两个时间相差的天数"}},[t._v("#")]),t._v(" 两个时间相差的天数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tDuration durationD = Duration.between(startTime, endTime);\n\tlong days = durationD.toDays();\n")])])]),a("h2",{attrs:{id:"从1970-01-01-00-00-00到当前时间的毫秒数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从1970-01-01-00-00-00到当前时间的毫秒数"}},[t._v("#")]),t._v(" 从1970-01-01 00:00:00到当前时间的毫秒数")]),t._v(" "),a("p",[t._v("System.currentTimeMillis();")]),t._v(" "),a("p",[t._v('LocalDateTime.now().toInstant(ZoneOffset.of("+8")).toEpochMilli();')]),t._v(" "),a("h2",{attrs:{id:"获取两个日期相差的年、天、小时、分钟、秒数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取两个日期相差的年、天、小时、分钟、秒数"}},[t._v("#")]),t._v(" 获取两个日期相差的年、天、小时、分钟、秒数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    /**\n     * 获取两个日期相差的年、天、小时、分钟、秒数\n     * diffType相差的时间类型数\n     */\n    public static BigDecimal getDateTimeDiff(LocalDateTime beginTime, LocalDateTime endTime, String diffType) {\n\n        //获取第一个时间点的时间戳对应的秒数\n        long beginTimeMillis = beginTime.toEpochSecond(ZoneOffset.ofHours(0));\n        BigDecimal begin = new BigDecimal(beginTimeMillis);\n\n        //获取第二个时间点的时间戳对应的秒数\n        long endTimeMillis = endTime.toEpochSecond(ZoneOffset.ofHours(0));\n        BigDecimal end = new BigDecimal(endTimeMillis);\n\n        //获取第一个时间点在是1970年1月1日后的第几天\n        BigDecimal t1;\n\n        //获取第二个时间点在是1970年1月1日后的第几天\n        BigDecimal t2;\n\n        BigDecimal temp ;\n        switch (diffType) {\n            case "YEAR": {\n                temp = new BigDecimal(60 * 60 * 24 * 365);\n                break;\n            }\n            case "DAY": {\n                temp = new BigDecimal(60 * 60 * 24);\n                break;\n            }\n            case "HOUR": {\n                temp = new BigDecimal(60 * 60);\n                break;\n            }\n            case "MINUTE": {\n                temp = new BigDecimal(60);\n                break;\n            }\n            case "SECOND": {\n                temp = BigDecimal.ONE;\n                break;\n            }\n            default:\n                temp = BigDecimal.ONE;\n                break;\n        }\n        t1 = begin.divide(temp, MathContext.DECIMAL128);\n        t2 = end.divide(temp,MathContext.DECIMAL128);\n        //返回两个时间点的差值\n        return t2.subtract(t1);\n    }\n')])])]),a("h2",{attrs:{id:"获取两个时间点的中间时刻"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取两个时间点的中间时刻"}},[t._v("#")]),t._v(" 获取两个时间点的中间时刻")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    /**\n     * 获取两个时间点的中间时刻\n     *\n     * @param beginTime\n     * @param endTime\n     * @return\n     */\n    public static LocalDateTime getMiddleTime(LocalDateTime beginTime, LocalDateTime endTime) {\n\n        Long milliSecond = (endTime.toInstant(ZoneOffset.of("+8")).toEpochMilli() + beginTime.toInstant(ZoneOffset.of("+8")).toEpochMilli()) / 2;\n        Instant instant = Instant.ofEpochMilli(milliSecond);\n        return LocalDateTime.ofInstant(instant, ZoneId.systemDefault());\n    }\n')])])])])}),[],!1,null,null,null);e.default=i.exports}}]);