(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{596:function(t,a,e){t.exports=e.p+"assets/img/集合.2d43400b.jpg"},672:function(t,a,e){"use strict";e.r(a);var r=e(5),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"java基础"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java基础"}},[t._v("#")]),t._v(" Java基础")]),t._v(" "),r("h3",{attrs:{id:"byte"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#byte"}},[t._v("#")]),t._v(" byte")]),t._v(" "),r("p",[t._v("最高位表示符号位，0正1负 范围[-128 ， 127]\n1000 0000 表示 -0 ，即 -128\n1111 1111  表示 – (2^6+2^5+2^4+2^3+2^2+2^1+2^0）= -127\n0111 1111 表示  2^6+2^5+2^4+2^3+2^2+2^1+2^0 = 127")]),t._v(" "),r("p",[t._v("无论位运算还是算数运算，都是先获得补码（原码取反再加一，前提符号位不变），再运算，再得到原码（补码取反再加一，前提符号位不变）")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("<< n，左移，乘以2的n次方\n>> n，右移，除以2的n次方\n| 或     有1则1 ， & 有0则0\n^ 异或   相同为0，不同为1\n>>> 无符号右移，左边补0\n\n")])])]),r("h3",{attrs:{id:"面向对象的三-四-大特征"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#面向对象的三-四-大特征"}},[t._v("#")]),t._v(" 面向对象的三（四）大特征")]),t._v(" "),r("p",[t._v("封装、继承、多态。（抽象）")]),t._v(" "),r("blockquote",[r("p",[t._v("封装：就是对数据和数据操作进行封装，只对外界提供一个接口，封装可以提高代码的重用性和安全性。")])]),t._v(" "),r("blockquote",[r("p",[t._v("继承：从已有的类中继承信息创建新的类，提高了代码的复用性，是多态的前提。")])]),t._v(" "),r("blockquote",[r("p",[t._v("多态：分为两种：")]),t._v(" "),r("blockquote",[r("p",[t._v("编译时多态机制，是静态分派的: 同类中方法的重载。\n运行时多态机制，是动态分派的：子类中方法的重写。实现多态的前提就是父类的引用或接口的引用指向子类的对象，子类进行方法重写。")])])]),t._v(" "),r("h3",{attrs:{id:"多态的好处"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多态的好处"}},[t._v("#")]),t._v(" 多态的好处")]),t._v(" "),r("p",[t._v("多态可以实现同样的对象引用调用同样的方法做出不同的事情。具有可扩充性，增加新的子类不影响已经存在的类的结构。")]),t._v(" "),r("h3",{attrs:{id:"虚拟机中是如何实现多态的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机中是如何实现多态的"}},[t._v("#")]),t._v(" 虚拟机中是如何实现多态的")]),t._v(" "),r("p",[t._v("通过动态绑定技术，在运行期间判断所引用对象的实际类型，根据实际类型调用对应的方法。")]),t._v(" "),r("h3",{attrs:{id:"接口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[t._v("#")]),t._v(" 接口")]),t._v(" "),r("p",[t._v("接口是一系列方法的声明，方法没有方法体，变量是public static final修饰的，方法默认是被public abstract修饰的。不能有构造方法"),r("br"),t._v("\n接口需要被其他类实现，这些实现可以有不同的行为。")]),t._v(" "),r("h3",{attrs:{id:"抽象类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[t._v("#")]),t._v(" 抽象类")]),t._v(" "),r("p",[t._v("用abstract修饰的类，不能被实例化，可以有构造方法、抽象方法和非抽象方法。"),r("br"),t._v("\n抽象类不一定有抽象方法，但有抽象方法的类一定是抽象类。")]),t._v(" "),r("h3",{attrs:{id:"接口和抽象类的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#接口和抽象类的区别"}},[t._v("#")]),t._v(" 接口和抽象类的区别")]),t._v(" "),r("ul",[r("li",[t._v("不同点")])]),t._v(" "),r("blockquote",[r("p",[t._v("抽象类中可以有抽象方法和普通方法（没有方法体的方法称为抽象方法），接口中的方法全是抽象方法。\n抽象类中可以有构造方法，接口中没有。构造方法在在实例化派生类之前调用，可以初始化抽象类字段或执行其他与子类相关的代码。\n抽象类可以有普通成员变量，接口中没有。\n抽象类在代码实现上发挥作用，接口主要是定义项目模块之间的通信。\n一个类只能继承一个抽象类，一个接口可以被多个类实现。\n抽象类可以提供某些方法的部分代码的实现，接口不行，向一个抽象类加入一个新的普通方法(非抽象方法)时，它的所有子类都自动有了这个新方法，而接口不行，接口中加入了新方法，其实现类（非抽象类）必须重写这个新方法。")])]),t._v(" "),r("ul",[r("li",[t._v("相同点：")])]),t._v(" "),r("blockquote",[r("p",[t._v("都不能实例化对象，子类必须实现抽象类或者接口的全部抽象方法，否则子类也必须定义为抽象类。")])]),t._v(" "),r("h3",{attrs:{id:"重载、重写-覆盖"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#重载、重写-覆盖"}},[t._v("#")]),t._v(" 重载、重写/覆盖")]),t._v(" "),r("blockquote",[r("p",[t._v("重载：参数列表不同（个数、顺序、类型），方法名相同，在同一类中。")])]),t._v(" "),r("blockquote",[r("p",[t._v("重写/覆盖：参数列表相同，方法名相同，在子类中，子类的方法修饰符权限必须高于父类，抛出的异常必须比父类范围小。")])]),t._v(" "),r("h3",{attrs:{id:"父类的静态方法能否被子类重写"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#父类的静态方法能否被子类重写"}},[t._v("#")]),t._v(" 父类的静态方法能否被子类重写？")]),t._v(" "),r("p",[t._v("不能，重写只适用于实例方法，如果子类中有和父类相同签名的静态方法，子类这个方法就会被隐匿，子类只能调用父类的这个静态方法。")]),t._v(" "),r("h3",{attrs:{id:"不可变对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#不可变对象"}},[t._v("#")]),t._v(" 不可变对象")]),t._v(" "),r("p",[t._v("指对象一旦创建就不能被改变，任何修改都会创建一个新的对象，如String，Integer等包装类。")]),t._v(" "),r("h3",{attrs:{id:"静态变量和实例变量的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#静态变量和实例变量的区别"}},[t._v("#")]),t._v(" 静态变量和实例变量的区别")]),t._v(" "),r("blockquote",[r("p",[t._v("静态变量又称为类变量，存在于方法区，程序加载类的字节码时就会给静态变量分配空间，可以直接用类名调用。\n实例变量在创建实例对象时才被分配空间，实例变量本身存放在堆内存中（动态分配，速度慢），其引用存放在栈中（大小固定，速度快）")])]),t._v(" "),r("h3",{attrs:{id:"java创建对象的几种方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java创建对象的几种方式"}},[t._v("#")]),t._v(" Java创建对象的几种方式")]),t._v(" "),r("ol",[r("li",[t._v("采用new")]),t._v(" "),r("li",[t._v("通过反射")]),t._v(" "),r("li",[t._v("采用clone")]),t._v(" "),r("li",[t._v("通过序列化机制")])]),t._v(" "),r("p",[t._v("其中new方式是耦合度最高的，尽量少用new创建对象。")]),t._v(" "),r("h3",{attrs:{id:"序列化的实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#序列化的实现"}},[t._v("#")]),t._v(" 序列化的实现")]),t._v(" "),r("p",[t._v("将对象的内容进行流化： 类实现Serializeable接口，使用一个输出流（如FileOutputStream）构造一个ObjectOutputStream（对象流）对象，在使用ObjectOutPutStream对象的writeObject（Object obj）方法将对象写出。\n反序列化就是用输入流，用ObjectInputStream对象的readObject（ ）方法")]),t._v(" "),r("h3",{attrs:{id:"transient关键字"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#transient关键字"}},[t._v("#")]),t._v(" transient关键字")]),t._v(" "),r("p",[t._v("属性前添加关键字transient，那么该属性将不需要序列化")]),t._v(" "),r("h3",{attrs:{id:"switch中能否用string做参数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#switch中能否用string做参数"}},[t._v("#")]),t._v(" switch中能否用String做参数")]),t._v(" "),r("p",[t._v("jdk1.7之后可以。switch不能用在long上。")]),t._v(" "),r("h3",{attrs:{id:"string"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),r("blockquote",[r("p",[t._v('s1="ab",String s2="a"+"b",String s3="a",String s4="b",s5=s3+s4,那么s2=s5返回什么？\nfalse，编译过程中，编译器会将s2优化为"ab",会将其放置在常量池中，s5则是被创建在堆区，相当于s5=new String("ab");\nps:Java中字符串的连接（+）实际上都是使用StringBuilder的append()方法，(+)本质上就是创建了StringBuilder对象进行append操作，然后将拼接后的StringBuilder对象toString方法成String对象。\nString 底层就是个字符类型数组char[]')])]),t._v(" "),r("h3",{attrs:{id:"字符型常量char和字符串常量string的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符型常量char和字符串常量string的区别"}},[t._v("#")]),t._v(" 字符型常量char和字符串常量String的区别")]),t._v(" "),r("ol",[r("li",[t._v("形式上，字符常量单引号引起的一个字符，字符串常量是双引号引起的0至多个字符，char c = 'a'; String s = \"abc\";")]),t._v(" "),r("li",[t._v("含义上，字符常量是一个整型的Ascll值，而字符串常量代表的是字符串在内存中的地址")]),t._v(" "),r("li",[t._v("占内存大小上，字符常量占两个字节，字符串常量占0至多个字节")])]),t._v(" "),r("h3",{attrs:{id:"string-对象的intern-方法。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string-对象的intern-方法。"}},[t._v("#")]),t._v(" String 对象的intern()方法。")]),t._v(" "),r("p",[t._v("intern()方法会首先从常量池中查找是否存在该常量值，如果常量池中不存在，则先在常量池中创建，如果已经存在则直接返回。")]),t._v(" "),r("h3",{attrs:{id:"string-的substring方法-截取字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string-的substring方法-截取字符串"}},[t._v("#")]),t._v(" String 的subString方法，截取字符串")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("subString(start,end)，[start,end);  //左闭右开\nsubString(a);  //从a开始，一直到结束\n\n")])])]),r("h3",{attrs:{id:"string-的split方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string-的split方法"}},[t._v("#")]),t._v(" String 的split方法")]),t._v(" "),r("p",[t._v("返回字符串数组，对于一些参数是正则表达式的一部分则需要用转译符\\"),r("br"),t._v('\nsplit(",");   根据,分隔，返回所有的数据；'),r("br"),t._v('\nsplit(",",3); 根据,分隔，返回前3条数据')]),t._v(" "),r("h3",{attrs:{id:"创建了几个对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建了几个对象"}},[t._v("#")]),t._v(" 创建了几个对象")]),t._v(" "),r("ol",[r("li",[t._v('String str = new String(“abc”);创建了几个对象，常量池有abc字段是1个，常量池没有"abc"字段则是2个。')]),t._v(" "),r("li",[t._v("String str=“abc”;创建了几个对象（如果常量池里面已经有对象了就是0个。如果没有就是1个）;")]),t._v(" "),r("li",[t._v("new String(“abc”).intern();创建了几个对象（如果常量池里面已经有该字符串对象了就是1个，如果没有就是两个）")])]),t._v(" "),r("h3",{attrs:{id:"java中-和equals-的区别-equals-和hashcode-的区别-为什么重写equals一定要重写hashcode"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java中-和equals-的区别-equals-和hashcode-的区别-为什么重写equals一定要重写hashcode"}},[t._v("#")]),t._v(" Java中==和equals()的区别？equals()和hashCode()的区别？为什么重写equals一定要重写HashCode？")]),t._v(" "),r("blockquote",[r("ol",[r("li",[t._v("==是运算符，比较两个变量是否相等，equals()是Object类的方法，比较两个对象是否相等（默认的是比较两个对象的地址，和==结果一样。")])])]),t._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[t._v("hashCode()也是Object类的方法，返回一个哈希值，若两个对象的的equals()是相等的，那么调用hashCode()一定返回相同的哈希值；若equals()比较不相等，hashCode()不一定相等；hashCode()相等，equals()不一定相等；hashCode不等，equals()一定不等。\nps:Java规范：使用equals()判断两个相等的对象，必须具有相等的equals()方法，所以重写equals()方法时，一定要重写hashCode()方法。将对象放入集合中先判断集合中是否有此对象的hashCode()，没有再equals()比较。\nhashCode来源于这个对象的内部地址转换成的整型值，比较两个对象是否相同之前会先比较HashCode是否相同，HashCode相同的话再用equals方法比较，HashCode不同则直接判断这两个对象不同，如果只是重写equals方法，可能会出现equals方法相同而HashCode不同，导致重写的equals方法就没有意义了")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("\t// Effective中提供的重写hashcode方法\n\t@Override\n\tpublic int hashCode() {\n\t\tint result = name.hashCode();\n\t\tresult = 17 * result + sex.hashCode();\n\t\tresult = 17 * result + age.hashCode();\n\t\treturn result;\n\t}\n")])])]),r("h3",{attrs:{id:"a-b-和-a-a-b"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#a-b-和-a-a-b"}},[t._v("#")]),t._v(" a+=b 和 a=a+b")]),t._v(" "),r("p",[t._v("+=会隐式强转结果类型。")]),t._v(" "),r("h3",{attrs:{id:"short-s1-10-s1-s1-1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#short-s1-10-s1-s1-1"}},[t._v("#")]),t._v(" short s1=10; s1=s1+1;")]),t._v(" "),r("p",[t._v("错误，s1+1会将结果转为int类型")]),t._v(" "),r("h3",{attrs:{id:"和"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#和"}},[t._v("#")]),t._v(" &和&&")]),t._v(" "),r("p",[t._v("&是位操作，&&是逻辑运算符，&&具有短路特性。")]),t._v(" "),r("h3",{attrs:{id:"内部类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内部类"}},[t._v("#")]),t._v(" 内部类")]),t._v(" "),r("p",[t._v("就像是独立的实体，提供了更好的封装，除了外围类，其他类都不能访问。")]),t._v(" "),r("h3",{attrs:{id:"final、finalize、finally"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#final、finalize、finally"}},[t._v("#")]),t._v(" final、finalize、finally")]),t._v(" "),r("ol",[r("li",[t._v("final修饰变量不可变，修饰类不能被继承，修饰方法不能被重写；\nfinal在构造函数中修饰变量，初始化一个对象并赋值给一个引用变量之前，final域会先被初始化；\n在获取一个对象的引用之后，再读取其final域的值\n如果修饰的是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能让其指向另一个对象。")]),t._v(" "),r("li",[t._v("finalize方法是Object对象的方法，是对象在被回收之前调用的")]),t._v(" "),r("li",[t._v("finally是与try、catch一起用于处理异常的，一定会执行")])]),t._v(" "),r("h3",{attrs:{id:"浅拷贝和深拷贝"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝和深拷贝"}},[t._v("#")]),t._v(" 浅拷贝和深拷贝")]),t._v(" "),r("blockquote",[r("p",[t._v("浅拷贝只复制对象，而不复制对象中所引用的对象\n深拷贝会把对象和其所有引用的对象都复制一遍")])]),t._v(" "),r("h3",{attrs:{id:"static"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#static"}},[t._v("#")]),t._v(" static")]),t._v(" "),r("ul",[r("li",[t._v("静态变量")]),t._v(" "),r("li",[t._v("静态方法   如果方法的执行不依赖于类的变量和其他方法，最好设置为静态的，占用更小的空间")]),t._v(" "),r("li",[t._v("静态代码块（多用于初始化）")]),t._v(" "),r("li",[t._v("静态内部类   不能使用任何外围类的非static成员变量和方法。")]),t._v(" "),r("li",[t._v("静态导包 eg: import static java.lang.Math.*; 则此类中就可以用Math类的方法了")])]),t._v(" "),r("p",[t._v("类不管构造多少对象，静态代码块只执行一次")]),t._v(" "),r("p",[t._v("单类构造对象执行顺序：")]),t._v(" "),r("ol",[r("li",[t._v("静态代码块")]),t._v(" "),r("li",[t._v("非静态代码块")]),t._v(" "),r("li",[t._v("构造方法")])]),t._v(" "),r("p",[t._v("有父类的子类构造对象执行顺序")]),t._v(" "),r("ol",[r("li",[t._v("父类静态代码块")]),t._v(" "),r("li",[t._v("子类静态代码块")]),t._v(" "),r("li",[t._v("父类非静态代码块")]),t._v(" "),r("li",[t._v("父类无参构造方法")]),t._v(" "),r("li",[t._v("子类非静态代码块")]),t._v(" "),r("li",[t._v("子类无参构造方法")])]),t._v(" "),r("h3",{attrs:{id:"this"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[t._v("#")]),t._v(" this")]),t._v(" "),r("p",[t._v("用于表示本类对象的引用")]),t._v(" "),r("h3",{attrs:{id:"super"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#super"}},[t._v("#")]),t._v(" super")]),t._v(" "),r("p",[t._v("用于表示父类对象的引用\n子类构造方法的第一行默认调用了super()，如果第一行调用了其他构造方法，则会替代super()")]),t._v(" "),r("h2",{attrs:{id:"new-son-调用步骤"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#new-son-调用步骤"}},[t._v("#")]),t._v(" new Son(); 调用步骤")]),t._v(" "),r("ol",[r("li",[t._v("super();")]),t._v(" "),r("li",[t._v("Son();\n相当于")]),t._v(" "),r("li",[t._v("Father();")]),t._v(" "),r("li",[t._v("Son();")])]),t._v(" "),r("h3",{attrs:{id:"new-son-name-调用步骤"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#new-son-name-调用步骤"}},[t._v("#")]),t._v(" new Son(name); 调用步骤")]),t._v(" "),r("ol",[r("li",[t._v("super();")]),t._v(" "),r("li",[t._v("Son(String name);\n相当于")]),t._v(" "),r("li",[t._v("Father();  //父类没有显式的写出无参构造则会报错")]),t._v(" "),r("li",[t._v("Son(String name);")])]),t._v(" "),r("h3",{attrs:{id:"如果子类重写的构造方法需要子类的无参构造方法-则必须在第一行写this"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如果子类重写的构造方法需要子类的无参构造方法-则必须在第一行写this"}},[t._v("#")]),t._v(" 如果子类重写的构造方法需要子类的无参构造方法，则必须在第一行写this();")]),t._v(" "),r("ol",[r("li",[t._v("this();\n相当于")]),t._v(" "),r("li",[t._v("Father();")]),t._v(" "),r("li",[t._v("Son();")])]),t._v(" "),r("h3",{attrs:{id:"如果子类重写的构造方法需要父类的无参构造方法-则必须在第一行写super"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如果子类重写的构造方法需要父类的无参构造方法-则必须在第一行写super"}},[t._v("#")]),t._v(" 如果子类重写的构造方法需要父类的无参构造方法，则必须在第一行写super();")]),t._v(" "),r("ol",[r("li",[t._v("super();\n相当于")]),t._v(" "),r("li",[t._v("Father();")])]),t._v(" "),r("h3",{attrs:{id:"this-name"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#this-name"}},[t._v("#")]),t._v(" this(name);")]),t._v(" "),r("p",[t._v("相当于")]),t._v(" "),r("ol",[r("li",[t._v("Father();")]),t._v(" "),r("li",[t._v("Son(String name);")])]),t._v(" "),r("p",[t._v("this和super是对象实例级别，static是类级别，this、super不能用在static中")]),t._v(" "),r("h3",{attrs:{id:"使用什么类型表示价格"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用什么类型表示价格"}},[t._v("#")]),t._v(" 使用什么类型表示价格？")]),t._v(" "),r("p",[t._v("不是特别关心性能和内存，用BigDecimal对象，\n加减乘除操作分别为add(BigDecimal value)、substruct(BigDecimal value)、multiply(BigDecimal value)、divide(BigDecimal value)。")]),t._v(" "),r("h3",{attrs:{id:"byte-数组和string转换-并设置编码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#byte-数组和string转换-并设置编码"}},[t._v("#")]),t._v(" byte[]数组和String转换,并设置编码")]),t._v(" "),r("p",[t._v('.getBytes("UTF-8");\nnew String(b1,"UTF-8");')]),t._v(" "),r("h3",{attrs:{id:"可以将int转换成byte类型吗"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#可以将int转换成byte类型吗"}},[t._v("#")]),t._v(" 可以将int转换成byte类型吗？")]),t._v(" "),r("p",[t._v("可以，int是32位，byte是8位，强转会丢失高24位。")]),t._v(" "),r("h3",{attrs:{id:"枚举"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[t._v("#")]),t._v(" 枚举")]),t._v(" "),r("ul",[r("li",[t._v("通过枚举实现的设计模式：单例模式、策略模式")])]),t._v(" "),r("h3",{attrs:{id:"异常"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[t._v("#")]),t._v(" 异常")]),t._v(" "),r("ol",[r("li",[t._v("error：虚拟机相关的异常，如系统崩溃、内存不足、方法调用栈溢出")]),t._v(" "),r("li",[t._v("Exception：")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("CheckedException编译时异常：用try/catch或throw、throws处理")])]),t._v(" "),r("li",[r("p",[t._v("RuntimeException运行时异常：\njava.lang.NullPointExcetion 空指针异常\njava.lang.ClassNotFoundExcetion 找不到指定的类\njava.lang.NumberFormatException 字符串转换数字异常\njava.lang.IndexOutOfBoundException 数组角标越界异常\njava.lang.ClassCastException 数据类型转换异常")])]),t._v(" "),r("li",[r("p",[t._v("throw 用在方法体内，抛出一个实例")])]),t._v(" "),r("li",[r("p",[t._v("throws 用在方法声明后，由该方法调用者处理异常，表示会出现一种异常的可能性")])])]),t._v(" "),r("h3",{attrs:{id:"类的实例化顺序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类的实例化顺序"}},[t._v("#")]),t._v(" 类的实例化顺序")]),t._v(" "),r("ol",[r("li",[t._v("父类的静态变量和静态代码块（书写顺序）")]),t._v(" "),r("li",[t._v("子类的静态变量和静态代码块（书写顺序）")]),t._v(" "),r("li",[t._v("父类的成员变量赋值")]),t._v(" "),r("li",[t._v("父类类的构造代码块")]),t._v(" "),r("li",[t._v("父类的构造方法")]),t._v(" "),r("li",[t._v("子类的构造代码块")]),t._v(" "),r("li",[t._v("子类的构造方法")])]),t._v(" "),r("h2",{attrs:{id:"多线程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[t._v("#")]),t._v(" 多线程")]),t._v(" "),r("h3",{attrs:{id:"进程和线程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[t._v("#")]),t._v(" 进程和线程")]),t._v(" "),r("p",[t._v("进程是程序运行和资源分配的基本单位\n线程是CPU调度和分派的基本单位")]),t._v(" "),r("p",[t._v("进程在执行过程中拥有独立的内存单元，而多个线程可以共享内存资源")]),t._v(" "),r("h3",{attrs:{id:"守护线程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#守护线程"}},[t._v("#")]),t._v(" 守护线程")]),t._v(" "),r("p",[t._v("守护线程为用户线程提供服务，eg:GC线程\n程序执行完毕，JVM会等待非守护线程运行完毕后关闭，而不会等待守护线程。")]),t._v(" "),r("h3",{attrs:{id:"线程切换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程切换"}},[t._v("#")]),t._v(" 线程切换")]),t._v(" "),r("p",[t._v("CPU控制权由一个正在运行的线程切换到另一个就绪并等待获取CPU执行权的线程")]),t._v(" "),r("h3",{attrs:{id:"创建线程的方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建线程的方式"}},[t._v("#")]),t._v(" 创建线程的方式")]),t._v(" "),r("ol",[r("li",[t._v("继承java.lang.Thread类")]),t._v(" "),r("li",[t._v("实现java.lang.Runnable接口\n第二种方式的优点：Java不支持多继承，实现接口后还可以再继承其他类；继承整个Thread类的开销更大")])]),t._v(" "),r("h3",{attrs:{id:"thread类的start-方法和run-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#thread类的start-方法和run-方法"}},[t._v("#")]),t._v(" Thread类的start()方法和run()方法")]),t._v(" "),r("p",[t._v("线程调用start()方法,表示此线程启动了，此时java虚拟机会调用此线程的run()方法；start()方法真正实现了多线程运行，而无需等待run()方法执行完毕而直接继续执行下面的代码。\nrun()方法只是Thread的一个普通方法，只执行主线程这一个线程，而且要等待run()方法执行完毕，才继续执行下去，这样就达不到写线程的目的了。")]),t._v(" "),r("h3",{attrs:{id:"怎么检测一个线程是否持有对象监视器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#怎么检测一个线程是否持有对象监视器"}},[t._v("#")]),t._v(" 怎么检测一个线程是否持有对象监视器？")]),t._v(" "),r("p",[t._v("Thread类中的静态方法holdsLock(Object obj),当且仅当对象的监视器（即锁）被当前线程持有的时候才会返回true。")]),t._v(" "),r("h3",{attrs:{id:"runnable接口的run-方法和callable接口的call-方法区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#runnable接口的run-方法和callable接口的call-方法区别"}},[t._v("#")]),t._v(" Runnable接口的run()方法和Callable接口的call()方法区别")]),t._v(" "),r("p",[t._v("run方法无返回值，call方法可以返回装载有返回结果的Future对象，Future对象调用get()方法可以获得该返回值。\n两个方法结束后线程会自动结束；")]),t._v(" "),r("blockquote",[r("p",[t._v("Future是个接口，因此可以使用它的实现类FutureTask\npublic interface "),r("code",[t._v("RunnableFuture<V>")]),t._v(" extends Runnable , "),r("code",[t._v("Future<V>")]),t._v("\npublic class FutureTask implements "),r("code",[t._v("RunnableFuture<V>")])])]),t._v(" "),r("h3",{attrs:{id:"sleep-和wait-方法的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#sleep-和wait-方法的区别"}},[t._v("#")]),t._v(" sleep()和wait()方法的区别")]),t._v(" "),r("ol",[r("li",[t._v("sleep()是Thread类的方法，wait()是Object类方法")]),t._v(" "),r("li",[t._v("调用sleep()方法，对象不会释放线程锁，wait()方法会释放对象锁")]),t._v(" "),r("li",[t._v("sleep()睡眠后不会让出系统资源，wait()会让其他线程占用CPU")]),t._v(" "),r("li",[t._v("sleep(milliseconds)需要指定一个时间，时间一到自动唤醒，wait()方法配合notify()或notifyAll()使用;wait()和notify()方法必须在同步块中被调用，wait会立即释放锁，notify则会在同步块执行完了再释放。")])]),t._v(" "),r("h3",{attrs:{id:"为何wait-notify-notifyall-方法不放在thread类中"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为何wait-notify-notifyall-方法不放在thread类中"}},[t._v("#")]),t._v(" 为何wait(),notify(),notifyAll()方法不放在Thread类中？")]),t._v(" "),r("p",[t._v("这三个方法都是对锁进行操作，Java提供的锁是对象级的，而不是线程级的，所以把他们定义在Object类中。")]),t._v(" "),r("h3",{attrs:{id:"如何在两个线程间共享数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何在两个线程间共享数据"}},[t._v("#")]),t._v(" 如何在两个线程间共享数据？")]),t._v(" "),r("p",[t._v("共享对象即可，通过wait/notify/notifyAll、await/signal/signalAll进行唤醒和等待，阻塞队列BlockingQueue就是为共享数据设计的")]),t._v(" "),r("h3",{attrs:{id:"如何正确使用wait"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何正确使用wait"}},[t._v("#")]),t._v(" 如何正确使用wait()?")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("synchronized (obj){\n   while(条件不成立){\n    obj.wait();\n   }\n}\n\n")])])]),r("h3",{attrs:{id:"线程局部变量threadlocal"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程局部变量threadlocal"}},[t._v("#")]),t._v(" 线程局部变量ThreadLocal")]),t._v(" "),r("p",[t._v("属于线程自身所有，每个Thread里面都维护了一个ThreadLocal.ThreadLocalMap把数据进行隔离，不在多个线程间共享，保证了线程的安全。")]),t._v(" "),r("h3",{attrs:{id:"生产者消费者模型的作用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生产者消费者模型的作用"}},[t._v("#")]),t._v(" 生产者消费者模型的作用")]),t._v(" "),r("ol",[r("li",[t._v("通过平衡生产者的生产能力和消费者的消费能力，提升系统的运行效率")]),t._v(" "),r("li",[t._v("解耦，使两者联系更少，独自发展不会受到双方的制约")])]),t._v(" "),r("h3",{attrs:{id:"写一个生产者消费者队列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#写一个生产者消费者队列"}},[t._v("#")]),t._v(" 写一个生产者消费者队列")]),t._v(" "),r("ol",[r("li",[t._v("使用阻塞队列实现")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('//生产者\npublic class Producer implements Runnable {\n    private final BlockingQueue<Integer> queue;\n\tpublic Producer(BlockingQueue q){\n\t    this.queue=q;\n\t}\n\t\n\t@Override\n\tpublic void run(){\n\t    try{\n\t\t    while(true){\n\t\t\t    Thread.sleep(1000);\n\t\t\t\tqueue.put(produce());\n\t\t\t}\n\t\t}catch (InterruptedException e){\n\t\t\n\t\t}\n\t}\n\t\n\tprivate int produce(){\n\t    int n = new Random().nextInt(10000);\n\t\tSystem.out.println("Thread:"+Thread.currentThread().getId()+"produce:"+n);\n\t\treturn n;\n\t\t\n\t}\n}\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('//消费者\npublic class Consumer implements Runnable{\n    private final BlockingQueue<Integer> queue;\n\tpublic Consumer (BlockingQueue q){\n\t    this.queue = q;\n\t}\n\t@Override\n\tpublic void run(){\n\t\n\t    while(true){\n\t\t    try(){\n\t\t\t    Thread.sleep(2000);\n\t\t\t\tconsume(queue.take());//take()方法，取走queue里排在首位的对象\n\t\t\t\t\n\t\t\t}catch (InterruptedException e){\n\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate consume(Integer n){\n\t    System.out.println("Thread:"+Thread.currentThread().getId +"consume:"+n);\n\t}\n}\n\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("//测试\npublic class Test(){\n    public static void main(String[] args){\n\t    BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(100);\n\t\t\n\t\tProducer p = new Producer(queue);\n\t\tConsumer c1 = new Consumer(queue);\n\t\tConsumer c2 = new Consumer(queue);\n\t\t\n\t\tnew Thread(p).start();\n\t\tnew Thread(c1).start();\n\t\tnew Thread(c2).start();\n\t\t\n\t}\n}\n")])])]),r("ol",{attrs:{start:"2"}},[r("li",[t._v("使用wait-notify来实现")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("\n\n")])])]),r("h3",{attrs:{id:"什么是cas"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是cas"}},[t._v("#")]),t._v(" 什么是CAS")]),t._v(" "),r("p",[t._v("Compare and Swap 比较-替换。\n内存值V，旧的预期值A，要修改后的值B。预期值A与内存值V相等时，将内存值修改为B，并返回true。"),r("br"),t._v("\n能保证原子性，是硬件指令，由C语言实现，比synchronized更快")]),t._v(" "),r("h3",{attrs:{id:"volatile变量"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#volatile变量"}},[t._v("#")]),t._v(" volatile变量")]),t._v(" "),r("ul",[r("li",[t._v("volatile变量是一种比synchronized更轻量级的同步机制。")]),t._v(" "),r("li",[t._v("对非volatile变量进行读写时，系统先从内存拷贝变量到CPU缓存中；对volatile变量，系统直接从内存中读取，跳过了CPU缓存这一步。")]),t._v(" "),r("li",[t._v("一个线程修改了volatile变量的值，volatile能保证新值能立即同步到主内存，以及每次使用前立即从主内存刷新。")]),t._v(" "),r("li",[t._v("内禁止CPU指令重排序（CPU指令重排序：CPU采用了允许将多条指令不按程序规定的顺序，分开发送各相应电路单元处理）")]),t._v(" "),r("li",[t._v("性能：读和普通变量几乎相同，写操作较慢（因为要在代码中插入内存屏障保证处理器不发生乱序执行）")])]),t._v(" "),r("h3",{attrs:{id:"乐观锁、悲观锁"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁、悲观锁"}},[t._v("#")]),t._v(" 乐观锁、悲观锁")]),t._v(" "),r("p",[t._v("乐观锁：认为线程竞争不总是发生，不需要持有锁，但是在更新数据时要判断别人有没有修改数据，一般用CAS算法和版本号机制实现\n优点：提高了并发性能"),r("br"),t._v("\n缺点：乐观锁只能保证一个共享变量的原子操作；CAS长时间不成功的话会一直自旋，给CPU带来很大开销\n悲观锁：总是认为线程会竞争，每次拿到数据都会上锁。")]),t._v(" "),r("h3",{attrs:{id:"concurrenthashmap的并发度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap的并发度"}},[t._v("#")]),t._v(" ConcurrentHashMap的并发度")]),t._v(" "),r("p",[t._v("segment的大小：16，即最多可以16个线程操作ConcurrentHashMap")]),t._v(" "),r("h3",{attrs:{id:"concurrenthashmap"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap"}},[t._v("#")]),t._v(" ConcurrentHashMap")]),t._v(" "),r("ol",[r("li",[t._v("jdk1.6中")])]),t._v(" "),r("blockquote",[r("p",[t._v("采用分离锁的方式，没有对整个hash表进行锁定，而是局部锁定，不影响其他线程对hash表的其他地方进行访问")])]),t._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[t._v("jdk1.8中")])]),t._v(" "),r("blockquote",[r("p",[t._v("与1.6不同，它采用了乐观锁CAS算法，底层还是数组+链表->红黑树,")])]),t._v(" "),r("h3",{attrs:{id:"多线程开发良好的实践"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多线程开发良好的实践"}},[t._v("#")]),t._v(" 多线程开发良好的实践")]),t._v(" "),r("ol",[r("li",[t._v("给线程命名")]),t._v(" "),r("li",[t._v("考虑使用线程池")]),t._v(" "),r("li",[t._v("优先使用volatile变量")]),t._v(" "),r("li",[t._v("优先使用并发容器而非同步容器")]),t._v(" "),r("li",[t._v("线程通信用高层次的并发工具，如BlockingQueue，少用wait()、notify()")]),t._v(" "),r("li",[t._v("最小化同步范围")])]),t._v(" "),r("h2",{attrs:{id:"数组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),r("p",[t._v("查找 时间复杂度O(1)\n插入、删除 涉及到元素的移动，时间复杂度为O(n)")]),t._v(" "),r("h3",{attrs:{id:"创建数组的方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建数组的方式"}},[t._v("#")]),t._v(" 创建数组的方式")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("int[] arr = new int[6];\nint[] arr1 = new int[]{1,2,3,4,5,6};\nint[] arr2 = {1,2,3,4,5,6}\n")])])]),r("h3",{attrs:{id:"存入数据put"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#存入数据put"}},[t._v("#")]),t._v(" 存入数据put")]),t._v(" "),r("p",[t._v("通过对数据元素的hashCode值对容量取模（hashCode值 % 容量）来分配位置到数组，取模值相同则在数组的当前位置以链表结构形式继续存入")]),t._v(" "),r("h3",{attrs:{id:"扩容"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#扩容"}},[t._v("#")]),t._v(" 扩容")]),t._v(" "),r("p",[t._v("扩容时，是用位运算，将旧数据元素分配位置，迁移到新数组")]),t._v(" "),r("h2",{attrs:{id:"链表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[t._v("#")]),t._v(" 链表")]),t._v(" "),r("p",[t._v("新增、删除 只需处理结点间的引用，时间复杂度为O(1)\n查找 需要遍历列表的所有结点逐一进行对比，复杂度为O(n)")]),t._v(" "),r("h2",{attrs:{id:"集合-在java-util包中"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#集合-在java-util包中"}},[t._v("#")]),t._v(" 集合.在java.util包中")]),t._v(" "),r("h3",{attrs:{id:"java中集合及继承关系"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java中集合及继承关系"}},[t._v("#")]),t._v(" Java中集合及继承关系")]),t._v(" "),r("p",[r("img",{attrs:{src:e(596),alt:"集合继承关系图"}})]),t._v(" "),r("p",[t._v("集合分为两大类：Collection、Map")]),t._v(" "),r("blockquote",[r("p",[t._v("Collection\n是一个个的存（Map是键值对的形式存）,Collection对象在调用remove、contains方法时会调用equals和hashCode方法，重写equals时必须重写hashCode方法。\nCollection继承了Iterable接口，有个iterator()方法，用于统一遍历元素，返回的Iterator对象，称为迭代器，可以方便的删除集合中的内容")])]),t._v(" "),r("blockquote",[r("p",[t._v("Map")])]),t._v(" "),r("h2",{attrs:{id:"_1-实现了collection接口的集合"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-实现了collection接口的集合"}},[t._v("#")]),t._v(" 1.实现了Collection接口的集合")]),t._v(" "),r("p",[t._v("一个一个的存"),r("br"),t._v("\n在调用remove、contains方法时会调用equals和hashCode方法"),r("br"),t._v("\n重写equals时必须重写hashCode方法"),r("br"),t._v("\nCollection继承了Iterable接口，有个iterator()方法用于统一遍历元素，返回的Iterator对象，称为迭代器，可以方便的删除集合中的内容")]),t._v(" "),r("h3",{attrs:{id:"list接口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#list接口"}},[t._v("#")]),t._v(" List接口")]),t._v(" "),r("p",[t._v("有序，元素可重复\n实现类有：")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("LinkedList 基于链表，增删快，查询慢，非线程安全")])]),t._v(" "),r("li",[r("p",[t._v("ArrayList 基于数组，增删慢，查询快，非线程安全")])]),t._v(" "),r("li",[r("p",[t._v("Vector 基于数组，都慢，效率低，线程安全，增删改查方法都加了synchronized 来保证同步")])]),t._v(" "),r("li",[r("p",[t._v("CopyOnWriteArrayList，线程安全，只是在读、删方法上加了锁，适合读取多、修改少的数据\n写人数据时会将原数组内容copy到volatile修饰的成员变量数组中，修改操作的同时，读操作不会被阻塞，而是继续读取旧的数据")])])]),t._v(" "),r("h3",{attrs:{id:"set接口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#set接口"}},[t._v("#")]),t._v(" Set接口")]),t._v(" "),r("p",[t._v("无序，元素不可重复，元素在集合的位置由元素的hashCode决定\n实现类有：")]),t._v(" "),r("ul",[r("li",[t._v("HashSet 无序、不可重复。底层由HashMap实现，使用时要重写equals()方法和hashCode()方法 非线程安全")]),t._v(" "),r("li",[t._v("LinkedHashSet 继承于HashSet 非线程安全")]),t._v(" "),r("li",[t._v("TreeSet 有序、不可重复。底层红黑树")])]),t._v(" "),r("h2",{attrs:{id:"_2-实现了map接口的集合"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现了map接口的集合"}},[t._v("#")]),t._v(" 2.实现了Map接口的集合")]),t._v(" "),r("h3",{attrs:{id:"map接口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#map接口"}},[t._v("#")]),t._v(" Map接口")]),t._v(" "),r("p",[t._v("无序，Key不可重复、值可以，键值对形式的存\n实现类有：")]),t._v(" "),r("ol",[r("li",[r("strong",[t._v("HashMap")])])]),t._v(" "),r("blockquote",[r("p",[t._v("基于hash表的Map接口实现，非线程安全，支持null键、null值\nHashMap的静态内部类")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("static class Node<K,V> implements Map.Entry<K,V> \n属性有  final int hash;\n        final K key;\n        V value;\n        Node<K,V> next;\n")])])]),r("blockquote",[r("p",[t._v("基于数组+链表的存储结构（数组中的每一项(map.Entry)存储的数据是个链表），数据hash值 & (length-1) 得到该数据在数组中的位置;eg:每个数组元素存储的是链表的最后插入的数据A，A的index是0，则Entry[0]=A,此时又put了B，B的index也是0，则Entry[0]=B,B.next=A。"),r("br"),t._v("\n数组默认容量16，加载因子0.75，即当存入12个元素后就进行扩容，扩容是新建一个长度为16*2的数组，选择0.75作为默认的加载因子，完全是时间和空间成本上寻求的一种折衷选择"),r("br"),t._v("\n扩容后重新寻址rehash，遍历原entry数组重新hash到新数组中，原来的对象在新数组中的位置，要么在原下标的位置，要么在(原下标+原容量16)，位运算时数组长度是2的n次方（因为这样不同的key的hash计算结果相同的几率较低，减少hash碰撞，使得数据在数组上分布的比较均匀，查询的时候就不用遍历某个位置上的链表，可以提升定位元素的的效率）"),r("br"),t._v("\njdk1.8后链表长度大于阈值(8),链表会转为红黑树（时间复杂度从O(n)到O(logn)），转为红黑树之前判断，数组长度小于64则会先扩容\njdk1.8后put或get方法操作链表时比1.7多了对是否存在树节点的判断")])]),t._v(" "),r("ul",[r("li",[t._v("jdk7：\n数组+链表。"),r("br"),t._v("\n数组的定义：Entry<>"),r("br"),t._v("\n链表头插法：新增结点插在头部，实现简单，但插入的顺序和读取的顺序是相反的，并发下可能会死锁")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("\nhash值：使用hashCode的值，通过一定算法产生的hash值，如下方法\nfinal int hash(Object k) {\n        int h = 0;\n        h ^= k.hashCode();\n\n        h ^= (h >>> 20) ^ (h >>> 12);\n        return h ^ (h >>> 7) ^ (h >>> 4);\n    }\n\t\n索引：static int indexFor(int h, int length) {\n        return h & (length-1);\n    }\n\t\n")])])]),r("ul",[r("li",[t._v("jdk8："),r("br"),t._v("\n数组+链表+红黑树。"),r("br"),t._v("\n数组的定义：Bucket<> TreeCode<>"),r("br"),t._v("\n链表长度超过一定阈值(8)时会转存为红黑树，尾插法：新增结点总是插在尾部，实现复杂，插入顺序与读取顺序一致")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("\nhash值：使用hashCode的值，通过一定算法产生的hash值，如下方法\nstatic final int hash(Object key) {\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n    }\n索引：hash值 & (length-1)，删除了indexFor方法声明，直接用式子表示\n\n")])])]),r("ol",{attrs:{start:"2"}},[r("li",[r("p",[r("strong",[t._v("LinkedHashMap")]),t._v("\nHashMap的子类，有序 非线程安全"),r("br"),t._v("\n是基于HashMap和双向链表实现的，双向链表只是用于保证顺序")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("ConcurrentHashMap")]),t._v("\njdk1.8中，抛弃了jdk1.7的Segment(Segment继承了ReentrantLock)分段式锁，采用CAS+synchronized来保证线程安全，存储方式是数组+链表/红黑树，默认容量16，负载因子0.75")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("HashTable")]),r("br"),t._v("\n不支持null键、null值 线程安全，存储方式是数组+链表，链表主要是解决哈希冲突")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("TreeMap")]),t._v("\n红黑树,还实现了SortMap接口")])])]),t._v(" "),r("h3",{attrs:{id:"hashmap和arraylist的大小"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hashmap和arraylist的大小"}},[t._v("#")]),t._v(" HashMap和ArrayList的大小")]),t._v(" "),r("p",[t._v("HashMap默认大小16个元素，扩容是原大小的2倍，加载因子0.75，如果传了初始值，会变成比当前值大的2的n次方的最小数"),r("br"),t._v("\nArrayList默认大小10个元素，扩容是原大小的1.5倍 "),r("code",[t._v("NewLength = OldLength + OldLength >> 1")])]),t._v(" "),r("h3",{attrs:{id:"hashmap和weekhashmap的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hashmap和weekhashmap的区别"}},[t._v("#")]),t._v(" HashMap和WeekHashMap的区别")]),t._v(" "),r("p",[t._v("WeekHashMap使用上和HashMap没有任何区别，只不过是使用了弱引用作为key，key对象没有任何引用时，key/value就会被回收")]),t._v(" "),r("h3",{attrs:{id:"poll-方法和remove-方法的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#poll-方法和remove-方法的区别"}},[t._v("#")]),t._v(" poll()方法和remove()方法的区别")]),t._v(" "),r("p",[t._v("两者都是从队列中取出一个元素，poll()方法取出元素失败时会返回null，remove()方法失败时会抛出异常")]),t._v(" "),r("h3",{attrs:{id:"linkedhashmap和propertyqueue的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashmap和propertyqueue的区别"}},[t._v("#")]),t._v(" LinkedHashMap和PropertyQueue的区别")]),t._v(" "),r("p",[t._v("LinkedHashMap遍历时根据元素插入的顺序，PropertyQueue是优先级队列，遍历时没有任何顺序保证")]),t._v(" "),r("h3",{attrs:{id:"arraylist和linkedlist的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#arraylist和linkedlist的区别"}},[t._v("#")]),t._v(" ArrayList和LinkedList的区别")]),t._v(" "),r("ul",[r("li",[t._v("ArrayList底层的数据结构是数组，查询时时间复杂度是O(1),较快")]),t._v(" "),r("li",[t._v("LinkedList底层是双向循环链表,查询时时间复杂度是O(n),比较慢")])]),t._v(" "),r("h3",{attrs:{id:"arraylist和array的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#arraylist和array的区别"}},[t._v("#")]),t._v(" ArrayList和Array的区别")]),t._v(" "),r("p",[t._v("Array可以容纳基本类型和对象，而ArrayList只能存放对象\nArray可以指定大小，而ArrayList的大小是固定的")]),t._v(" "),r("h3",{attrs:{id:"arraylist和copyonwritearraylist的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#arraylist和copyonwritearraylist的区别"}},[t._v("#")]),t._v(" ArrayList和CopyOnWriteArrayList的区别")]),t._v(" "),r("p",[r("code",[t._v("java.util.ArrayList<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, java.io.Serializable")]),t._v(" "),r("code",[t._v("java.util.concurrent.CopyOnWriteArrayList<E> implements List<E>, RandomAccess, Cloneable, java.io.Serializable")])]),t._v(" "),r("p",[t._v("ArrayList线程不安全，CopyOnWriteArrayList线程安全\n想要保证ArrayList线程安全，如果用synchronized或ReadWriteLock，写操作加锁后如果有大量读操作，会造成阻塞，")]),t._v(" "),r("h3",{attrs:{id:"如何打印数组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何打印数组"}},[t._v("#")]),t._v(" 如何打印数组")]),t._v(" "),r("p",[t._v("用Arrays.toString()方法或Arrays.deepToString()//数组中还有数组，深度打印")]),t._v(" "),r("h3",{attrs:{id:"遍历arraylist时如何正确移除特定值的元素"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#遍历arraylist时如何正确移除特定值的元素"}},[t._v("#")]),t._v(" 遍历ArrayList时如何正确移除特定值的元素")]),t._v(" "),r("ol",[r("li",[t._v("for循环遍历，使用ArrayList的remove()方法，移除了某个值后指针自动后移，for的条件又加一了，可能会忽略下一个符合条件的元素。可以再i--进行处理。")]),t._v(" "),r("li",[t._v("iterator迭代器遍历，使用iterator的remove()方法，next()指针逐个后移，建议使用。")])]),t._v(" "),r("h3",{attrs:{id:"hashmap"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[t._v("#")]),t._v(" HashMap")]),t._v(" "),r("blockquote",[r("p",[t._v("是线程不安全的 会出现死锁（1.7版本之前会）或数据丢失\nresize时的死循环及使用迭代器时fast-fail\n多线程扩容可能会死锁，如果当前位置有两个数据AB，其中一个线程新扩容存储顺序可能是AB，另一个线程是BA，造成死锁"),r("br"),t._v("\nJDK8对HashMap死循环的解决方法是：扩容后，新数组中的链表顺序依然与旧数组中的链表顺序保持一致。")])]),t._v(" "),r("h3",{attrs:{id:"遍历map集合"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#遍历map集合"}},[t._v("#")]),t._v(" 遍历map集合")]),t._v(" "),r("ol",[r("li",[t._v("keySet()方法，返回"),r("code",[t._v("Set<Key>")]),t._v("集合 keySet,\nfor(String key ：keySet){\nkey//key值\n}")]),t._v(" "),r("li",[t._v("entrySet()方法，返回"),r("code",[t._v("Set<Entry<Key,Value>>")]),t._v("集合 entrySet,")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("for(Entry<Key,Value> entry : entrySet){\n    entry.getKey //key值\n\tentry.getValue //key对应的value值\n}\n")])])]),r("h3",{attrs:{id:"comparable"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#comparable"}},[t._v("#")]),t._v(" Comparable")]),t._v(" "),r("blockquote",[r("p",[t._v("java.lang.Comparable接口，只有一个方法compareTo()\n所有排序的类都实现了该接口\npublic int compareTo(Object object);\n返回0，相等，\n返回正数，大于object，\n返回负数，小于object。")])]),t._v(" "),r("h3",{attrs:{id:"fail-fast机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#fail-fast机制"}},[t._v("#")]),t._v(" fail-fast机制")]),t._v(" "),r("p",[t._v("快速失败机制，Java集合中的错误检测机制，HashMap和ArrayList常见"),r("br"),t._v("\n如何避免：单线程中调用迭代器的remove方法，而不是集合自身的；用Java并发包中的类CopyOnWriteArrayList替代ArrayList，ConcurrentHashMap替代HashMap")]),t._v(" "),r("h3",{attrs:{id:"数组转集合"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数组转集合"}},[t._v("#")]),t._v(" 数组转集合")]),t._v(" "),r("ol",[r("li",[r("p",[t._v('List list = Arrays.asList("a","b","c");\n最快的方式，返回的只是个视图，不需要多余的内存来创建list以及复制操作，不能进行增加、删除操作，可以用set（）方法修改，原数组也会跟着修改')])]),t._v(" "),r("li",[r("p",[t._v("Java8的Stream")])])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("* 包装类型\nInteger[] myArray = {1,2,3};\nList list = Arrays.stream(myArray).collect(Collectors.toList());\n* 基本类型\nint[] myArray2 = {1,2,3};\nList list2 = Arrays.stream(myArray2).boxed().collect(Collectors.toList());\n")])])]),r("ol",{attrs:{start:"3"}},[r("li",[t._v("Guava包")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('List<String> il = ImmutableList.of("string1", "string2");  // from 可变参数\nList<String> i2 = ImmutableList.copyOf(aStringArray);      // from 数组\n\nList<String> l1 = Lists.newArrayList(anotherListOrCollection);    // from 其他集合\nList<String> l2 = Lists.newArrayList(aStringArray);               // from 数组\nList<String> l3 = Lists.newArrayList("or", "string", "elements"); // from 可变参数\n')])])]),r("ol",{attrs:{start:"4"}},[r("li",[t._v("使用 Apache Commons Collections")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("List<String> list = new ArrayList<String>();\nCollectionUtils.addAll(list, str);\n")])])]),r("ol",{attrs:{start:"5"}},[r("li",[t._v("使用 Java9 的 List.of()方法")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Integer[] array = {1, 2, 3};\nList<Integer> list = List.of(array);\nSystem.out.println(list); /* [1, 2, 3] */\n/* 不支持基本数据类型 */\n")])])]),r("h2",{attrs:{id:"io流"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#io流"}},[t._v("#")]),t._v(" IO流")]),t._v(" "),r("h3",{attrs:{id:"两种不同操作单元的流"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#两种不同操作单元的流"}},[t._v("#")]),t._v(" 两种不同操作单元的流")]),t._v(" "),r("ol",[r("li",[t._v("字符流：")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("单元是两个字节的Unicode字符，以字符或字符数组的形式读写数据，只能读写二进制文件\n* Reader->InputStreamReader , BufferedReader\n* Writer->OutputStreamWriter , BufferedWriter\n")])])]),r("ol",{attrs:{start:"2"}},[r("li",[t._v("字节流：\n单元是一个字节，你能读写各种类型的数据")])]),t._v(" "),r("ul",[r("li",[t._v("InputStream")]),t._v(" "),r("li",[t._v("OutputStream")])]),t._v(" "),r("blockquote",[r("p",[t._v("字节输入流转字符输入流，通过适配器模式，用InputStreamReader实现，该类构造器可以传入InputStream对象；同样的字节输出流转字符输出流用OutputStreamWriter。 图片、音频的传输最好用字节流，涉及到中文的最好用字符流")])]),t._v(" "),r("h3",{attrs:{id:"io线程模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#io线程模型"}},[t._v("#")]),t._v(" IO线程模型")]),t._v(" "),r("p",[r("img",{attrs:{src:"/同步与异步.jpg",alt:"同步与异步图"}}),t._v(" "),r("img",{attrs:{src:"/阻塞与非阻塞.jpg",alt:"阻塞与非阻塞图"}})]),t._v(" "),r("ul",[r("li",[t._v("同步：需要主动读取数据，读写数据过程中还会阻塞； 能够保证程序的可靠性。")]),t._v(" "),r("li",[t._v("异步：只需要IO操作完成的通知，并不主动读写数据，由操作系统内核完成数据的读写； 能够提高程序的性能。")]),t._v(" "),r("li",[t._v("阻塞：CUP停下来等待这个线程完成后才继续运行。")]),t._v(" "),r("li",[t._v("非阻塞：CUP去做其他工作，当这个完成后再继续完成后续的操作；会提高CPU的利用率，但会增加线程切换的消耗。")])]),t._v(" "),r("h3",{attrs:{id:"bio和nio"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bio和nio"}},[t._v("#")]),t._v(" BIO和NIO")]),t._v(" "),r("ol",[r("li",[t._v("BIO，同步阻塞IO")])]),t._v(" "),r("blockquote",[r("p",[t._v("服务器实现模式是一个连接对应一个线程，当客户端有连接请求时服务器就会启动一个线程进行处理，如果连接不做任何事就会造成不必要的开销，可用线程池优化。\n必须使用多线程是因为BIO通信模型涉及的三个主要函数socket.accept()、socket.read()、socket.write()都是同步阻塞的。")])]),t._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[t._v("NIO，同步非阻塞IO")])]),t._v(" "),r("blockquote",[r("p",[t._v("服务器实现模式是一个请求对应一个线程，客户端发送的连接请求都会注册到多路复用器上，多路复用器Selector轮询到连接有IO请求时，才启动一个线程进行处理。\n基于通道的IO操作，在java.nio包中，提供了接口Channel，抽象类Selector和Buffer。 SocketChannel和ServerSocketChannel对应BIO的Socket和ServerSocket，这两种套接字通道都支持阻塞和非阻塞")])]),t._v(" "),r("blockquote",[r("p",[t._v("Buffer(缓冲区)，IO是面向流的，NIO是面向缓冲区的，NIO中任何写入、读出操作都是直接通过Buffer操作的，常用\n"),r("code",[t._v("public abstract class ByteBuffer extends Buffer implements Comparable<ByteBuffer>")]),t._v("\nChannel(通道)，通过Channel进行读写，是双向的，无论读写只能和Buffer交互\nSelector(选择器)，负责监听IO事件，使用单个线程处理多个通道。线程--\x3eSelector--\x3en个Channel")])]),t._v(" "),r("p",[t._v("虽然多路复用也是阻塞的，但是阻塞在Selector上，而不是阻塞在真正的IO系统调用上")]),t._v(" "),r("h3",{attrs:{id:"reactor模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reactor模式"}},[t._v("#")]),t._v(" reactor模式")]),t._v(" "),r("p",[t._v("反应器模式（事件驱动模型），主要有两部分组成BOSS和WORK，BOSS就像老板，拉活、谈项目，然后下发到worker去处理。\n处理并发请求，如果有内容进来会自动通知我们，不必开启多个线程死等了。")]),t._v(" "),r("h3",{attrs:{id:"io最佳实践"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#io最佳实践"}},[t._v("#")]),t._v(" IO最佳实践")]),t._v(" "),r("ol",[r("li",[t._v("使用有缓冲的IO，不要单独读取字节或字符")]),t._v(" "),r("li",[t._v("尽量不用BIO")]),t._v(" "),r("li",[t._v("在finally中关闭流")]),t._v(" "),r("li",[t._v("使用内存映射文件比IO读写速度更快")])]),t._v(" "),r("h2",{attrs:{id:"jdbc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jdbc"}},[t._v("#")]),t._v(" JDBC")]),t._v(" "),r("h3",{attrs:{id:"jdbc最佳实践"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jdbc最佳实践"}},[t._v("#")]),t._v(" jdbc最佳实践")]),t._v(" "),r("ol",[r("li",[t._v("优先使用批量操作来插入和更新数据")]),t._v(" "),r("li",[t._v("使用PreparedStatement来避免SQL注入")]),t._v(" "),r("li",[t._v("通过列名来获取结果集")]),t._v(" "),r("li",[t._v("使用数据连接池")])]),t._v(" "),r("h3",{attrs:{id:"注解原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#注解原理"}},[t._v("#")]),t._v(" 注解原理")]),t._v(" "),r("p",[t._v("注解本质是一个继承了Annotation的特殊接口，其具体实现类是Java运行时生成的动态代理类。我们通过反射获取注解时，返回的是Java运行时生成的动态代理对象，\n通过代理对象调用自定义注解的方法，会最终调用AnnotationInvocationHandler的invoke方法。该方法会从memberValues这个Map中索引出对应的值。而memberValues的来源是Java常量池。")]),t._v(" "),r("h2",{attrs:{id:"mybatis"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mybatis"}},[t._v("#")]),t._v(" Mybatis")]),t._v(" "),r("h3",{attrs:{id:"和-的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#和-的区别"}},[t._v("#")]),t._v(" ${}和#{}的区别")]),t._v(" "),r("p",[t._v("${}是字符串替换；#{}是预编译处理\nMybatis在处理${}时，就是把${}替换成变量的值；在处理#{}时，就是将SQL中的#{}替换成？并调用PreparedStatement的set方法来赋值\n使用#{}可以有效防止SQL注入，提高系统安全性"),r("br"),t._v("\n尽量使用#{}，表名或者在order by后传入参数时必须用${}")]),t._v(" "),r("h3",{attrs:{id:"当实体类的属性名和表中的字段名不一样-怎么办"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#当实体类的属性名和表中的字段名不一样-怎么办"}},[t._v("#")]),t._v(" 当实体类的属性名和表中的字段名不一样，怎么办？")]),t._v(" "),r("ol",[r("li",[t._v("在查询的SQL语句中定义字段的别名，使其和实体类的属性名一致")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("<select id=”selectorder” parametertype=”int” resultetype=”me.gacl.domain.order”>\n       select order_id id, order_no orderno ,order_price price form orders where order_id=#{id};\n</select>\n\n")])])]),r("ol",{attrs:{start:"2"}},[r("li",[t._v("使用"),r("code",[t._v("<resultMap>")]),t._v("标签来映射字段名和实体类属性名一一对应")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('<select id="getOrder" parameterType="int" resultMap="orderresultmap">\n        select * from orders where order_id=#{id}\n</select>\n \n<resultMap type=”me.gacl.domain.order” id=”orderresultmap”>\n    <!–用id属性来映射主键字段–>\n    <id property=”id” column=”order_id”>\n \n    <!–用result属性来映射非主键字段，property为实体类属性名，column为数据表中的属性–>\n    <result property = “orderno” column =”order_no”/>\n    <result property=”price” column=”order_price” />\n</reslutMap>\n')])])]),r("ol",{attrs:{start:"3"}},[r("li",[t._v("在Mybatis全局配置文件中开启驼峰命名，注意：前提是数据库中的字段是按驼峰命名规则的两个单词之间加“_”命名的")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('<settings>\n        \x3c!-- 开启驼峰命名规则，可以将数据库中的下划线映射为驼峰命名\n        例如：user_name可以映射为userName --\x3e\n        <setting name="mapUnderscoreToCamelCase" value="true" />\n</settings>\n')])])]),r("h3",{attrs:{id:"通常会有一个dao接口与一个xml映射文件相对应-dao接口的工作原理是什么-其中的方法能重载吗"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#通常会有一个dao接口与一个xml映射文件相对应-dao接口的工作原理是什么-其中的方法能重载吗"}},[t._v("#")]),t._v(" 通常会有一个dao接口与一个xml映射文件相对应，dao接口的工作原理是什么，其中的方法能重载吗？")]),t._v(" "),r("p",[t._v("dao接口即Mapper接口。\n接口的全限名就是映射文件中的namespace的值；\n接口的方法名就是文件中Mapper的statement的id值；\n接口方法内的参数就是传递给sql语句的参数")]),t._v(" "),r("p",[t._v("Mapper接口没有实现类，当调用接口中的方法时，接口全限名+方法名拼接字符串作为key值，可唯一定义一个MapperStatement。（Mybatis中每个<select>、<insert>、<update>、<delete>标签都会被解析为一个MapperStatement对象）")]),t._v(" "),r("p",[t._v("Mapper接口里的方法不能重载，因为Mybatis使用的是全限名+方法名的保存和寻找策略。")]),t._v(" "),r("p",[t._v("工作原理：Mybatis运行时会使用JDK动态代理为Mapper接口生成代理对象，代理对象会拦截接口的方法，然后执行MapperStatement所代表的sql，然后将sql执行结果返回。")]),t._v(" "),r("h3",{attrs:{id:"mybatis动态sql"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mybatis动态sql"}},[t._v("#")]),t._v(" Mybatis动态sql")]),t._v(" "),r("p",[t._v("以标签的的形式编写sql语句，并动态拼接sql语句。有9中标签：")]),t._v(" "),r("ol",[r("li",[t._v("trim")]),t._v(" "),r("li",[t._v("where")]),t._v(" "),r("li",[t._v("set")]),t._v(" "),r("li",[t._v("foreach")]),t._v(" "),r("li",[t._v("if")]),t._v(" "),r("li",[t._v("choose")]),t._v(" "),r("li",[t._v("when")]),t._v(" "),r("li",[t._v("otherwise")]),t._v(" "),r("li",[t._v("bind")])]),t._v(" "),r("h3",{attrs:{id:"mybatis延迟加载"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mybatis延迟加载"}},[t._v("#")]),t._v(" Mybatis延迟加载")]),t._v(" "),r("p",[t._v("Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指一对一，collection指一对多查询；\n可以配置是否启用延迟加载：lazyLoadingEnabled=true/false 默认为false\n原理是动态代理形式实现")]),t._v(" "),r("h2",{attrs:{id:"spring-boot"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot"}},[t._v("#")]),t._v(" Spring Boot")]),t._v(" "),r("h2",{attrs:{id:"数据库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据库"}},[t._v("#")]),t._v(" 数据库")]),t._v(" "),r("h3",{attrs:{id:"关系型数据库和非关系型数据库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关系型数据库和非关系型数据库"}},[t._v("#")]),t._v(" 关系型数据库和非关系型数据库")]),t._v(" "),r("p",[t._v("关系型数据库：")]),t._v(" "),r("ol",[r("li",[t._v("支持事务的一致性")]),t._v(" "),r("li",[t._v("支持SQL，可以进行复杂的数据查询")])]),t._v(" "),r("p",[t._v("非关系型数据库：")]),t._v(" "),r("ol",[r("li",[t._v("基于键值对，数据没有耦合性，容易扩展")]),t._v(" "),r("li",[t._v("无需SQL层的解析，读写性能很高")]),t._v(" "),r("li",[t._v("可以键值对形式、文档形式、图片形式存储")]),t._v(" "),r("li",[t._v("可用于高并发读写，海量数据的存储和访问，高扩展性。")])]),t._v(" "),r("h3",{attrs:{id:"select语句执行顺序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#select语句执行顺序"}},[t._v("#")]),t._v(" select语句执行顺序")]),t._v(" "),r("ol",[r("li",[t._v("from")]),t._v(" "),r("li",[t._v("where")]),t._v(" "),r("li",[t._v("group by")]),t._v(" "),r("li",[t._v("聚合函数")]),t._v(" "),r("li",[t._v("having")]),t._v(" "),r("li",[t._v("计算所有的表达式")]),t._v(" "),r("li",[t._v("select字段")]),t._v(" "),r("li",[t._v("order by对结果集进行排序")])]),t._v(" "),r("h3",{attrs:{id:"为什么用自增列作为主键"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么用自增列作为主键"}},[t._v("#")]),t._v(" 为什么用自增列作为主键？")]),t._v(" "),r("p",[t._v("如果使用非自增主键，MySQL每次插入新纪录时都会为找到合适的位置而移动其他数据，增加了开销，频繁的移动和分页操作会造成大量的内存碎片，得到不够紧凑的索引结构，不得不用optimize table来重建表来优化和重建页面")]),t._v(" "),r("h3",{attrs:{id:"optimeze-table"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#optimeze-table"}},[t._v("#")]),t._v(" OPTIMEZE TABLE")]),t._v(" "),r("p",[t._v("当删除数据时，已删除的数据的存储空间和索引位会空在那里等待新的数据弥补空缺，没有数据及时填补空缺会造成资源的浪费，optimeze可以重建表并优化填充页面")]),t._v(" "),r("h3",{attrs:{id:"存储过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#存储过程"}},[t._v("#")]),t._v(" 存储过程")]),t._v(" "),r("p",[t._v("是一个预编译的sql语句，允许模块化，一次创建多次调用；如果某次操作需要执行多次SQL语句，使用存储过程速度更快。")]),t._v(" "),r("h3",{attrs:{id:"触发器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#触发器"}},[t._v("#")]),t._v(" 触发器")]),t._v(" "),r("p",[t._v("是一种特殊的存储过程，用于保证数据的完整性和一致性。")]),t._v(" "),r("h3",{attrs:{id:"视图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#视图"}},[t._v("#")]),t._v(" 视图")]),t._v(" "),r("p",[t._v("视图是一种虚拟表，通常是一个表或者多个表的行或列的子集，可以进行增、改、查操作，其修改会影响基本表，相比于多表查询，使用视图更容易。")]),t._v(" "),r("h3",{attrs:{id:"游标"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#游标"}},[t._v("#")]),t._v(" 游标")]),t._v(" "),r("p",[t._v("是对查询出来的结果集作为一个单元进行处理，游标可以定位在该单元的特定行，从结果集的当前行检索一行或多行，对当前行进行修改处理。一般是需要逐条处理数据时用游标。")]),t._v(" "),r("h3",{attrs:{id:"drop、truncate、delete区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#drop、truncate、delete区别"}},[t._v("#")]),t._v(" drop、truncate、delete区别")]),t._v(" "),r("ul",[r("li",[t._v("drop是删除表")]),t._v(" "),r("li",[t._v("truncate是删除表中数据，下车添加是自增id又从1开始")]),t._v(" "),r("li",[t._v("delete是删除表中数据，可以加where条件")])]),t._v(" "),r("h3",{attrs:{id:"临时表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#临时表"}},[t._v("#")]),t._v(" 临时表")]),t._v(" "),r("p",[t._v("临时表只对当前连接可见，当关闭连接时，所有临时表会被删除，释放内存；临时表和普通表的操作一样，只不过多个关键字TEMPORARY")]),t._v(" "),r("h3",{attrs:{id:"数据表的连接方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据表的连接方式"}},[t._v("#")]),t._v(" 数据表的连接方式")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("内连接(inner join)：两张表都有的才能显示出来。")])]),t._v(" "),r("li",[r("p",[t._v("左连接(left join)：左边的表数据都显示出来，右边的表只显示共同的部分，没有的补空。")])]),t._v(" "),r("li",[r("p",[t._v("右连接(right join)：右边的表数据都显示出了，左边的表只显示共同的部分，没有的补空。")])]),t._v(" "),r("li",[r("p",[t._v("外/全 连接(outer join)：两张表数据都显示出来，并去除重复的那部分，没有的补空；MySQL不支持全连接，可用 左连接+右连接+去重 实现。")])]),t._v(" "),r("li",[r("p",[t._v("左连接不包含内连接：只查询左边有的数据，共同的查不出来。")])]),t._v(" "),r("li",[r("p",[t._v("右连接不包含内连接：只查询右边有的数据，共同的查不出来。")])]),t._v(" "),r("li",[r("p",[t._v("外/全 连接不包含内连接：只查询两边不同的数据。\n以上7中连接如下图所示。\n"),r("img",{attrs:{src:"/sqlJoin.png",alt:"数据库表的连接"}})])]),t._v(" "),r("li",[r("p",[t._v("自然连接(natural join):两张表中必须有相同的属性列，无需添加连接条件")])]),t._v(" "),r("li",[r("p",[t._v("笛卡尔积连接：MySQL默认的连接方式，一个表里的记录要分别和另一个表里的记录匹配成一条记录。左表3条记录，右表4条数据，则查询的结果有3*4条数据")])])]),t._v(" "),r("h3",{attrs:{id:"char和varchar"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#char和varchar"}},[t._v("#")]),t._v(" char和varchar")]),t._v(" "),r("ol",[r("li",[t._v("char长度不可变，会有内存浪费；varchar长度可变")]),t._v(" "),r("li",[t._v("char速度更快")]),t._v(" "),r("li",[t._v("char对英文字符占一个字节，中文字符占两个字节；\nvarchar对英文和中文都占两个字节")])]),t._v(" "),r("h3",{attrs:{id:"索引"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[t._v("#")]),t._v(" 索引")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("索引文件以B树的格式保存")])]),t._v(" "),r("li",[r("p",[t._v("索引可以加快数据的检索速度")])]),t._v(" "),r("li",[r("p",[t._v("可以加速表与表之间的连接")])]),t._v(" "),r("li",[r("p",[t._v("在唯一、不为空、经常被查询的字段适合建索引")])]),t._v(" "),r("li",[r("p",[t._v("索引可以提高select的效率，但同时也降低了insert和update的效率，因为insert或update时可能会重建索引")])])]),t._v(" "),r("h3",{attrs:{id:"聚集索引、非聚集索引"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#聚集索引、非聚集索引"}},[t._v("#")]),t._v(" 聚集索引、非聚集索引")]),t._v(" "),r("ul",[r("li",[t._v("聚集索引：表记录的排列顺序和索引的排列顺序一致，查询效率快")]),t._v(" "),r("li",[t._v("非聚集索引：排序不一致")])]),t._v(" "),r("h3",{attrs:{id:"数据库的隔离级别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据库的隔离级别"}},[t._v("#")]),t._v(" 数据库的隔离级别")]),t._v(" "),r("ol",[r("li",[t._v("Read Uncommitted 读未提交，一个事务可以读取到另一个未提交的事务。可能会出现脏读")]),t._v(" "),r("li",[t._v("Read Commited 读已提交（SQL Server 、Oracle默认），一个事务要等另一个事务提交后才能读取数据。可能会有不可重复读问题，即一个事务中出现了其他事务对该事物的update操作，导致两次相同的查询返回不同的结果。")]),t._v(" "),r("li",[t._v("Repeatable read 重复读（MySQL默认），开启事务后不再允许修改（update）操作。可能会出现幻读，insert问题，一个事务按相同的查询条件查询两次，结果不一样，中间被insert了新数据")]),t._v(" "),r("li",[t._v("Serializable 序列化/串行化，事务的最高隔离级别，可以有效避免脏读、不可重复读、幻读，但效率低下，消耗数据库性能")])]),t._v(" "),r("h3",{attrs:{id:"存储引擎"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#存储引擎"}},[t._v("#")]),t._v(" 存储引擎")]),t._v(" "),r("ol",[r("li",[t._v("MyISAM：易于管理，能够快速读取，适用于频繁查询的应用，适合小数据、小并发。")]),t._v(" "),r("li",[t._v("InnoDB: 支持事务、外键等特性、数据行锁定。空间占用大，不支持全文索引，适合查询和更新比较多的应用、适合大数据、大并发。也是MySQL默认的存储引擎")])]),t._v(" "),r("h3",{attrs:{id:"高并发下-如何做到安全的修改一行数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#高并发下-如何做到安全的修改一行数据"}},[t._v("#")]),t._v(" 高并发下，如何做到安全的修改一行数据？")]),t._v(" "),r("ol",[r("li",[t._v("使用悲观锁")]),t._v(" "),r("li",[t._v("写一个队列")])]),t._v(" "),r("h3",{attrs:{id:"sql优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#sql优化"}},[t._v("#")]),t._v(" SQL优化")]),t._v(" "),r("ol",[r("li",[t._v("当只要一行数据时，用limit 1；//这样找到一条数据后就会停止搜索了")]),t._v(" "),r("li",[t._v("用not exists 代替not in；//not exists用到了建立的索引的作用，not in会每条记录进行比较")]),t._v(" "),r("li",[t._v("尽量不采用不利于索引的操作，如not in，in ，is null，is not null，<>等。")]),t._v(" "),r("li",[t._v("避免在where语句上进行null值判断")]),t._v(" "),r("li",[t._v("避免select * from table，用具体的字段表示")]),t._v(" "),r("li",[t._v("limit的基数比较大是用between and代替")]),t._v(" "),r("li",[t._v("某个字段总要拿来搜索就为其建立索引：alert table tableName add index (字段名)")])]),t._v(" "),r("h2",{attrs:{id:"redis"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[t._v("#")]),t._v(" Redis")]),t._v(" "),r("h3",{attrs:{id:"redis是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis是什么"}},[t._v("#")]),t._v(" redis是什么？")]),t._v(" "),r("p",[t._v("是开源的由C语言编写，支持网络、可基于内存也可持久化的日志型、key-value数据库。")]),t._v(" "),r("h3",{attrs:{id:"redis有哪些使用场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis有哪些使用场景"}},[t._v("#")]),t._v(" redis有哪些使用场景？")]),t._v(" "),r("ul",[r("li",[t._v("数据高并发的读写")]),t._v(" "),r("li",[t._v("海量数据的读写")]),t._v(" "),r("li",[t._v("对扩展性要求较高的数据")])]),t._v(" "),r("h3",{attrs:{id:"redis有哪些功能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis有哪些功能"}},[t._v("#")]),t._v(" redis有哪些功能？")]),t._v(" "),r("ol",[r("li",[t._v("数据持久化")]),t._v(" "),r("li",[t._v("数据缓存")]),t._v(" "),r("li",[t._v("分布式锁")]),t._v(" "),r("li",[t._v("支持事务")]),t._v(" "),r("li",[t._v("支持消息队列")])]),t._v(" "),r("h3",{attrs:{id:"redis支持的数据类型有哪些"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis支持的数据类型有哪些"}},[t._v("#")]),t._v(" redis支持的数据类型有哪些？")]),t._v(" "),r("ol",[r("li",[t._v("String")]),t._v(" "),r("li",[t._v("List")]),t._v(" "),r("li",[t._v("hash")]),t._v(" "),r("li",[t._v("set")]),t._v(" "),r("li",[t._v("zset")])]),t._v(" "),r("h3",{attrs:{id:"redis为什么是单线程的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis为什么是单线程的"}},[t._v("#")]),t._v(" redis为什么是单线程的？")]),t._v(" "),r("p",[t._v("因为redis是基于内存的操作，性能比较高，可以轻松处理每秒几十万的请求，redis要注意的是机器内存和网络宽带，而不必在意CPU，况且多线程会带来其他不必要的麻烦。")]),t._v(" "),r("h3",{attrs:{id:"什么是缓存穿透"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是缓存穿透"}},[t._v("#")]),t._v(" 什么是缓存穿透？")]),t._v(" "),r("p",[t._v("查询一个不存在的数据时，由于缓存中没有就会从数据库中查询，查不到的数据不会写入缓存，导致每次请求都要从数据库中查询，造成缓存穿透。")]),t._v(" "),r("p",[t._v("解决方案：把查询出的空结果放到缓存中，但它的过期时间很短，最长不超过5分钟")]),t._v(" "),r("h2",{attrs:{id:"active-mq"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#active-mq"}},[t._v("#")]),t._v(" Active MQ")]),t._v(" "),r("h3",{attrs:{id:"端口号8161和61616"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#端口号8161和61616"}},[t._v("#")]),t._v(" 端口号8161和61616")]),t._v(" "),r("p",[t._v("默认配置下会启动这两个端口，8161是自带的管理后台的端口，61616是供Java用的服务端口")]),t._v(" "),r("h3",{attrs:{id:"activemq的流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#activemq的流程"}},[t._v("#")]),t._v(" ActiveMQ的流程")]),t._v(" "),r("ol",[r("li",[t._v("传入IP和端口号创建一个连接工厂对象")]),t._v(" "),r("li",[t._v("使用连接工厂创建一个连接")]),t._v(" "),r("li",[t._v("开启连接")]),t._v(" "),r("li",[t._v("使用连接创建会话对象")]),t._v(" "),r("li",[t._v("使用会话对象创建目标对象（包括一对一queue或者一对多topic），并通过目标对象创建生产者对象")]),t._v(" "),r("li",[t._v("使用会话对象创建消息对象")]),t._v(" "),r("li",[t._v("使用生产者对象发送消息")]),t._v(" "),r("li",[t._v("关闭资源（连接对象、会话对象、生产者对象）")])]),t._v(" "),r("h2",{attrs:{id:"shiro"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#shiro"}},[t._v("#")]),t._v(" Shiro")]),t._v(" "),r("h3",{attrs:{id:"各个组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#各个组件"}},[t._v("#")]),t._v(" 各个组件")]),t._v(" "),r("ul",[r("li",[t._v('Subject：代表"当前用户"，所有的Subject都绑定到SecurityManager，与Subject所有的交互都交由SecurityManager，SecurityManager才是真正的执行者')]),t._v(" "),r("li",[t._v("SecurityManager：安全管理器，相当于SpringMVC的DispatcherServlet，是Shiro的核心部分，负责认证、授权、会话、缓存的管理")]),t._v(" "),r("li",[t._v("Realm域：域，充当了Shiro与数据间的连接器DAO")]),t._v(" "),r("li",[t._v("SessionManager：会话管理，管理会话生命周期的组件")])]),t._v(" "),r("h3",{attrs:{id:"shiro的运行流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#shiro的运行流程"}},[t._v("#")]),t._v(" Shiro的运行流程")]),t._v(" "),r("ol",[r("li",[t._v("程序代码调用Subject的API")]),t._v(" "),r("li",[t._v("所有的Subject都绑定到SecurityManager，与Subject的交互都交由SecurityManager完成")]),t._v(" "),r("li",[t._v("SecurityManager从Realm域中获取安全数据（用户、角色、权限）进行操作。")])]),t._v(" "),r("h3",{attrs:{id:"shiro的四种权限控制方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#shiro的四种权限控制方式"}},[t._v("#")]),t._v(" Shiro的四种权限控制方式")]),t._v(" "),r("ol",[r("li",[t._v("url级别权限控制")]),t._v(" "),r("li",[t._v("方法注解权限控制")]),t._v(" "),r("li",[t._v("页面标签权限控制")]),t._v(" "),r("li",[t._v("代码级别权限控制")])]),t._v(" "),r("h2",{attrs:{id:"git"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),r("p",[t._v("分布式版本控制系统，由Linus用C语言编写，本地仓库包含历史库和代码库")]),t._v(" "),r("ul",[r("li",[t._v("Workspace：工作区")]),t._v(" "),r("li",[t._v("Index/Stage：暂存区")]),t._v(" "),r("li",[t._v("Repository：本地仓库区")]),t._v(" "),r("li",[t._v("Remote：远程仓库")])]),t._v(" "),r("h3",{attrs:{id:"从github上克隆一个仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#从github上克隆一个仓库"}},[t._v("#")]),t._v(" 从github上克隆一个仓库")]),t._v(" "),r("p",[t._v("$ git clone git@github.com:VAQYA/orgingit.git")]),t._v(" "),r("h3",{attrs:{id:"常用指令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常用指令"}},[t._v("#")]),t._v(" 常用指令")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('git fetch 从远程获取最新版本到本地，不会merge\ngit merge 合并某分支到本分支\ngit pull 相当于前两个的功能\n\n\n文件操作：\npwd  显示当前目录\nmkdir 创建新文件夹\ncd  转换的此文件夹\nls -ah  展示当前文件(夹)类别，包括隐藏文件\ngit init  把当前目录变为Git可以管理的仓库\nrm file.txt  删除文件file.txt\n\n\n把修改后的文件提交到仓库：\n1. git add file.txt  把对文件的修改放到暂存区\n2. git commit -m "说明"  把暂存区的修改一次性全部提交到分支\n\ngit status 查看仓库的修改状态\ngit diff 查看修改情况，即工作区和暂存区的区别\ngit log 查看提交历史记录\ngit log-pretty=oneline \n\n\n版本回退：\ngit reset --hard HEAD^  回退到上一个版本\ngit reset --hard HEAD~100  回退到前100个版本\ngit reset --hard HEAD<版本号前几位>  回退到此版本\ngit relog  查看回退记录的每一次命令，包括删除又恢复的历史记录\n\n撤销修改：\n场景一：改错了file文件，则丢掉工作区对file文件的修改  git checkout --file.txt  \n场景二：改错了file文件并提交到了暂存区，则 git reset HEAD file 就回到了场景一\n场景三：改错了file文件并添加到了暂存区，还提交到了版本库  参照版本回退\n\n\n分支：类似于平行宇宙，使用分支更安全，建议使用\ngit branch  查看分支\ngit branch <bName>  创建分支\ngit checkout <bName>  切换分支\ngit checkout -b <bName>  创建+切换分支\ngit merge <bName>  合并某分支到当前分支\ngit branch -d <bName>  删除某分支\ngit branch -D <bName>  强制删除某分支，即使该分支有还没合并到本分支的内容\ngit log -graph  查看分支合并图\n\n\n\n\n标签：指向一次commit的id，通常给一个开发分支做标记\ngit tag  查看所有标签\ngit tag v1.0  在当前分支上打标签\ngit tag -a v1.1 -m "说明文字"  在当前分支上打带有说明文字的标签\ngit log --pretty=oneline tagA..tagB  查看某两次之间的commit\ngit log --pretty=oneline tagA..  查看某个标签之后的commit \ngit push origin <tagName>  推送一个本地标签到远程库\ngit push origin --tags  推送所有为推送的标签到远程库\ngit tag -d <tagName>  删除标签\n')])])]),r("h3",{attrs:{id:""}},[r("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),r("h2",{attrs:{id:"svn"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#svn"}},[t._v("#")]),t._v(" SVN")]),t._v(" "),r("p",[t._v("Subversion，集中式版本控制系统\n从图书馆借本书，在家里修改，修改后还给图书馆")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("默认端口号3690\n\nrepository 存放文件和对文件的修改历史\ncheckout 提取到私人的工作空间，再进行内容的修改\ncommit 提交操作，是原子操作，要么成功，要么失败回滚\nupdate 更新版本库\n\nstatus 列出工作副本所做出的变动列表\ndiff 查看这些变动的详细信息\nrevert 销毁待变更列表，并将工作状态恢复到初始状态\nmerge 自动处理可以全合并的东西\nresolve 找出冲突，并告诉版本库如何处理冲突\n\n\n")])])]),r("p",[t._v("###servlet是单例吗？\nservlet不是单例，只是容器只实例化它一次，表现出单例的效果。ServletContext可以进行多线程读写操作，所以不是线程安全的，ServletContext中药尽量少保存会被修改的数据")]),t._v(" "),r("h3",{attrs:{id:"jvm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[t._v("#")]),t._v(" JVM")]),t._v(" "),r("p",[t._v("JDK1.8中用元数据空间代替了JDK1.7的永久代（调优比较困难），Metaspace所占用的内存空间不是虚拟机内部的，而是本地内存空间。")]),t._v(" "),r("h3",{attrs:{id:"垃圾回收"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),r("h3",{attrs:{id:"tomcat的结构-以及其类加载流程-线程模型-如何调优"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tomcat的结构-以及其类加载流程-线程模型-如何调优"}},[t._v("#")]),t._v(" Tomcat的结构，以及其类加载流程，线程模型，如何调优")]),t._v(" "),r("p",[t._v("核心组件：")]),t._v(" "),r("ol",[r("li",[t._v("Connector连接器，负责接收请求并把请求交给Container")]),t._v(" "),r("li",[t._v("Container，一个容器，主要装具有处理请求的组件\n（service是对外提供服务的组件，将他们两个关联起来处理请求")])]),t._v(" "),r("p",[t._v("类加载器流程：")]),t._v(" "),r("ol",[r("li",[t._v("Bootstrap引导类加载器，加载JVM启动所需要的类，以及标准扩展类")]),t._v(" "),r("li",[t._v("System系统类加载器")]),t._v(" "),r("li",[t._v("Webapp应用类加载器")]),t._v(" "),r("li",[t._v("Common通用类加载器")])]),t._v(" "),r("p",[t._v("线程模型：\n支持BIO、NIO、APR、AIO")]),t._v(" "),r("h2",{attrs:{id:"乱乱乱了步伐"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#乱乱乱了步伐"}},[t._v("#")]),t._v(" 乱乱乱了步伐")]),t._v(" "),r("p",[t._v("jdk带的反编译工具javap")]),t._v(" "),r("h3",{attrs:{id:"uuid-唯一通用识别码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#uuid-唯一通用识别码"}},[t._v("#")]),t._v(" UUID:唯一通用识别码")]),t._v(" "),r("p",[t._v("格式：xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxx(8-4-4-12)\nString uuid = UUID.randomUUID( ).toString( ).subString( 0 , 5 );")]),t._v(" "),r("h3",{attrs:{id:"java-util-properties-extends-hashtable-object-object"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java-util-properties-extends-hashtable-object-object"}},[t._v("#")]),t._v(" java.util.Properties extends Hashtable<Object,Object>")]),t._v(" "),r("p",[t._v("表示属性列表，其中键和值都是String")]),t._v(" "),r("p",[t._v("常用方法：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("String getProperty(String key); //通过键获取值，相当于map的get(key)；\nvoid load(InputStream inStream); //从输入字节流读取属性列表；\nvoid load(Reader reader); //从输入字符流读取属性列表；\nvoid loadFromXML(InputStream inStream); //将xml文件的输入流加载到属性列表；\n")])])]),r("p",[t._v("读取配置文件的方式：")]),t._v(" "),r("ol",[r("li",[t._v("基于ClassLoader，只能读取classpath下的配置文件")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v(' Properties properties = new Properties();\n\n    // 使用ClassLoader加载properties配置文件生成对应的输入流\n    InputStream in = PropertiesMain.class.getClassLoader().getResourceAsStream("config.properties");\n    // 使用properties对象加载输入流\n    properties.load(in);\n    //获取key对应的value值\n    properties.getProperty(String key);\n')])])]),r("ol",{attrs:{start:"2"}},[r("li",[t._v("基于BufferInputStream，可以读取任意路径下的配置文件")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v(' Properties properties = new Properties();\n InputStream in = new BufferInputStream(new FileInputStream(new File("E:/config.properties"))));\n properties.load(in);\n')])])]),r("ol",{attrs:{start:"3"}},[r("li",[t._v("基于java.util.ResourceBundle"),r("br"),t._v("\n分两种方式")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v(' Properties properties = new Properties();\n ResourceBundle resource1 = ResourceBundle.getBundle("com/test/config/config"); //通过静态方法getBundle，获取src下的com.test.config包下的config.properties文件\n ResourceBundle resource2 = new PropertyResourceBundle(inStream); //通过输入流获取\n String value = resource.getString(key);\n')])])]),r("h3",{attrs:{id:"jdk空接口的作用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jdk空接口的作用"}},[t._v("#")]),t._v(" jdk空接口的作用")]),t._v(" "),r("p",[t._v("空接口仅做标记使用，无其他含义\n如：cloneable接口、Serializable")]),t._v(" "),r("p",[t._v("深克隆(Serializable序列化实现)和浅克隆(clone方法)：在对象的属性有引用对象或数组时，深克隆会在堆内存中重新开辟内存，而浅克隆只是复制一个引用")]),t._v(" "),r("h3",{attrs:{id:"科学计数法转换为普通计数法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#科学计数法转换为普通计数法"}},[t._v("#")]),t._v(" 科学计数法转换为普通计数法")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('String s1 = "12345E-10";\nBigDecimal bd = new BigDecimal(s1);\nString s2 = bd.toPlainString();\n')])])]),r("h3",{attrs:{id:"复制对象属性-忽略null字段"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#复制对象属性-忽略null字段"}},[t._v("#")]),t._v(" 复制对象属性，忽略null字段")]),t._v(" "),r("p",[t._v("import cn.hutool.core.bean.BeanUtil;")]),t._v(" "),r("p",[t._v("BeanUtil.copyProperties(source, target, CopyOptions.create().setIgnoreNullValue(true).setIgnoreError(true));")])])}),[],!1,null,null,null);a.default=s.exports}}]);