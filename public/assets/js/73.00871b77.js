(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{687:function(a,s,t){"use strict";t.r(s);var r=t(5),e=Object(r.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"什么是反射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是反射"}},[a._v("#")]),a._v(" 什么是反射？")]),a._v(" "),t("p",[a._v("在运行中，对于任何一个类，能够知道它的所有属性和方法；对于任何一个对象，能够调用它的属性和方法。\n这样能够根据字节码文件获取类信息、字段信息、方法信息等内容，创建实例调用方法的技术。\n将字节码中的方法、变量、构造函数等映射出相应的Method、Filed、Construct等类，这些类提供了丰富的方法供我们使用\nJVM在"),t("strong",[a._v("运行")]),a._v("时才动态加载类或调用方法、访问属性，不需要在事先(编译期)知道运行的对象是什么类型")]),a._v(" "),t("h3",{attrs:{id:"提供的功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提供的功能"}},[a._v("#")]),a._v(" 提供的功能")]),a._v(" "),t("ol",[t("li",[a._v("判断实例对象所属的类")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("类对象.isInstance(实例对象)\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("判断类所具有的成员变量和方法")]),a._v(" "),t("li",[a._v("构造一个类的对象")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('1. 对象的getClass()\n2. 类名.class\n3. Class.forName("类的路径");\n')])])]),t("ol",{attrs:{start:"4"}},[t("li",[a._v("调用对象的方法")])]),a._v(" "),t("h3",{attrs:{id:"创建类的实例化对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建类的实例化对象"}},[a._v("#")]),a._v(" 创建类的实例化对象")]),a._v(" "),t("p",[a._v("类对象.newInstance();")]),a._v(" "),t("h3",{attrs:{id:"反射的基石"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射的基石"}},[a._v("#")]),a._v(" 反射的基石")]),a._v(" "),t("p",[a._v("字节码文件对象，即Class类的对象")]),a._v(" "),t("h3",{attrs:{id:"字节码文件对象的三种获取方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字节码文件对象的三种获取方式"}},[a._v("#")]),a._v(" 字节码文件对象的三种获取方式")]),a._v(" "),t("h3",{attrs:{id:"mybatis如何将sql执行结果封装为目标对象并返回的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis如何将sql执行结果封装为目标对象并返回的"}},[a._v("#")]),a._v(" mybatis如何将SQL执行结果封装为目标对象并返回的？")]),a._v(" "),t("ol",[t("li",[t("code",[a._v("<resultMap>")]),a._v("标签")]),a._v(" "),t("li",[a._v("SQL语句中起别名\nmybatis通过反射创建对象，通过反射给对象的属性逐一赋值并返回")])]),a._v(" "),t("h3",{attrs:{id:"哪里用到反射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#哪里用到反射"}},[a._v("#")]),a._v(" 哪里用到反射？")]),a._v(" "),t("ol",[t("li",[a._v("框架用的最多的就是反射，如Spring注入属性")]),a._v(" "),t("li",[a._v("加载驱动 （jdbc）")]),a._v(" "),t("li",[a._v("Web服务器中利用反射调用了Sevlet的服务方法")]),a._v(" "),t("li",[a._v("获取配置文件")]),a._v(" "),t("li",[a._v("IDEA等开发工具利用反射动态刨析对象的类型与结构，动态提示对象的属性和方法")])]),a._v(" "),t("p",[a._v("Spring的IOC实现原理就是工厂模式+反射机制\nAOP的动态代理")]),a._v(" "),t("h3",{attrs:{id:"优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[a._v("#")]),a._v(" 优缺点")]),a._v(" "),t("p",[a._v("优点：动态加载类，提高代码灵活度\n缺点：运行速度比直接操作java代码要慢，能直接操作改变类的属性，有安全隐患")]),a._v(" "),t("h3",{attrs:{id:"反射中class-forname-和classloader的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射中class-forname-和classloader的区别"}},[a._v("#")]),a._v(" 反射中Class.forName()和classLoader的区别")]),a._v(" "),t("p",[a._v("Class.forName()除了将.class文件加载到JVM中，还会对文件进行解释，执行类中的static块")])])}),[],!1,null,null,null);s.default=e.exports}}]);