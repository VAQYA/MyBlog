(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{648:function(t,a,r){"use strict";r.r(a);var s=r(5),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h3",{attrs:{id:"前序遍历"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前序遍历"}},[t._v("#")]),t._v(" 前序遍历")]),t._v(" "),r("p",[t._v("根结点在前"),r("br"),t._v("\n先访问根结点，再遍历左子树，最后遍历右子树\n"),r("code",[t._v("根==》左==》右")])]),t._v(" "),r("h3",{attrs:{id:"中序遍历"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#中序遍历"}},[t._v("#")]),t._v(" 中序遍历")]),t._v(" "),r("p",[t._v("根结点在中"),r("br"),t._v(" "),r("code",[t._v("左==》根==》右")])]),t._v(" "),r("h3",{attrs:{id:"后序遍历"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#后序遍历"}},[t._v("#")]),t._v(" 后序遍历")]),t._v(" "),r("p",[t._v("根结点在后"),r("br"),t._v(" "),r("code",[t._v("左==》右==》根")])]),t._v(" "),r("h2",{attrs:{id:"二叉树的定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的定义"}},[t._v("#")]),t._v(" 二叉树的定义")]),t._v(" "),r("h3",{attrs:{id:"二叉查找树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二叉查找树"}},[t._v("#")]),t._v(" 二叉查找树")]),t._v(" "),r("p",[t._v("平均时间复杂度为O（log n），n为节点个数")]),t._v(" "),r("h3",{attrs:{id:"红黑树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[t._v("#")]),t._v(" 红黑树")]),t._v(" "),r("p",[t._v("是一种自平衡的二叉查找树\n左旋：逆时针旋转两个节点，让一个节点被其右子节点取代，而该节点成为右子节点的左子节点。"),r("br"),t._v("\n右旋：顺时针旋转两个节点，让一个节点被其左子节点取代，而该节点成为左子节点的右子节点。")]),t._v(" "),r("p",[t._v("HashMap、TreeMap中有用到")]),t._v(" "),r("h3",{attrs:{id:"b树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#b树"}},[t._v("#")]),t._v(" B树")]),t._v(" "),r("p",[t._v("每个节点可以存储多个数值元素，又名平衡多路二叉树")])])}),[],!1,null,null,null);a.default=v.exports}}]);