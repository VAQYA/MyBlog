(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{668:function(t,a,s){"use strict";s.r(a);var r=s(5),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[t._v("#")]),t._v(" 常量")]),t._v(" "),s("p",[t._v("缓存相关的常量放在CacheConsts类下，系统配置相关常量放在ConfigConsts下")]),t._v(" "),s("h3",{attrs:{id:"静态变量、静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态变量、静态方法"}},[t._v("#")]),t._v(" 静态变量、静态方法")]),t._v(" "),s("p",[t._v("直接用类名调用，不要用对象调用。")]),t._v(" "),s("h3",{attrs:{id:"判空"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判空"}},[t._v("#")]),t._v(" 判空")]),t._v(" "),s("p",[t._v("Collection的实现类调用了addAll方法后，下次使用要对集合判空")]),t._v(" "),s("h3",{attrs:{id:"工具类arrays"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工具类arrays"}},[t._v("#")]),t._v(" 工具类Arrays")]),t._v(" "),s("p",[t._v("Arrays.asList()把数组转成集合后，不能使用修改集合相关的方法。")]),t._v(" "),s("h3",{attrs:{id:"泛型通配符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型通配符"}},[t._v("#")]),t._v(" 泛型通配符")]),t._v(" "),s("p",[t._v("< ? extends T> 接收数据时，此集合(即? )不要用add 方法\n< ? super T> 接收数据时，此集合(即？)不要用get方法")]),t._v(" "),s("h3",{attrs:{id:"泛型赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型赋值"}},[t._v("#")]),t._v(" 泛型赋值")]),t._v(" "),s("p",[t._v("无泛型限制定义的集合赋值给泛型限制的集合时，要进行instanceof判断，避免ClassCastException异常")]),t._v(" "),s("h3",{attrs:{id:"遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历"}},[t._v("#")]),t._v(" 遍历")]),t._v(" "),s("p",[t._v("不要在for循环中进行remove和add操作，要用iterator")]),t._v(" "),s("h3",{attrs:{id:"集合去重"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合去重"}},[t._v("#")]),t._v(" 集合去重")]),t._v(" "),s("p",[t._v("利用set集合的唯一性，转换为Set\nSet<?> set = new HashSet<>(arrayList);")])])}),[],!1,null,null,null);a.default=e.exports}}]);