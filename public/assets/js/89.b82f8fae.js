(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{708:function(n,t,s){"use strict";s.r(t);var e=s(5),a=Object(e.a)({},(function(){var n=this,t=n.$createElement,s=n._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h4",{attrs:{id:"方法一-位运算方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法一-位运算方式"}},[n._v("#")]),n._v(" 方法一：位运算方式")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("元素有n个，则子集个数是2的n次方，  \n真子集个数：2^n -1，  \n非空真子集个数：2^n-2  \n\n1<<n ，1 * 2^n  \n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        int length = nums.length;\n        List<List<Integer>> resultList = new ArrayList<>();\n        for(int i= 0; i<(1<<length);i++){\n            List<Integer> list = new ArrayList();\n            for(int j= 0; j<length; j++){\n                if(( i & 1<<j) != 0){\n                    list.add(nums[length-1-j]);\n                }\n            }\n            resultList.add(list);\n        }\n        return resultList;\n    }\n}\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("\n将内部for循环中j解释为数组索引\n\n1. 数组[1,2,3]有3个元素，用3位字节表示，1表示当前子集存在、0表示不存在，如{1,3}就是101\n2.  \n|   0  |  1   |   2  |   3  |   4  |   5  |   6  |   7   |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ----  |\n| 000  | 001  | 010  | 011  | 100  | 101  | 110  |  111  |\n| {}   | {3}  | {2}  |{2,3} | {1}  |{1,3} |{1,2} |{1,2,3}|\n\n\n以5举例，\n101 和分别和 1、10、100 取&运算：\n1. 当101 & 1  (即2^0，索引为0，但2^0用来判断数组最右端length-1-0的元素是否存在)不等于0，说明此位置(length-1-0)有元素占用，即001，也就是{3}（取nums[length-1-0]）加入List\n2. 当101 & 10 (即2^1，索引为1，但2^1用来判断数组length-1-1的元素是否存在)等于0，说明此位置没有元素占用  \n3. 当101 & 100(即2^2，索引为2，但2^2用来判断数组length-1-2的元素是否存在)不等于0，说明此位置(length-1-2)有元素占用，即100，也就是{1}（取nums[length-1-2]）加入List\n")])])]),s("h4",{attrs:{id:"方法二-回溯算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法二-回溯算法"}},[n._v("#")]),n._v(" 方法二：回溯算法")])])}),[],!1,null,null,null);t.default=a.exports}}]);