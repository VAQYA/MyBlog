(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{671:function(t,a,e){"use strict";e.r(a);var n=e(5),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),e("h2",{attrs:{id:"工厂模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[t._v("#")]),t._v(" 工厂模式")]),t._v(" "),e("p",[t._v("属于创建型模式，提供了一种创建对象的最佳方式，实现不同的条件下创建不同的实例")]),t._v(" "),e("h2",{attrs:{id:"抽象工厂模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂模式"}},[t._v("#")]),t._v(" 抽象工厂模式")]),t._v(" "),e("p",[t._v("相当于超级工厂，用于创建其他工厂")]),t._v(" "),e("h2",{attrs:{id:"单例模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[t._v("#")]),t._v(" 单例模式")]),t._v(" "),e("h3",{attrs:{id:"懒汉模式-使用的时候再进行初始化-延迟加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#懒汉模式-使用的时候再进行初始化-延迟加载"}},[t._v("#")]),t._v(" 懒汉模式 ：使用的时候再进行初始化，延迟加载")]),t._v(" "),e("ol",[e("li",[t._v("保证线程安全")]),t._v(" "),e("li",[t._v("防止指令重排")]),t._v(" "),e("li",[t._v("双重检查优化")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//声明对象的引用\nprivate static volatile Singleton object;\n//私有化构造器\nprivate Singleton (){\n\n}\n//返回对象实例\npublic static Singleton getInstance(){\n\tif(object == null){\n\t\tsynchronized(Singleton.class){\n\t\t\tif(object == null){\n\t\t\t\tobject = new Singleton();\n\t\t\t}\n\t\t}\n\t}\n\treturn object;\n}\n\n")])])]),e("h3",{attrs:{id:"饿汉模式-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#饿汉模式-线程安全"}},[t._v("#")]),t._v(" 饿汉模式 ：线程安全")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//声明对象的引用\nprivate static Singleton object = new Singleton();\n//私有化构造器，不允许外部类构建本类的实例\nprivate Singleton (){\n\n}\n//返回对象实例\nprivate static Singleton getInstance(){\n\treturn object;\n}\n")])])]),e("h3",{attrs:{id:"基于静态内部类的单例模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于静态内部类的单例模式"}},[t._v("#")]),t._v(" 基于静态内部类的单例模式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("public class Singleton7{\n       // 构造器私有化       \n\t   private Singleton7(){}    \n\t   \n\t   // 静态内部类不会在一开始被装载 所有没有内存消耗问题       \n\t   // JVM在装载静态内部类是线程安全的 只有在使用内部类才会去装载 所以线程是安全的       \n\t   private static class SingletonInstance {           \n\t\t\tprivate static final Singleton7 singleton7 = new Singleton7();\n       }\n       \n\t   // 提供静态公有获取方法       \n\t   public static synchronized Singleton7 getInstance(){           \n\t\t\treturn SingletonInstance.singleton7;      \n\t   }\n}\n")])])]),e("h3",{attrs:{id:"模板方法模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式"}},[t._v("#")]),t._v(" 模板方法模式")]),t._v(" "),e("p",[t._v("定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，如JdbcTemplate")]),t._v(" "),e("ol",[e("li",[t._v("抽象类中有基本方法和模板方法，模板方法中调用了一至多个基本方法，模板方法一般由final修饰")]),t._v(" "),e("li",[t._v("继承了该抽象类的子类实现其基本方法")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" \n")])])]),e("h3",{attrs:{id:"代理模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代理模式"}},[t._v("#")]),t._v(" 代理模式")]),t._v(" "),e("p",[t._v("扩展目标对象的功能，可以在目标对象的某个方法执行前后增加一些自定义的操作")]),t._v(" "),e("h4",{attrs:{id:"静态代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态代理"}},[t._v("#")]),t._v(" 静态代理")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("定义一个接口及其实现类  SmsService、SmsServiceImpl")])]),t._v(" "),e("li",[e("p",[t._v("定义一个代理类同样实现这个接口 SmsProxy")])]),t._v(" "),e("li",[e("p",[t._v("将目标对象注入进代理类")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("SmsService smsService = new SmsServiceImpl();\nSmsProxy smsProxy = new SmsProxy(smsService);\n")])])]),e("h4",{attrs:{id:"jdk动态代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jdk动态代理"}},[t._v("#")]),t._v(" JDK动态代理")]),t._v(" "),e("p",[t._v("从JVM角度，动态代理是运行时动态生成类字节码，并加载到JVM")]),t._v(" "),e("ol",[e("li",[t._v("定义接口及其实现类")]),t._v(" "),e("li",[t._v("创建JDK动态代理类，实现InvocationHandler接口并重写invoke方法，在invoke方法实现其他自定义操作逻辑")]),t._v(" "),e("li",[t._v("通过Proxy.newProxyInstance(ClassLoader loader,Class<?>[] interfaces,InvocationHandler h);创建代理对象")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//接口\npublic interface SmsService {\n    String send(String message);\n}\n\n//接口实现类\npublic class SmsServiceImpl implements SmsService {\n\n    @Override\n    public String send(String message) {\n        System.out.println(message);\n        return message;\n    }\n}\n\n//JDK动态代理类\npublic class SmsInvocationHandler implements InvocationHandler {\n\n    private final Object target;\n    public SmsInvocationHandler(Object target) {\n        this.target = target;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println("方法调用前的自定义操作");\n        Object result = method.invoke(target,args);\n        System.out.println("方法调用后的自定义操作");\n\n        return result;\n    }\n}\n\n//用来获取被代理对象的工厂类\npublic class JdkProxyFactory {\n    public static Object createProxy(Object target){\n        return Proxy.newProxyInstance(\n                target.getClass().getClassLoader(), //目标类的类加载\n                target.getClass().getInterfaces(), //接口代理类要实现的接口列表\n                new SmsInvocationHandler(target) //代理对象对应的（实现了InvocationHandler接口的）代理类\n        );\n    }\n}\n\n//实际使用\nSmsService smsService = (SmsService) JdkProxyFactory.createProxy(new SmsServiceImpl());\nsmsService.send("发送成功");\n\n')])])]),e("h4",{attrs:{id:"cglib动态代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cglib动态代理"}},[t._v("#")]),t._v(" cglib动态代理")]),t._v(" "),e("p",[t._v("可以在运行期扩展Java类和实现Java接口，底层实现是通过ASM字节码处理框架来转换字节码并生成新的class（被代理类的子类）；速度上比jdk动态代理要快。\nCGLIB 采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，\n并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。\n但因为采用的是继承，所以不能对final修饰的类进行代理。")]),t._v(" "),e("h4",{attrs:{id:"静态vs动态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态vs动态"}},[t._v("#")]),t._v(" 静态VS动态")]),t._v(" "),e("blockquote",[e("p",[t._v("静态代理的接口一旦新增方法，实现类和代理对象都必须修改，而动态代理无需修改代理类，降低了耦合度\n静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。")])]),t._v(" "),e("h4",{attrs:{id:"jdk动态代理-vs-cglib动态代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jdk动态代理-vs-cglib动态代理"}},[t._v("#")]),t._v(" JDK动态代理 VS cglib动态代理")]),t._v(" "),e("blockquote",[e("p",[t._v("JDK动态代理只能只能代理实现了接口的类，而 CGLIB 可以代理未实现任何接口的类")])]),t._v(" "),e("h3",{attrs:{id:"迭代器模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#迭代器模式"}},[t._v("#")]),t._v(" 迭代器模式")]),t._v(" "),e("p",[t._v("在容器中用到的，")]),t._v(" "),e("h3",{attrs:{id:"适配器模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式"}},[t._v("#")]),t._v(" 适配器模式")]),t._v(" "),e("h3",{attrs:{id:"装饰器模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#装饰器模式"}},[t._v("#")]),t._v(" 装饰器模式")]),t._v(" "),e("p",[t._v("装饰者和被装饰者可以独立发展，不互相耦合，装饰模式是继承的一个替代模式，可以动态实现扩展一个实现类的功能")]),t._v(" "),e("h3",{attrs:{id:"观察者模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[t._v("#")]),t._v(" 观察者模式")]),t._v(" "),e("p",[t._v("简单来讲就一句话：当一个对象变化时，其它依赖该对象的对象都会收到通知，并且随着变化！对象之间是一种一对多的关系。")]),t._v(" "),e("p",[t._v("I/O中用到了适配器模式和装饰者模式")]),t._v(" "),e("h3",{attrs:{id:"策略模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[t._v("#")]),t._v(" 策略模式")]),t._v(" "),e("p",[t._v("多个类实现同一接口，这些类的区别仅限于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为")]),t._v(" "),e("h3",{attrs:{id:"项目中用到的设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目中用到的设计模式"}},[t._v("#")]),t._v(" 项目中用到的设计模式")]),t._v(" "),e("ol",[e("li",[t._v("单例模式-懒汉模式：创建线程池。")]),t._v(" "),e("li",[t._v("代理模式-动态代理：统一异常处理@ControllerAdvice和@ExceptionHandler")]),t._v(" "),e("li",[t._v("观察者模式：消息队列的发布订阅")]),t._v(" "),e("li",[t._v("策略模式：支付模块中")])])])}),[],!1,null,null,null);a.default=s.exports}}]);