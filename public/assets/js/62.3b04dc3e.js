(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{669:function(t,a,e){"use strict";e.r(a);var s=e(5),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"泛型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[t._v("#")]),t._v(" 泛型")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("List<E> 读作E的列表\n不确定或不关心实际的类型参数，可用？代替\n\n可用在类、接口、方法中，称为泛型类、泛型接口、泛型方法  \n")])])]),e("h3",{attrs:{id:"类型擦除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型擦除"}},[t._v("#")]),t._v(" 类型擦除")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("泛型是在编译器层次上实现的，编译器会去掉这个类型参数，生成的字节码中不包含泛型中的类型信息，这个过程就是类型擦除\neg: List<String>和List<Integer>编译后都会变成List\n")])])]),e("h3",{attrs:{id:"常用通配符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用通配符"}},[t._v("#")]),t._v(" 常用通配符")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("？ 表示不确定\nT 表示具体的一个Java类型\nK,V 表示键值对\nE 表示 Element\n")])])]),e("h3",{attrs:{id:"只能extends-继承-泛型接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#只能extends-继承-泛型接口"}},[t._v("#")]),t._v(" 只能extends(继承)泛型接口")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("eg: public interface UserService extends IService<User>\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);