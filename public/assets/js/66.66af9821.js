(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{683:function(e,t,n){"use strict";n.r(t);var a=n(5),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"map转java-bean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map转java-bean"}},[e._v("#")]),e._v(" Map转Java Bean")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("Bean的属性必须和Map的键一致\norg.apache.commons.beanutils.BeanUtils.populate(bean, map);")])]),e._v(" "),n("li",[n("p",[e._v("利用反射")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class MapToBeanUtil {\n\n    public static Object convertMap(Class type, Map map)\n            throws IntrospectionException, IllegalAccessException,\n            InstantiationException, InvocationTargetException {\n        BeanInfo beanInfo = Introspector.getBeanInfo(type); // 获取类属性\n        Object obj = type.newInstance(); // 创建 JavaBean 对象\n\n        // 给 JavaBean 对象的属性赋值\n        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();\n        for(PropertyDescriptor descriptor: propertyDescriptors){\n            String propertyName = descriptor.getName();\n            if (map.containsKey(propertyName)) {\n                Object value = map.get(propertyName);\n                Object[] args = new Object[1];\n                args[0] = value;\n\n                descriptor.getWriteMethod().invoke(obj, args);\n            }\n        }\n        return obj;\n    }\n}\n\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);