<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java面试题]]></title>
    <url>%2Funcategorized%2FJava%E9%9D%A2%E8%AF%95%E9%A2%98%2F</url>
    <content type="text"><![CDATA[面向对象的三（四）大特征封装、继承、多态。（抽象） 封装：就是对数据和数据操作进行封装，只对外界提供一个接口，封装可以提高代码的重用性和安全性。 继承：从已有的类中继承信息创建新的类，提高了代码的复用性，是多态的前提。 多态：分为两种： 编译时多态机制，是静态分派的: 同类中方法的重载。运行时多态机制，是动态分派的：子类中方法的重写。实现多态的前提就是父类的引用或接口的引用指向子类的对象，子类进行方法重写。 多态的好处多态可以实现同样的对象引用调用同样的方法做出不同的事情。具有可扩充性，增加新的子类不影响已经存在的类的结构。 虚拟机中是如何实现多态的通过动态绑定技术，在运行期间判断所引用对象的实际类型，根据实际类型调用对应的方法。 什么是接口，接口的作用接口是一系列方法的声明，方法没有方法体，方法默认是被public abstract修饰的，变量是public static final修饰的。接口需要被其他类实现，这些实现可以有不同的行为。 接口和抽象类的区别 不同点： 抽象类（用abstract修饰的类）中可以有抽象方法和普通方法（没有方法体的方法称为抽象方法），接口中的方法全是抽象方法。抽象类中可以有构造方法，接口中没有。抽象类可以有普通成员变量，接口中没有。抽象类在代码实现上发挥作用，接口主要是定义项目模块之间的通信。一个类只能继承一个抽象类，一个接口可以被多个类实现。 相同点： 都不能实例化对象，子类必须实现抽象类或者接口的全部抽象方法，否则子类也必须定义为抽象类。 重载、重写/覆盖 重载：参数列表不同（个数、顺序、类型），方法名相同，在同一类中。 重写/覆盖：参数列表相同，方法名相同，在子类中，子类的方法修饰符权限必须高于父类，抛出的异常必须比父类范围小。 父类的静态方法能否被子类重写？不能，重写只适用于实例方法，如果子类中有和父类相同签名的静态方法，子类这个方法就会被隐匿，子类只能调用父类的这个静态方法。 不可变对象指对象一旦创建就不能被改变，任何修改都会创建一个新的对象，如String，Integer等包装类。 静态变量和实例变量的区别 静态变量又称为类变量，存在于方法区，程序加载类的字节码时就会给静态变量分配空间，可以直接用类名调用。实例变量在创建实例对象时才被分配空间，实例变量本身存放在堆内存中（动态分配，速度慢），其引用存放在栈中（大小固定，速度快）]]></content>
  </entry>
  <entry>
    <title><![CDATA[Shiro]]></title>
    <url>%2FJava%2FShiro%2F</url>
    <content type="text"><![CDATA[Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。 Shiro的核心部分是SecurityManager，负责安全认证和授权 Subject 主体 代表了当前操作“用户”，是个抽象概念，不一定是指具体的人，与当前应用交互的任何东西都称为Subject，如第三方进程、后台帐户,网路爬虫、机器人。所有的Subject都绑定到SecurityManager，与Subject的所有交互，都委托给SecurityManager，SecurityManager才是实际的执行者。 通过SecurityUtils.getSubject()来获取Subject，Subject再获取Session对象subject.getSession(),这里的Session对象并不是HttpSession，它不需要依赖http服务器，Shiro的Session的默认实现类实现类：org.apache.shiro.mgt.DelegatingSession SecurityManager 安全管理器 相当于SpringMVC中的DispatchServlet，是Shiro的核心部分，所有具体的交互都通过它进行控制，SecurityManager管理着所有Subject、且负责进行认证、授权、会话、缓存的管理。 AuthenticationInfo 角色信息集合 负责Subject认证。 AuthorizationInfo 角色的权限信息集合 授权器，用来决定主题是否有权限进行相应的操作 Realm 域 充当了Shiro与数据间的连接器，当用户执行角色登陆和权限验证时，Shiro会从应用配置的Realm中查找用户及其权限信息。相当于一个安全相关的DAO，封装了数据源的连接细节，并在需要时将数据提供给Shiro，配置Shiro时，必须至少指定一个Realm。Realm提供AuthenticationInfo和AuthorizationInfo两个对象。 SessionManager 会话管理 管理会话生命周期的组件 CacheManager 缓存控制器 来管理用户、角色、权限等缓存的，因为这些数据基本上很少改变，放入缓存可以提高访问性能。类似于Map&lt;String,Object&gt;对象，通过put保存对象，get取回对象。 Cryptgraphy 密码模块 Shiro提供的加密组件，用于密码的加密解密。 获取Subject对象。 测试当前用户是否已经被认证，即是否已经登录，调用Subject的isAuthenticated（）方法。 没有登录的话，把用户名和密码封装为UsernamePasswordToken对象，UsernamePasswordToken token = new UsernamePasswordToken（”username”,”password”）; 创建表单页面 把请求提交到SpringMVC和Handler 获取用户名和密码 token.setRememberMe(true); 调用Subject对象的login(token)方法执行登录。 登录时的几种异常 UnknownAccountException 没有指定用户 。 IncorrectCredentialsException 账户存在，密码不匹配。 LockedAccountException 用户被锁定。 AuthenticationException 前三种异常的父类。 自定义Realm方法，从数据库中获取对应的记录，返回给Shiro 实际上需要继承org.apache.shiro.realm.AuthenticatingRealm类实现doGetAuthenticationInfo（AuthenticationToken）方法 由Shiro完成与密码的比对 执行登出 Subject对象的logout()方法。判断是否有这个角色，Subject对象调用hasRole(“username”)方法。判断用户是否有这种权限，Subject对象调用isPermitted(“)方法。.ini配置文件规则：用户名=密码，角色1，角色2角色=权限1，权限2即根据用户名找角色，再根据角色找权限。角色= 类型：操作：实例 12345678910111213141516171819202122applicationContext.xml中配置&lt;bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean"&gt; &lt;propertry name="securityManager" ref="securityManager"/&gt; &lt;property name="loginUrl" value="/login.jsp"/&gt; &lt;property name="successUrl" value="/list.jsp"/&gt; &lt;property name="unauthorizedUrl" value="/unauthorized.jsp"/&gt; &lt;!--配置那些页面需要保护，以及访问这些页面需要的权限,首次配置优先 anon 可以被匿名访问 authc 必须认证（即登陆）后才能访问的页面 logout 登出 --&gt; &lt;propertry name="filterChainDefinitions"&gt; &lt;value&gt; /login.jsp = anon /shiro/login = anon /shiro/logout = logout /** = authc &lt;/value&gt; &lt;/propertry&gt;&lt;/bean&gt; ShiroRealm.java继承AuthenticationRealm类，重写方法doGetAuthenticationInfo（AuthenticationToken token），返回AuthenticationInfo对象1234567891011121314方法体：1.把AuthenticationToken对象转换成UsernamePasswordToken对象AuthenticationToken upToken = (UsernamePasswordToken)token;2.从UsernamePasswordToken中获取usernameString username = upToken.getUsername();3.调用数据库的方法，从数据库中查询username对应的用户记录4.判断异常并抛出5.根据用户信息的情况，来构建AuthenticationInfo对象并返回，通常使用的实现类是SimpleAuthenticationInfoObject principal = username;//认证的实体信息，可以是username，也可以是实体类对象。Object credentials = "123456";//密码。String realmName = getName();//获取当前realm对应的nameSimpleAuthenticationInfo info = new SimpleAuthenticationInfo(principal,credentials,realmName);return info; 密码的比对,通过AuthenticatingRealm的credentialsMatcher属性进行密码的比对。 把字符串加密为MD5：替换当前Realm的credentialsMatcher属性，直接使用HashedCredentialsMatcher对象，并设置加密算法。 String hashAlgorithmName = “MD5”;//加密方式Object credentials = “123456”;//初始密码Object salt = null;//盐int hashIterations = 1024;//加密次数Object result = new SimpleHash(hashAlgorithmName,credentials,salt,hashIterations);//加密结果 授权需要继承AuthoriingRealm类，并实现其doGetAuthorizationInfo方法。AuthorIzingRealm类继承自AuthenticatingRealm，但其并没有实现这个方法，所以认证和授权只需要继承AuthorizingRealm即可，同时实现他的两个抽象方法。]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[CDN]]></title>
    <url>%2Funcategorized%2FCDN%2F</url>
    <content type="text"><![CDATA[CDN介绍CDN，Content Delivery Network（内容分发网络），是建立在网络之上的，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网路拥塞，提高用户访问相应速度和命中率。 CDN的关键技术为：内容存储、分发技术。CDN目的：解决因分布、宽带、服务器性能带来的访问延迟问题，适用于站点加速、点播、直播等，使用户可就近获得所需内容，解决Internet网络拥挤，提高用户网站响应速度和成功率。 CDN负载均衡设备会根据用户IP地址，以及用户请求的URL，选择一台所属区域的区域负载均衡设备，然后为用户选择一台合适的缓存服务器提供服务，选择依据包括： 根据用户IP地址，判断哪一台服务器距用户最近（类似于JD快递）。 根据用户URL携带的内容名称，判断哪一台服务器上有用户所需内容。 查询各服务器当前的负载情况，判断哪一台服务器尚有服务能力。 全局负载均衡设备把服务器的ip地址返回给用户，用户向缓存服务器发送请求，缓存服务器响应请求。 例如，在HTML中引入阿里的js，而不是本地的js文件，就会向阿里就近服务器上找js或css文件，速度和稳定性有保障，又减少了服务器的资源负担。]]></content>
  </entry>
  <entry>
    <title><![CDATA[随笔]]></title>
    <url>%2FJava%2F%E9%9A%8F%E7%AC%94%2F</url>
    <content type="text"><![CDATA[java中Runnable 和 Callable 有什么不同？Runnable和Callable都代表那些要在不同的线程中执行的任务，Runnable从jdk1.0开始就有了，Callable是在jdk1.5出的，Callable的call（）方法可以返回值和抛出异常，而Runnable的run（）方法没有这些功能，Callable可以返回装载有返回结果的Future对象。当run（）或者call（）方法执行完成后，线程会自动结束。 volatile是一个特殊的修饰符，只有成员变量才能使用它。在java并发程序缺少同步类的情况下，多线程对成员变量的操作对其他线程是透明的。volatile变量可以保证下一个读取操作在上一个写操作完成后进行。 Vector使用同步方法来实现线程安全的，ArrayList不是线程安全的。 如何在两个线程间实现共享数据？通过共享对象，或者使用像阻塞队列这样的数据结构。 notify和notifyAll的区别？notify不能唤醒某个具体线程，所以只有一个线程在等待的时候才有用，notifyAll唤醒所有线程，并允许他们之间争夺线程锁，确保至少有一个线程能继续运行。 wait、notify、notifyAll方法都是锁级别的操作，所 以把他们定义在Object中，因为锁属于对象。 sleep（）和wait（）方法的区别？都用来暂停当前运行的程序，sleep（）方法是Thread方法，只是短暂暂停，不释放线程锁，wait( )是对象方法，会释放对象锁。 jsp的四大域对象：pageContext，request，session，application九大内置对象：Request、Response、Session、Out、PageContext、Page、Exception、Application、Config AJAX通过异步模式，可以实现局部刷新，在不更新整个页面的前提下维护数据，承担了一部分本来由服务器承担的工作，从而减少了大量用户下的服务器负载。 SpringMVC的常用注解：@RequestMapping 用于请求url映射@RequestBody 注释实现接收http请求的json数据，将json数据转换为java对象。@ResponseBody 注释实现将controller方法返回对象转化为json相应给客户。 拦截器与过滤器的区别：拦截器是基于java的反射机制，过滤器是基于函数回调的；拦截器不依赖于servlet容器。拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。拦截器可以访问action上下文，值栈（本质是ArrayList）里的对象，而过滤器不能。action声明周期中，拦截器可以多次被调用，而过滤器只能在容器中初始化时被调用。 Struts2action是多例的可分为三个部分：核心控制器FilterDispatch、业务控制器action、用户实现的业务逻辑组件 工作原理：① 客户端初始化一个servlet容器的请求② 请求经过一系列的过滤器③ 接着FilterDispatch被调用④ ActionMapper决定需要哪个action，FilterDispatch把请求的处理交给ActionProxy⑤ ActionProxy通过Configuration Manager询问框架的配置文件，找到需要调用的action类⑥ ActionProxy创建一个ActionInvocation的实例⑦ ActionInvocation的实例通过命名模式来调用Action，前后涉及到拦截器调用⑧ Action执行完毕，ActionInvocation负责根据struts.xml的配置找到对应的返回结果，返回结果通常是jsp。 工作流程 1、客户端浏览器发出HTTP请求. 2、根据web.xml配置，该请求被FilterDispatcher接收 3、根据struts.xml配置，找到需要调用的Action类和方法， 并通过IoC方式，将值注入给Aciton 4、Action调用业务逻辑组件处理业务逻辑，这一步包含表单验证。 5、Action执行完毕，根据struts.xml中的配置找到对应的返回结果result，并跳转到相应页面 6、返回HTTP响应到客户端浏览器 Struts2和SpringMVC的区别1.springmvc入口是一个servlet前端控制器(DispatcherServlet),struts2入口是一filter过滤器(StrutsPrepareAndExecuteFilter). 2.struts2通过在action类中定义成员变量接收参数,(属性驱动和模型驱动),它只能使用多例模式管理action. springmvc通过在coontroller方法中定义形参接收参数,springmvc可以使用单例模式管理controller. 3.springmvc是基于方法开发的,注解开发中使用requestMapping将url和方法进行 映射,如果根据url找到controller类的方法生成一个handler处理器对象(只包括一个method).struts2是基于类开发的,每个请求过来创建一个action实例,实例对象中有若干个方法.开发中建议使用springmvc,springmvc方法更类似service业务方法. 4.struts2采用值栈存储请求和相应的数据,通过OGNL存取数据,springmvc通过参数绑定期将request请求内容解析,并给方法形参赋值. 5.struts2和springmvc的速度是相当的,由于struts2的漏洞较多,跟多企业使用springmvc 散列算法和加密都是将Object变成一串无意义的字符串，不同的是散列算法是单向的，不可复原。 因为每次接口调用都要搜索方法表，所以接口的调用慢于类调用]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Funcategorized%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
