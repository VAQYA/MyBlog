<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[设计模式]]></title>
    <url>%2Funcategorized%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[单例模式懒汉模式 ：使用的时候再进行初始化，延迟加载 保证线程安全 防止指令重排 双重检查优化 123456789101112131415161718//声明对象的引用private static volition Singleton object = null;//私有化构造器private Singleton ()&#123;&#125;//返回对象实例private static Singleton getInstance()&#123; if(object == null)&#123; synchronized(Singleton.class)&#123; if(object == null)&#123; object = new Singleon; &#125; &#125; &#125; return object;&#125; 饿汉模式 ：]]></content>
  </entry>
  <entry>
    <title><![CDATA[集合]]></title>
    <url>%2Funcategorized%2F%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[HashMap数据结构 java7 数组+链表+（红黑树java8） 默认初始容量16 2的n次幂 是线程不安全的 死锁（1.7版本之前会）或数据丢失 多线程扩容可能会死锁，如果当前位置有两个数据AB，其中一个线程新扩容存储顺序可能是AB，另一个线程是BA，造成死锁 数组查找 时间复杂度O(1)插入、删除 设计到元素的移动，时间复杂度为O(n) 链表新增、删除 只需处理结点间的引用，时间复杂度为O(1)查找 需要遍历列表的所有结点逐一进行对比，复杂度为O(n) 存入数据put通过对数据元素的hashCode值对容量取模（hashCode值 % 容量）来分配位置到数组，取模值相同则在数组的当前位置以链表结构形式继续存入 扩容扩容时，是用位运算，将旧数据元素分配位置，迁移到新数组]]></content>
  </entry>
  <entry>
    <title><![CDATA[红黑树]]></title>
    <url>%2Funcategorized%2F%E7%BA%A2%E9%BB%91%E6%A0%91%2F</url>
    <content type="text"><![CDATA[红黑树是一种含有红黑结点并能自平衡的二叉查找树。它必须满足下面性质： 性质1：每个节点要么是黑色，要么是红色。性质2：根节点是黑色。性质3：每个叶子节点（NIL）是黑色。性质4：每个红色结点的两个子结点一定都是黑色。性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。]]></content>
  </entry>
  <entry>
    <title><![CDATA[多线程]]></title>
    <url>%2Funcategorized%2F%E5%A4%9A%E7%BA%BF%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[volatile保证了可见性，即使多线程之间，一个线程修改后其他线程也能感知变化 java内存模型(JMM)数据原子操作 read(读取)： 从主内存读取数据 load(载入)： 将从主内存读取的数据载入工作内存 use(使用)： 从工作内存读取数据来运行计算 assign(赋值)： 将计算好的值重新赋值到工作内存中 store(存储)： 将工作内存数据存到主内存 write(写入)： 将store过去的变量值赋值给主内存的变量 lock(锁定)： 将主内存变量加锁，标识为线程独占内存 unlock(解锁)： 将主内存变量解锁，解锁后其他线程才可以锁定该变量 并发存在的问题 共享 可变 Unsafe 魔术类可以绕过虚拟机，直接访问底层内存]]></content>
  </entry>
  <entry>
    <title><![CDATA[Redis]]></title>
    <url>%2Funcategorized%2FRedis%2F</url>
    <content type="text"><![CDATA[Rediskey-value型数据库 Redis的持久化 RDB默认方式按照一定的时间周期把内存的数据以快照的形式保存到硬盘的二进制文件。（二进制文件和文本文件都是按照二进制存储的，文本文件是把一个个字节解读成字符，二进制文件的输入输出省去了转换的过程）对应产生的数据文件为dump.rdb，可通过配置文件中的save参数来定义保存周期 AOF将每一个收到的写命令通过write函数追加到文件最后，重启Redis后会根据内存的写命令在内存中重建整个数据库的内容 两种方式同时开启时，优先执行AOF方式 缓存雪崩原因：设置的缓存采用了相同的过期时间，同一时刻出现原有缓存过期。 结果：新缓存还没存入期间，访问缓存的请求都直接去访问数据库了，对数据库的CPU和内存造成压力 解决办法： 加锁 队列保证不会有大量的线程对数据库一次性进行读写 将缓存失效时间分散开 缓存穿透原因：数据库中不存在，缓存中也肯定不存在，但每次访问都会先访问缓存再访问数据库 结果：造成里两次无用的查询 解决办法：采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个不存在的数据会被这个bitmap拦截，从而避免了对数据库查询的压力 布隆过滤器：n个相互独立的哈希函数，解决哈希冲突，一个函数在bitmap中查询不到就说明不存在，只有全部函数都查到了才说明存在这个数据 缓存击穿原因：一个key非常热点，这个key失效的瞬间，大并发穿破缓存直接访问数据库 结果：请求都直接去访问数据库了，对数据库的CPU和内存造成压力 解决办法：在访问key之前，采用SETNX（set if not exist），设置另一个短期key来锁住当前key的访问，访问结束后再删除该短期key 缓存预热在系统上线后将相关的缓存数据直接加载到缓存系统。这样可以直接查询事先被预热的缓存数据，避免用户在请求时先查询数据库再讲数据进行缓存。 缓存更新Redis有6中自带的缓存失效策略。 可定期清理过期的缓存 缺点：维护大量缓存的key比较麻烦 当有用户请求过来时再判断请求的缓存是否过期了，过期的话就从数据库中得到新数据并更新缓存 缺点：每次请求都要判断缓存是否失效，逻辑比较复杂 缓存降级非核心业务影响到核心性能，对其降级，目的是保证核心服务可用，即使是有损的 热点数据、冷数据缓存在失效前至少被访问了两次，这样缓存才有意义。为访问频率比较高的热点数据建立缓存 单线程的Redis为什么那么快 纯内存操作 单线程避免了频繁的上下文切换 采用了非阻塞I/O多路复用机制]]></content>
  </entry>
  <entry>
    <title><![CDATA[JVM]]></title>
    <url>%2Funcategorized%2FJVM%2F</url>
    <content type="text"><![CDATA[JVM(Java Virtual Machine) Java虚拟机组成 类加载器子系统 将class文件装载到JVM运行时数据区中 运行时数据区（内存模型） 2.1 堆(Heap) ： 线程共享，内存不连续，存储对象，一个JVM中只有一个堆 年轻代+老年代 堆默认600m，老年代占2/3内存 2.2 方法区（元空间）： 线程共享 常量、静态变量、类信息（类名、方法信息、字段属性信息）、编译器编译后的代码 方法区中有一块区域叫运行时常量池 2.3 栈(Stack)： 线程私有，内存连续，线程运行时会分配给该线程一块栈内存A，线程私有，该线程每运行一个方法都会创建一个栈帧，从A内存分配一块B内存给该方法 。 存放的一个个栈帧FILO先进后出 ，一个方法从调用到到执行完成就对应着一个栈帧在虚拟机栈中入栈到出栈的过程 局部变量表：基础类型时存局部变量的值，对象类型时存对象在堆中的内存地址（占用的空间大小在编译器时就确定了） 操作数栈：变量操作时暂存的数值 指向运行时常量池的引用： 方法运行时可能会用到类中的常量 方法返回地址：方法执行完毕后要返回调用它的地方 2.4 本地方法栈： 本地方法运行时需要的一块内存。 eg: native 修饰的方法是由C语言实现的，线程的start方法 2.5 程序计数器(Program Counter Register) 线程私有： 也称为PC寄存器，记录运行代码的位置，这样线程切换时可以在当前位置继续运行。 字节码执行引擎负责修改记录程序计数器的值 程序计数器存储的数据所占空间的大小不会程序的执行而发生改变，所以程序计数器不会出现内存溢出现象（唯一一个） 字节码执行引擎 执行class文件的字节码指令，相当于机器的CPU 类文件被编译成字节码文件后，JVM虚拟机通过类加载器子系统将其加载到数据区，再由字节码执行引擎去运行 GC，Garbage Collection垃圾收集回收垃圾对象（可达性分析后不可达的对象）]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Funcategorized%2F%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80%2F</url>
    <content type="text"><![CDATA[知行合一 知行互相依靠推进，是一个环 第一步.过去(很久之前或1秒之前)的行–&gt;第二步.形成现在的知以及知之后的意识–&gt;第三步.马上要做出的行（马上要做出的行的同时也会变成第一步中的过去的行而又引起新的知，这是个环） 在第二步中形成的现在的知这种感觉只有过去的行才能改变，意识层面的空想99%都没用，想要摆脱(由过去的行引起的现在的知而又导致的将要做出的行)行，必须在舒适区做出新的行才可以，空想是没用的。 建立一个模型，一个一一对应，又不断被新的行所替代的模型 知，不是意识，是在接下来要做出的行之前的比意识更早的感觉，它发于瞬间，转瞬即逝。它来自于过去的行 不虑而知为良知(没有掺杂意识的知，意识中有“私欲”) 知行合一是规律，致良知是需要一生都要做的，去除”私欲“对自己的影响、让自己对知有更深层次的理解以提高对事物的认知水平就是致良知的过程，需要绝对的理性，没有人能绝对的摆脱私欲的影响，所以致良知是无止境的 “私欲”，不仅仅是个人错误的欲望，而是心理阴影、经验主义、主观想象的集合。私欲被包含在第二步的意识之中，在行动中意识到有哪些私欲，然后去掉它们。 王阳明不是创建了知行合一、心即理，而是发现了它们 心即理，无人教你如何孝敬父母，你内心自然知道该如何做，结果你做到了。这便是心即理、知行合一。此处的“知”(孝敬父母)是你知道的，且你的心里认为是对的，但有时你的“知”不一定是正确的，这便需要通过用你的“行”来更新替换”知“ 冥想可以有效去除“私欲”]]></content>
  </entry>
  <entry>
    <title><![CDATA[MySQL]]></title>
    <url>%2Funcategorized%2FMySQL%2F</url>
    <content type="text"><![CDATA[索引帮助快速获取数据的排好序的数据结构索引的建立就是对数据的排序的过程 select *会全局扫描，速度会很慢 二叉树最多有两个子节点左子结点元素&lt;父节点元素&lt;右子节点元素 满二叉树所有结点都有左右两个子节点，并且叶子都同一层。 完全二叉树按照层次给所有结点编号，编号是连续的 。 没有满二叉树完美，满二叉树也属于完全二叉树 二叉树的存储结构顺序存储结构用一维数组存储二叉树的结点，一般只用于存储完全二叉树。 链表存储结构数据域+指针域 bigint一般主键id是这种类型并且设为自增，占8个字节。 ###MySQL创建的B+Tree索引的根节点是常驻内存的，根节点中的指针域对应的数据在磁盘中。 存储引擎是形容数据表的 InnoDB （聚集）:用的较多 .frm文件：存放表结构信息.idb文件：存放数据和索引 ，存储了索引和当前索引字段和同行的其他字段的数据（叶结点包含了完整的数据记录） MyISAM :数据文件和索引文件是分离的（非聚集）.frm文件： 表结构信息.MYD文件： 数据.MYI文件： 索引 找到指定结点对应的数据指针位置，再从.myd文件中找到数据 primary key和second keyInnoDB中，主键索引的叶结点包含了完整的数据，非主键索引叶节点存的是主键的值 索引类型 b-tree hash b+tree相对于bTree优化了范围查找因为每个叶结点对应的数据段的第一个和最后一个都存了下一个数据块的指针，可直接顺着查找 MD5CSC16索引优化最左前缀原则 优化慢查询 - Explain字段含义 id 序列号，表示select子句的查询顺序 值不同时，值越大优先级越高，值相同时从上往下执行 select_type 查询类型 ， 区分普通查询、联合查询、子查询等类型 select简单查询，不包括子查询和union primary查询中包含任何复杂的子部分，最外层的查询就被标记为primary subquery select或where中包含子查询 derived from中包含子查询 union union后的第二个查询语句 union result 表示两个union的查询语句的查询结果，id为null table表示这一行的数据是关于哪张表的 type system 表示只有一行记录（系统表），是const的特例const 表示通过一次索引就找到了，用于比较主键（primary key）或唯一索引（unique）eq_ref 唯一性索引扫描，对于索引键，表中只有一条记录与之匹配。ref 非唯一性索引扫描，range 检索指定范围的行，where后有between，&gt;,&lt;,in等index 只遍历索引树，索引文件比数据文件小all 从硬盘全盘扫描，最慢了 以上查找类型效率递减，一般达到range级别就好，最好达到ref级别 possible key 可能会用到的索引 key 真正用到的索引 为null表示没有用到索引 key_len 索引可能会使用的最大长度，通过建表时的长度定义计算而来 ref rows 查找的行数，有多少条符合的记录 extra]]></content>
  </entry>
  <entry>
    <title><![CDATA[WMS]]></title>
    <url>%2FJava%2FWMS%2F</url>
    <content type="text"><![CDATA[1001-1234561018-1234561019-10191021-123456 mainPage.jsp用于定义导航链接的部分 bootstrap中的class .navbar 设置nav元素为导航条组件 .navbar-default 控制颜色的属性，默认白 .navbar-inverse 控制颜色的属性，黑 .navbar-nav 设置ul为导航条组件内的列表元素 .navbar-right 设置导航条内元素向右对齐 .navbar-fixed-top 设置导航条组件固定到底部 role=”navigation” 可以增强访问性 .container-fuid 自适应屏幕宽度，即满屏显示 .navbar-header 指定div元素为导航条组件包括品牌图标及切换按钮 .navbar-brand 设置导航条组件内的品牌图标，默认放文字，但也可放图片。 .home 是什么类？ href=”javascript:void(0)” 表示让超链接去执行一个js函数，而不是跳转到一个地址，void(0)表示一个空的方法。与href=”#” 不同的是#包含了位置信息，默认锚点是#top,则会回到网页顶部.dropdown 下拉菜单,默认隐藏菜单，点击时会自动添加.open类，显示菜单项.dropdown-toggle 表明这是个下拉列表，data-toggle属性，表明了后面下拉数据的切换是为哪个class服务的，是和最外容器类名一致。 所有图标都需要一个基类和对应那个图标的类 下拉菜单（小三角） 下拉菜单项，是class为dropdown内的 .container-fuid 自适应布局 .row 表示行 .col 表示列 .col-xs-* 超小屏幕（&lt;768px)使用 .col-sm-* 小屏幕【768px&lt;=宽度&lt;=992px ） .col-md-* 中等屏幕【992,1200） .col-lg-* 大屏幕 大于1200px时使用 栅格系统会自动把每行row分为12列，col-md-2表示显示6个div，每个占2列 data-toggle=”collapse” 隐藏内容data-toggle=”collapse.in” 默认显示内容 AccountHandler.java中，返回一个包含4个字符的图形验证码，并将值设置到用户session中。 window.open(URL,name,specs,replace);打开一个新的浏览器窗口，或查找一个已命名的窗口。参数都可选 $.param()，序列化对象，返回字符串var param = {a:100,b:200};var str = $.param(param);console.log(str);结果为：a=100&amp;b=200 验证码 使用java.awt包，包含了绘制图形的方法 写一个生成验证码的工具类，里面写了个char数组，包含了26个英文字母和9和数字，我没有写0，以免混淆 在访问路径后面加入了时间戳，new Date().getTime() ,如果每次的路径一样，浏览器就会自动加载缓存，加上时间戳后访问的路径就不一样了 使用ImageServlet实时生成验证码图片 定义BufferedImage对象 获得Graphics对象 通过Random类产生随机验证码信息 使用Graphics绘制图片 使用ImageIO输出图片 校验验证码是否正确 获取页面的验证码 获取session中保存的验证码 比较验证码 返回校验结果 刷新验证码js写的点击事件，在url请求中加入新的时间戳，获取新的验证码（awt包中BufferedImage类得到验证码图片，字符串是用Random随机生成的，将字符串存在session中，用ImageIO对象将验证码图片输出。 验证是否登录用Shiro框架的工具类得到当前用户的subject对象，调用isAuthenticated方法，返回false则说明没有登录，执行login方法，跳转到login界面 注销登录用Shiro框架的工具类得到当前用户的subject对象，调用isAuthenticated方法，返回true则说明已经登录，执行logout方法，跳转到login界面 登录信息加密【（密码的MD5+用户ID）的MD5+验证码】的MD5加密 验证密码加密方式（数据库的密码+验证码）的MD5加密 默认保存到数据库中的密码（密码的MD5+用户ID）的MD5 未登录则跳转到login页面在配置文件SpringApplication.xml中,加入过滤器，设置权限，所有请求都设置成authc，即必须登录认证后才能访问。 输入框格式验证bootstrapValidator插件，只需要设置属性值，不能为空notEmpty的提醒信息message；输入的规则，用正则表达式 用户和角色关联自定义域的类中，在doGetAuthorizationInfo方法，角色表和用户-角色关联表连接查询出用户的角色，传参给SimpleAuthorizationInfo（）方法，返回AuthorizationInfo对象,它相当于当前登录用户所拥有的权限的集合。 角色和权限关联在jsp页面使用使用标签库，&lt;shiro: hasRole name=”systemAdmin”&gt;权限的url是配置在数据库中的，后台取出url信息，与请求信息对比，用户登陆后会被shiro的拦截器拦截，得到用户有哪些访问权限。 正常情况下URL路径的拦截设置如下: /admins/user/**=roles[“admin,guest”] 登出时间记录写用户Session监听器，当用户session注销时，记录用户账户登出的时间和用户信息，插入记录表中。]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[jQuery]]></title>
    <url>%2Funcategorized%2FjQuery%2F</url>
    <content type="text"><![CDATA[Ajax的核心是通过XMLHttpRequest对象，使网页与服务器进行通信，获取非本页的内容，用于异步请求；Jsonp核心是动态添加&lt;script&gt;标签调用服务器提供的js脚本，用于跨域请求。Ajax也可以通过服务器代理解决跨域问题。 jQery对Ajax异步进行了封装，几种常用的方式：$.ajax , $.post , $.get , $.getJSON123456789101112131415$.ajax(&#123; //常用的参数 method //数据的提交方式，get或post url //数据的提交路径 async //是否支持异步，默认true data //需要提交的数据 dataType //服务器返回数据的类型，可指定HTML、xml、json、text success : function()&#123;&#125; //请求成功后的回调函数 error : functin()&#123;&#125; //请求失败后的回调函数&#125;);$.post(&#123; contentType //发送post请求的格式，可指定text/plain,application/json &#125;) $(document).ready(function(){ console.log(“hello”);});等同于$(function()){ console.log(“hello”);}); 12345678910111213bootstrapValidator插件API,使用前导入js文件bootstrapValidator.min.js//获取当前表单的验证状态var flag = $(formName).data("bootstrapValitor").isValid();//触发全部验证$(formName).data('bootstrapValidator').validate();//触发指定字段的验证$(formName).data(“bootstrapValidator”).validateField('fieldName');//重置表单所有验证规则$(formName).data("bootstrapValidator").resetForm(); JavaScript中数组的push方法，向数组的末尾添加一个或多个元素，并返回新的长度。 jQuery中$.each()方法的使用]]></content>
  </entry>
  <entry>
    <title><![CDATA[web.xml配置]]></title>
    <url>%2Funcategorized%2FwebXML%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[在web.xml中配置Spring的配置文件applicationContext.xml,需要为其配置ContextLoaderListener监听器12345678&lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;&lt;/context-param&gt;&lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt; Spring提供ServletContextListener的一个实现类ContextLoaderListener监听器，启动tomcat容器时，该类的作用就是自动装载ApplicationContext的配置信息，如果没有设置contextConfigLocation的初始参数，则会使用默认WEB_INF路径下的application.xml文件。 ContextLoaderListener会读取这些xml文件产生的WebApplicationContext对象，然后将这些对象放置在ServletContext的属性里，这样我们只要可以得到Servlet就可以得到WebApplicationContext对象，并利用对象访问Spring容器管理的bean。 ps: web.xml中元素的加载顺序：context-param–&gt;listeners–&gt;filters–&gt;servlets(load on startup)]]></content>
  </entry>
  <entry>
    <title><![CDATA[Java面试题-持续更新]]></title>
    <url>%2FJava%2FJavaInterview%2F</url>
    <content type="text"><![CDATA[Java基础面向对象的三（四）大特征封装、继承、多态。（抽象） 封装：就是对数据和数据操作进行封装，只对外界提供一个接口，封装可以提高代码的重用性和安全性。 继承：从已有的类中继承信息创建新的类，提高了代码的复用性，是多态的前提。 多态：分为两种： 编译时多态机制，是静态分派的: 同类中方法的重载。运行时多态机制，是动态分派的：子类中方法的重写。实现多态的前提就是父类的引用或接口的引用指向子类的对象，子类进行方法重写。 多态的好处多态可以实现同样的对象引用调用同样的方法做出不同的事情。具有可扩充性，增加新的子类不影响已经存在的类的结构。 虚拟机中是如何实现多态的通过动态绑定技术，在运行期间判断所引用对象的实际类型，根据实际类型调用对应的方法。 什么是接口，接口的作用接口是一系列方法的声明，方法没有方法体，方法默认是被public abstract修饰的，变量是public static final修饰的。接口需要被其他类实现，这些实现可以有不同的行为。 接口和抽象类的区别 不同点： 抽象类（用abstract修饰的类）中可以有抽象方法和普通方法（没有方法体的方法称为抽象方法），接口中的方法全是抽象方法。抽象类中可以有构造方法，接口中没有。抽象类可以有普通成员变量，接口中没有。抽象类在代码实现上发挥作用，接口主要是定义项目模块之间的通信。一个类只能继承一个抽象类，一个接口可以被多个类实现。抽象类可以提供某些方法的部分代码的实现，接口不行，向一个抽象类加入一个新的具体方法时，它的所有子类都自动有了这个新方法，而接口不行，接口中加入了新方法（非private和static方法），其实现类（非抽象类）必须重写这个新方法。 相同点： 都不能实例化对象，子类必须实现抽象类或者接口的全部抽象方法，否则子类也必须定义为抽象类。 重载、重写/覆盖 重载：参数列表不同（个数、顺序、类型），方法名相同，在同一类中。 重写/覆盖：参数列表相同，方法名相同，在子类中，子类的方法修饰符权限必须高于父类，抛出的异常必须比父类范围小。 父类的静态方法能否被子类重写？不能，重写只适用于实例方法，如果子类中有和父类相同签名的静态方法，子类这个方法就会被隐匿，子类只能调用父类的这个静态方法。 不可变对象指对象一旦创建就不能被改变，任何修改都会创建一个新的对象，如String，Integer等包装类。 静态变量和实例变量的区别 静态变量又称为类变量，存在于方法区，程序加载类的字节码时就会给静态变量分配空间，可以直接用类名调用。实例变量在创建实例对象时才被分配空间，实例变量本身存放在堆内存中（动态分配，速度慢），其引用存放在栈中（大小固定，速度快） Java创建对象的几种方式 采用new 通过反射 采用clone 通过序列化机制其中new方式是耦合度最高的，尽量少用new创建对象。 switch中能否用String做参数jdk1.7之后可以。switch不能用在long上。 String s1=”ab”,String s2=”a”+”b”,String s3=”a”,String s4=”b”,s5=s3+s4,那么s2=s5返回什么？false，编译过程中，编译器会将s2优化为”ab”,会将其放置在常量池中，s5则是被创建在堆区，相当于s5=new String(“ab”);ps:Java中字符串的连接（+）实际上都是使用StringBuilder的append()方法，(+)本质上就是创建了StringBuilder对象进行append操作，然后将拼接后的StringBuilder对象toString方法成String对象。 String 对象的intern()方法。intern()方法会首先从常量池中查找是否存在该常量值，如果常量池中不存在，则先在常量池中创建，如果已经存在则直接返回。 创建了几个对象 String str = new String(“abc”);创建了几个对象，常量池有abc字段是1个，常量池没有”abc”字段则是2个。 String str=“abc”;创建了几个对象（如果常量池里面已经有对象了就是0个。如果没有就是1个）; new String(“abc”).intern();创建了几个对象（如果常量池里面已经有该字符串对象了就是1个，如果没有就是两个） Java中==和equals()的区别？equals()和hashCode()的区别？ ==是运算符，比较两个变量是否相等，equals()是Object类的方法，比较两个对象是否相等（默认的是比较两个对象的地址，和==结果一样。 hashCode()也是Object类的方法，返回一个哈希值，若两个对象的的equals()是相等的，那么调用hashCode()一定返回相同的哈希值；若equals()比较不相等，hashCode()不一定相等；hashCode()相等，equals()不一定相等；hashCode不等，equals()一定不等。ps:Java规范：使用equals()判断两个相等的对象，必须具有相等的equals()方法，所以重写equals()方法时，一定要重写hashCode()方法。将对象放入集合中先判断集合中是否有此对象的hashCode()，没有再equals()比较。 a+=b 和 a=a+b+=会隐式强转结果类型。 short s1=10; s1=s1+1;错误，s1+1会将结果转为int类型 &amp;和&amp;&amp;&amp;是位操作，&amp;&amp;是逻辑运算符，&amp;&amp;具有短路特性。 内部类就像是独立的实体，提供了更好的封装，除了外围类，其他类都不能访问。 final、finalize、finally final修饰变量不可变，修饰类不能被继承，修饰方法不能被重写；final在构造函数中修饰变量，初始化一个对象并赋值给一个引用变量之前，final域会先被初始化；在获取一个对象的引用之后，再读取其final域的值 finalize方法是Object对象的方法，是对象在被回收之前调用的 finally是与try、catch一起用于处理异常的，一定会执行 浅拷贝和深拷贝 浅拷贝只复制对象，而不复制对象中所引用的对象深拷贝会把对象和其所有引用的对象都复制一遍 static 静态变量 静态方法 静态代码块（多用于初始化） 静态内部类 静态导包 eg: import static java.lang.Math.*; 则此类中就可以用Math类的方法了 使用什么类型表示价格？不是特别关心性能和内存，用BigDecimal对象，加减乘除操作分别为add(BigDecimal value)、substruct(BigDecimal value)、multiply(BigDecimal value)、divide(BigDecimal value)。 byte[]数组和String转换,并设置编码.getBytes(“UTF-8”);new String(b1,”UTF-8”); 可以将int转换成byte类型吗？可以，int是32位，byte是8位，强转会丢失高24位。 异常 error：虚拟机相关的异常，如系统崩溃、内存不足、方法调用栈溢出 Exception： CheckedException编译时异常：用try/catch或throw、throws处理 RuntimeException运行时异常：java.lang.NullPointExcetion 空指针异常java.lang.ClassNotFoundExcetion 找不到指定的类java.lang.NumberFormatException 字符串转换数字异常java.lang.IndexOutOfBoundException 数组角标越界异常java.lang.ClassCastException 数据类型转换异常 throw 用在方法体内，抛出一个实例 throws 用在方法声明后，由该方法调用者处理异常，表示会出现一种异常的可能性 类的实例化顺序 父类的静态变量和静态代码块（书写顺序） 子类的静态变量和静态代码块（书写顺序） 父类的成员变量赋值 父类类的构造代码块 父类的构造方法 子类的构造代码块 子类的构造方法 jdk1.8新特性 Lambda表达式，允许像对象一样传递匿名函数 Stream API,充分利用多核CPU，可以写出更简洁的代码 Date和Time API，使日期、时间更稳定、简单。 接口中可以有静态方法和默认方法 重复注释，可以在一个类中多次使用同一个注释 反射知道一个类的类名或者它的一个实例对象，就能得到这个类的所有的方法和变量的信息反射创建实例： 类名.class 对象.getClass(); Class.forName(“com.类名”)； 反射中Class.forName()和classLoader的区别Class.forName()除了将.class文件加载到JVM中，还会对文件进行解释，执行类中的static块 关于JVM类加载器 BootStrap，启动类加载器/核心类加载器，有C++实现，加载JAVA_HOME/lib（eg:rt.jar) ExtClassLoader,扩展类加载器，加载JAVA_HOME/lib/ext 的jar包 APPclassLoader，应用程序加载器，负责用户类路径（ClassPath）配置下的类库 自定义类加载器 类加载器的双亲委派模型：一个类加载器收到类加载请求时，自己先不加载，将请求委托给父加载器处理，父加载器无法处理，继续向上请求，直到BootStrap加载器也无法加载，才尝试自己加载。拒绝修改java源码，保证了Java程序的稳定性。 JVM内存区域 线程共享：Heap堆、Method Area方法区 非线程共享：VM Stack虚拟机栈、Native Method Stack本地方法栈、Program Counter Register程序计数器 操作码（方法本身）：Stack操作数（局部变量）：基本类型保存在Stack；对象类型，引用地址保存在stack,内容保存在Heap中类变量（静态变量）：程序一加载就在Heap中分配内存，但将内存地址分配到stack中 栈通常比堆小 java中为什么会有GC机制 安全性 减少内存泄露 减少程序员工作量 GC主要回收的内存主要回收方法区和堆内存，这两个是程序运行期间动态创建的。 JVM运行时数据区主要包括5部分： 程序计数器（Program Counter Register） 虚拟机栈（VM Stack） 本地方法栈（Native Method Stack） 方法区（Method Area） 堆（Heap） Java中的GC什么时候回收垃圾？一个对象不存在任何引用时 如何判断一个对象是否应该被回收（即对象没有被引用）？ 引用计数法（存在互相引用而无法GC的问题） 对象可达性分析算法（常用） 垃圾回收算法 标记-清除 标记-复制 标记-整理 分代回收 简单解释一下垃圾回收Java中垃圾回收最基本的做法是分代回收，内存中的区域一般被划分为3个世代：年轻、年老、永久。对象根据存活时间保存在对应的世代中。 多线程进程和线程进程是程序运行和资源分配的基本单位线程是CPU调度和分派的基本单位 进程在执行过程中拥有独立的内存单元，而多个线程可以共享内存资源 守护线程守护线程为用户线程提供服务，eg:GC线程程序执行完毕，JVM会等待非守护线程运行完毕后关闭，而不会等待守护线程。 线程切换CPU控制权由一个正在运行的线程切换到另一个就绪并等待获取CPU执行权的线程 创建线程的方式 继承java.lang.Thread类 实现java.lang.Runnable接口第二种方式的优点：Java不支持多继承，实现接口后还可以再继承其他类；继承整个Thread类的开销更大 Thread类的start()方法和run()方法线程调用start()方法,表示此线程启动了，此时java虚拟机会调用此线程的run()方法；start()方法真正实现了多线程运行，而无需等待run()方法执行完毕而直接继续执行下面的代码。run()方法只是Thread的一个普通方法，只执行主线程这一个线程，而且要等待run()方法执行完毕，才继续执行下去，这样就达不到写线程的目的了。 怎么检测一个线程是否持有对象监视器？Thread类中的静态方法holdsLock(Object obj),当且仅当对象的监视器（即锁）被当前线程持有的时候才会返回true。 Runnable接口的run()方法和Callable接口的call()方法区别run方法无返回值，call方法可以返回装载有返回结果的Future对象，Future对象调用get()方法可以获得该返回值。两个方法结束后线程会自动结束； Future是个接口，因此可以使用它的实现类FutureTaskpublic interface RunnableFuture extends Runnable , Futurepublic class FutureTask implements RunnableFuture sleep()和wait()方法的区别 sleep()是Thread类的方法，wait()是Object类方法 调用sleep()方法，对象不会释放线程锁，wait()方法会释放对象锁 sleep()睡眠后不会让出系统资源，wait()会让其他线程占用CPU sleep(milliseconds)需要指定一个时间，时间一到自动唤醒，wait()方法配合notify()或notifyAll()使用;wait()和notify()方法必须在同步块中被调用，wait会立即释放锁，notify则会在同步块执行完了再释放。 为何wait(),notify(),notifyAll()方法不放在Thread类中？这三个方法都是对锁进行操作，Java提供的锁是对象级的，而不是线程级的，所以把他们定义在Object类中。 如何在两个线程间共享数据？共享对象即可，通过wait/notify/notifyAll、await/signal/signalAll进行唤醒和等待，阻塞队列BlockingQueue就是为共享数据设计的 如何正确使用wait()?12345synchronized (obj)&#123; while(条件不成立)&#123; obj.wait(); &#125;&#125; 线程局部变量ThreadLocal属于线程自身所有，每个Thread里面都维护了一个ThreadLocal.ThreadLocalMap把数据进行隔离，不在多个线程间共享，保证了线程的安全。 生产者消费者模型的作用 通过平衡生产者的生产能力和消费者的消费能力，提升系统的运行效率 解耦，使两者联系更少，独自发展不会受到双方的制约 写一个生产者消费者队列 使用阻塞队列实现1234567891011121314151617181920212223242526//生产者public class Producer implements Runnable &#123; private final BlockingQueue&lt;Integer&gt; queue; public Producer(BlockingQueue q)&#123; this.queue=q; &#125; @Override public void run()&#123; try&#123; while(true)&#123; Thread.sleep(1000); queue.put(produce()); &#125; &#125;catch (InterruptedException e)&#123; &#125; &#125; private int produce()&#123; int n = new Random().nextInt(10000); System.out.println("Thread:"+Thread.currentThread().getId()+"produce:"+n); return n; &#125;&#125; 123456789101112131415161718192021222324//消费者public class Consumer implements Runnable&#123; private final BlockingQueue&lt;Integer&gt; queue; public Consumer (BlockingQueue q)&#123; this.queue = q; &#125; @Override public void run()&#123; while(true)&#123; try()&#123; Thread.sleep(2000); consume(queue.take());//take()方法，取走queue里排在首位的对象 &#125;catch (InterruptedException e)&#123; &#125; &#125; &#125; private consume(Integer n)&#123; System.out.println("Thread:"+Thread.currentThread().getId +"consume:"+n); &#125;&#125; 123456789101112131415//测试public class Test()&#123; public static void main(String[] args)&#123; BlockingQueue&lt;Integer&gt; queue = new ArrayBlockingQueue&lt;&gt;(100); Producer p = new Producer(queue); Consumer c1 = new Consumer(queue); Consumer c2 = new Consumer(queue); new Thread(p).start(); new Thread(c1).start(); new Thread(c2).start(); &#125;&#125; 使用wait-notify来实现12 为什么使用线程池？节省线程创建和销毁的开销，达到线程对象的重用，还可以根据项目控制并发的数量 Java中线程的调度算法抢占式，一个线程用完CPU之后，操作系统根据线程的优先级和线程饥饿情况，算出总的优先级，并分配给下一个时间片给某一个线程执行。 Thread.sleep(0)作用有时某个线程会一直获得CPU的控制权，这样可以手动触发一次操作系统重新分配时间片的操作，平衡CPU的控制权。 什么是CASCompare and Swap 比较-替换。内存值V，旧的预期值A，要修改后的值B。预期值A与内存值V相等时，将内存值修改为B，并返回true。CAS为了取到最新的值，应配合volatile变量。 volatile变量 volatile变量是一种比synchronized更轻量级的同步机制。 对非volatile变量进行读写时，系统先从内存拷贝变量到CPU缓存中；对volatile变量，系统直接从内存中读取，跳过了CPU缓存这一步。 一个线程修改了volatile变量的值，volatile能保证新值能立即同步到主内存，以及每次使用前立即从主内存刷新。 内禁止CPU指令重排序（CPU指令重排序：CPU采用了允许将多条指令不按程序规定的顺序，分开发送各相应电路单元处理） 性能：读和普通变量几乎相同，写操作较慢（因为要在代码中插入内存屏障保证处理器不发生乱序执行） 乐观锁、悲观锁乐观锁：认为线程竞争不总是发生，不需要持有锁，但是在更新数据时要判断别人有没有修改数据，一般用版本号机制和CAS算法实现悲观锁：总是认为线程会竞争，每次拿到数据都会上锁。 ConcurrentHashMap的并发度segment的大小：16，即最多可以16个线程操作ConcurrentHashMap ConcurrentHashMap的工作原理 jdk1.6中 采用分离锁的方式，没有对整个hash表进行锁定，而是局部锁定，不影响其他线程对hash表的其他地方进行访问 jdk1.8中 与1.6不同，它采用了乐观锁CAS算法，底层还是数组+链表-&gt;红黑树 多线程开发良好的实践 给线程命名 考虑使用线程池 优先使用volatile变量 优先使用并发容器而非同步容器 线程通信用高层次的并发工具，如BlockingQueue，少用wait()、notify() 最小化同步范围 集合Java中集合及继承关系 List接口有序，元素可重复实现类有： LinkedList 基于链表，增删快，查询慢，非线程安全 ArrayList 基于数组，增删慢，查询快，非线程安全 Vector 基于数组，都慢，效率低，线程安全 Set接口无序，元素不可重复，元素在集合的位置由元素的hashCode决定实现类有： HashSet 底层由HashMap实现，使用时要重写equals()方法和hashCode()方法 非线程安全 LinkedHashSet 继承于HashSet 非线程安全 Map接口无序，Key不可重复、值可以实现类有： HashMap 基于hash表的Map接口实现，非线程安全，支持null键、null值，非线程安全，基于数组+链表的存储结构，默认容量16，加载因子0.75 ConcurrentHashMap（jdk1.8) 是使用CAS来保证线程安全的，存储方式是数组+链表+红黑树，默认容量16，负载因子0.75 LinkedHashMap HashMap的子类，有序 非线程安全 HashTable 不支持null键、null值 线程安全，存储方式是链表+数组 SortMap接口下的TreeMap 能够根据键的存入记录排序 非线程安全 TreeMap ### poll()方法和remove()方法的区别两者都是从队列中取出一个元素，poll()方法取出元素失败时会返回null，remove()方法失败时会抛出异常 LinkedHashMap和PropertyQueue的区别LinkedHashMap遍历时根据元素插入的顺序，PropertyQueue是优先级队列，遍历时没有任何顺序保证 WeekHashMap和HashMap的区别WeekHashMap使用上和HashMap没有任何区别，只不过是使用了弱引用作为key，key对象没哟任何引用时，key/value就会被回收 ArrayList和LinkedList的区别 ArrayList底层的数据结构是数组，查询时时间复杂度是O(1),较快 LinkedList底层是双向循环链表,查询时时间复杂度是O(n),比较慢 ArrayList和Array的区别Array可以容纳基本类型和对象，而ArrayList只能存放对象Array可以指定大小，而ArrayList的大小是固定的 ArrayList和HashMap的大小ArrayList默认大小10个元素HashMap默认大小16个元素 如何打印数组用Arrays.toString()方法或Arrays.deepToString()//数组中还有数组，深度打印 TreeMap的实现原理红黑树实现 遍历ArrayList时如何正确移除特定值的元素 for循环遍历，使用ArrayList的remove()方法，移除了某个值后指针自动后移，for的条件又加一了，可能会忽略下一个符合条件的元素。可以再i–进行处理。 iterator迭代器遍历，使用iterator的remove()方法，next()指针逐个后移，建议使用。 关于HashMap 存储的是键值对，是线程不安全的，非Synchronize，存储比较快，可以存null值 底层是个数据结构，数组中的每一项（map.Entry）又是个链表。 通过put(key,value)存入元素，get(key)获取值，通过hash算法计算出hashcode值，通过hashCode值表示Entry在bucket位桶中存储的位置。 jdk1.8中对hashmap做了优化，当链表中结点数据超过8个，链表会转为红黑树，提高查询效率，时间复杂度从O(n)到O(logn) 遍历map集合 keySet()方法，返回Set集合 keySet,for(String key ：keySet){ key//key值} entrySet()方法，返回Set&lt;Entry&lt;Key,Value&gt;&gt;集合 entrySet,for(Entry&lt;Key,Value&gt; entry : entrySet){ entry.getKey //key值 entry.getValue //key对应的value值} IO流两种不同操作单元的流 字符流：单元是两个字节的Unicode字符，以字符或字符数组的形式读写数据，只能读写二进制文件 Reader-&gt;InputStreamReader , BufferedReader Writer-&gt;OutputStreamWriter , BufferedWriter 字节流：单元是一个字节，你能读写各种类型的数据 InputStream OutputStream 字节输入流转字符输入流，通过适配器模式，用InputStreamReader实现，该类构造器可以传入InputStream对象；同样的字节输出流转字符输出流用OutputStreamWriter。 图片、音频的传输最好用字节流，涉及到中文的最好用字符流 IO线程模型 同步：任务A依赖任务B，需要等到任务B成功完成后才能继续运行；能够保证程序的可靠性。 异步：任务A依赖任务B，通知任务B需要完成什么什么工作，任务A可以继续运行，不论任务B是否已经完成；能够提高程序的性能。 阻塞：CUP停下来等待这个线程完成后才继续运行。 非阻塞：CUP去做其他工作，当这个完成后再继续完成后续的操作；会提高CPU的利用率，但会增加线程切换的消耗。 BIO和NIO BIO，同步阻塞IO，服务器实现模式是一个连接对应一个线程，当客户端有连接请求时服务器就会启动一个线程进行处理，如果连接不做任何事就会造成不必要的开销，可用线程池优化。 NIO，同步非阻塞IO，服务器实现模式是一个请求对应一个线程，客户端发送的连接请求都会注册到多路复用器上，多路复用器Selector轮询到连接有IO请求时，才启动一个线程进行处理。 reactor模式反应器模式（事件驱动模式），主要有两部分组成BOSS和WORK，BOSS就像老班，拉活、谈项目，然后下发都worker去处理。处理并发请求，如果有内容进来会自动通知我们，不必开启多个线程死等了。 IO最佳实践 使用有缓冲的IO，不要单独读取字节或字符 尽量不用BIO 在finally中关闭流 使用内存映射文件比IO读写速度更快 网络编程http响应码 200 OK 客户端相应成功 301 Moved Permanently 代表永久性转移，会修改url地址 302 found 代表暂时性转移，不会修改url地址 400 Bad Request 客户端请求有语法错误，不能被服务器所理解 401 Unauthorized 请求未授权 403 Forbidden 服务器收到请求，但拒绝提供服务 404 Not Found 请求的资源不存在 eg:输入了错误的url 500 Internal Server Error 服务器发生了不可预知的错误 503 Server Unavailable 服务器当前不能处理客户端的请求，一段时间后可能会恢复 forword和redirect forword是服务器行为，转发，地址栏不变，可共享request的数据，一般用于用户登录 redirect是客户端行为，重定向，地址栏改变，不可共享数据，一般用于用户注销 get和post get：把请求的数据附在url之后（即http协议头中），url和数据用?分隔，参数之间用&amp;相连；是form表单的默认提交方式；提交的数据会在浏览器显示出来；不可用于提交二进制数据，如上传文件；对数据大小有限制，最多1024字节； post：把请求的数据放在http包的包体中；比get方式安全性高。 Cookie和Session Cookie存于客户端，Session存于服务器 Cookie只能存储String类型的对象，Session可以存储任意类型的Java对象 重要信息保存在Session（如登陆信息），需要保留的信息存在Cookie（如购物车） Session的实现依赖于Cookie，Session的唯一标识sessionId存放是在客户端上的 TCP和UDP TCP是基于连接的，UDP是无连接的 TCP是基于字节流的，UDP是数据报文模式 TCP多用于对数据准确性比较高的网路服务如文件传输、邮件发送；UDP多用于要求速度比较快的网路服务，如网络视频、网络电话。 重视数据的安全用TCP，否则用更高效的UDP TCP的三次握手目的：建立TCP连接通道，确认双方都有收发数据的能力。 SYN：SYNchronization，请求建立连接，并且设定其序列号（seq）的初始值。FIN：希望断开连接。ACK：确认，一般置为1。SYN、ACK表示标志位，要么是1要么是0；seq、ack表示序号。 第一次握手：客户端发送SYN包(seq=x)到服务器，进入SYN_SEND状态，等待服务器确认； 第二次握手：客户端收到SYN包，通过发送ACK(ack=x+1)确认客户的SYN，同时也发送一个自己的SYN(seq=y)包，即SYN+ACK包，此时服务器进入SYN_RECV状态； 第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。 TCP的四次挥手目的：断开连接主动关闭方：A 被动关闭方：B 第一次挥手：A发送一个FIN，用于关闭A到B的数据传送，但此时A还可以接受数据。进入FIN_WAIT_1(终止等待)状态； 第二次挥手：B收到FIN后，发送确认报文ACK（序号为收到的序号+1，FIN也会占一个序号）给对方，此时进入CLOSE_WAIT（关闭等待）状态； 第三次挥手：B发送一个FIN，用于关闭B到A的数据传送，进入LAST-ACK（最后确认）状态，等待A确认（即等待接收A发送的ACK包）； 第四次挥手：A收到FIN后，发送一个ACK给B，进入TIME-WAIT（时间等待）状态，必须经过2MSL（最长报文段寿命）的时间后，当A撤销相应的TCB后，才进入CLOSED状态。B收到A发送的ACK，会立即进入CLOSE状态。 粘包问题原因： 发送端需要等缓冲区满才将数据发送出去 接收端不及时接收数据包，造成多个包接收解决方案： 由发送方引起的，TCP提供了强制数据立即传送的指令push，不必等到缓存区满了再发送。（影响效率） 由接收方引起的，优化程序设计，设置接收进程优先级。（频率较高时会来不及接收） 由接收方引起的，将数据按结构字段，控制分多次接收，然后合并。（效率低，不适合实时应用） 接收方创建一个预处理线程，预处理数据，将粘连的包分开。 解决TCP无保护消息边界问题 发送固定长度的消息。 将消息和消息的长度一并发送。 用特殊标记来区分消息间隔。 JDBCjdbc最佳实践 优先使用批量操作来插入和更新数据 使用PreparedStatement来避免SQL注入 通过列名来获取结果集 使用数据连接池 SpringSpring由那些模块组成？ Core module bean module Context module Expression language module JDBC module ORM module OXM module Java Message Service module Transaction module Web module Web-Servlet module Web-Struts module Web-Portlet module IOC容器Inversion of Control,控制反转。负责创建对象、通过DI（依赖注入）管理对象、装配对象、配置对象，并管理这些对象的生命周期。优点：把应用的代码量降到最低，更容易测试，最小的侵入性实现松散耦合。这里的解耦合指的是接口和实现类之间的解耦，在实现类中声明引用型属性，并添加它的setter方法，直接用引用型属性调用实现类。 DI依赖注入Dependency Injection，IOC容器初始化bean的实例对象后，会对对象的属性进行初始化，这个过程就是依赖注入两种方式： 构造器注入通过容器触发一个类的构造器来实现，构造器中有一系列参数，每个参数代表对其他类的依赖。建议用于强制依赖 setter方法注入容器通过调用无参构造器或无参静态工厂方法实例化bean之后，调用该bean的setter方法实现属性的注入。建议用于可选依赖 AOP面向切面编程把应用业务逻辑和系统服务（如日志、事务管理）分开，底层使用动态代理方式实现 连接点(joinPoint)：类里面可以被增强的方法 切入点(Pointcut)：类里面实际增强的方法 通知/增强(Advice)：实际增强的逻辑功能1. 前置通知(before)：在方法前执行 2. 后置通知(after)：在方法后执行 3. 最终通知(after-returning)：后置之后执行 4. 异常通知(after-throwing)：方法出现异常是执行 5. 环绕通知(aroud)：分别在方法执行之前和之后执行 切面(Aspect)：把增强应用到切入点的过程 引入(Introduction)：引入新的接口以及一个对应的实现到任何被代理的对象 目标对象(Target Object)：被一个或多个切面所通知的对象，又叫被通知对象 织入(Weaving):把增强应用到目标对象，来创建新的代理对象的过程。 Spring beans是被Spring IOC容器中配置的元数据初始化并管理的对象，不是线程安全的。 如何给Spring提供配置元数据？ XML配置文件 基于注解 基于Java的配置 bean的作用域 singleton 只有一个实例 prototype 一个bean可以有多个实例 只在基于Web的Spring ApplicationContext情形下有效 request 每个请求都会创建一个bean session 在一个Http Session中，一个bean定义对应一个实例 global-session 在一个全局的Session中，一个bean定义对应一个实例 bean的生命周期 有两种：Bean工厂对bean的管理、上下文对bean的管理 （由beanFactory读取bean的定义文件）实例化bean 依赖注入bean的属性 如果bean实现了org.springframework.beans.factory.BeanNameAware接口，则执行其setBeanName()方法 如果bean实现了org.sprignframework.beans.factory.BeanFactoryAware接口，则执行其setBeanFactory()方法 如果bean实现了ApplicationContextAware接口，则执行其setApplicationContext()方法 如果bean实现了org.springframework.beans.factory.BeanPostProcessors接口，则Bean在初始化之前都会执行这个实例的postProcessBeforeInitialization(Object obj, String s)方法，即前置增强方法。 如果bean实现了InitializingBean接口，Spring将调用它们的afterPropertiesSet()方法。同样，如果bean使用了init-method声明了初始化方法，则调用它。 如果bean实现了org.springframework.beans.factory.BeanPostProcessors接口，则Spring将调用它的postprocessAfterInitialization(Object obj, String s)方法 此时bean已经准备就绪，可以被应用程序使用了，将一直驻留在应用上下文中，知道应用上下文被销毁 如果bean实现了DisposableBean接口，Spring将调用它们的destroy()方法。同样，如果bean使用了destroy-method声明了销毁方法，则调用它 注解 开启注解扫描：&lt;context: component-scan base-package=””&gt;&lt;/context: component-scan&gt; @Configuration 功能同@Component，但是所有带@bean的方法都会被动态代理，所以调用该方法返回的都是同一个实例 @Component 用于类上，实例化bean，相当于配置文件中的 @Bean 表示此方法会返回一个对象，作为一个bean注册进上下文 @Required 用在setter方法上，表明bean的属性，必须在配置的时候设置 @Autowrited 以类型方式依赖注入属性，可用在构造器、Setter方法及其他普通方法上，如果方法没有bean参数，将会抛出异常，如果有多个bean，则抛出异常没有表明指定哪个bean进行自动装配。 动态代理 jdk动态代理要求被代理的类必须实现接口，利用反射技术，调用了Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h) 方法生成字节码，动态创建一个代理类。 cglib动态代理，可以在运行期扩展Java类和实现Java接口，底层实现是通过ASM字节码处理框架来转换字节码并生成新的class（被代理类的子类）；速度上比jdk动态代理要快。 Spring都用到了哪些设计模式？ 工厂模式：BeanFactory就是简单工厂模式，用来创建对象实例 单例模式：Bean默认为单例模式 代理模式：Spring的AOP功能用到了jdk的动态代理模式和cglib字节码生成技术 模板方法：用来解决代码重复的问题，如RestTemplate，JmsTemplate，JdbcTemplate 观察者模式：定义对象一对多的依赖关系，当一个对象的状态发生改变时，其他对象都会得到通知被制动更新，在Spring中listener的实现，如ApplicationListener SpringMVC实现了MVC设计模式的请求驱动类型的轻量级框架，实现了把请求参数和业务对象绑定。 SpringMVC的流程 用户发送请求至前端控制器DispatcherServlet 前端控制器DispatcherServlet接收到请求后调用处理器映射器HandlerMapping，请求获取处理器Handler 处理器映射器HandlerMapping根据url找到具体的处理器Handler，生成处理器对象以及处理器拦截器HandlerIntercepter（如果有则生成），一并返回给前端控制器DispatcherServlet 处理器映射器HandlerMapping调用处理器适配器HandlerAdapter 处理器适配器HandlerAdapter经过适配后调用具体的处理器Handler 处理器Handler执行完成返回ModelAndView 处理器适配器HandlerAdapter将ModelAndView返回给前端控制器DispatcherServlet 前端控制器DispatcherServlet将ModelAndView传给视图解析器ViewResolver 视图解析器ViewResolver解析后返回具体的View 前端控制器DispatcherServlet对View进行渲染视图（将模型数据填充到视图中） 视图对象View将渲染后的视图返回给前端控制器DispatcherServlet 前端控制器DispatcherServlet响应用户 SpringMVC和Struts2的区别 SpringMVC的入口是一个servlet，即前端控制器；Struts2入口是一个filter过滤器。 SpringMVC是基于方法开发的，一个url对应一个方法，请求参数传递到方法的形参，可以是单例也可以是多例（建议单例）；Struts2是基于类的，传递参数是通过类的属性，只能设计为多例。 SpringMVC通过参数解析器解析request的请求内容，并赋值给方法的形参，将数据和视图封装成ModelAndView对象，最后将ModelAndView对象中模型数据通过request域传输到页面；Struts2是通过值栈存储数据请求和响应的数据，通过OGNL存取数据。 SpringMVC的常用注解 @Controller 控制器的注解，不能用别的注解替代 @RequestMapping 用于映射请求的url @RequestParam GET和POST请求传的参数会自动转换赋值到@RequestParam 所注解的变量上，例：@RequestParam(value=”username”)String username @RequestBody 常用来处理Content-Type为application/json, application/xml的数据；用来接收前端传递（不能用GET请求）给后端的json字符串中的数据（请求体中的数据），将json数据转为Java对象。 @ResponseBody 将Controller下的方法返回的Java对象转换为json响应给客户 SpringMVC是怎么和AJAX交互的通过Jackson框架可以把直接转化成js可识别的json对象 加入Jackson.jar 配置json的映射 在接收Ajax的方法里面可以直接返回Object、List数据，但方法前要加上@ResponseBody注解 SpringMVC用什么对象从后台向前台传递数据通过ModelMap对象，可以在这个对象里面用put方法，把数据添加到里面，前台可以通过EL表达式取出 注解原理注解本质是一个继承了Annotation的特殊接口，其具体实现类是Java运行时生成的动态代理类。我们通过反射获取注解时，返回的是Java运行时生成的动态代理对象。通过代理对象调用自定义注解的方法，会最终调用AnnotationInvocationHandler的invoke方法。该方法会从memberValues这个Map中索引出对应的值。而memberValues的来源是Java常量池。 Mybatis${}和#{}的区别${}是字符串替换；#{}是预编译处理Mybatis在处理${}时，就是把${}替换成变量的值；在处理#{}时，就是讲SQL中的#{}替换成？并调用PreparedStatement的set方法来赋值使用#{}可以有效防止SQL注入，提高系统安全性 当实体类的属性名和表中的字段名不一样，怎么办？ 在查询的SQL语句中定义字段的别名，使其和实体类的属性名一致 123&lt;select id=”selectorder” parametertype=”int” resultetype=”me.gacl.domain.order”&gt; select order_id id, order_no orderno ,order_price price form orders where order_id=#&#123;id&#125;;&lt;/select&gt; 使用标签来映射字段名和实体类属性名一一对应 123456789101112&lt;select id="getOrder" parameterType="int" resultMap="orderresultmap"&gt; select * from orders where order_id=#&#123;id&#125;&lt;/select&gt; &lt;resultMap type=”me.gacl.domain.order” id=”orderresultmap”&gt; &lt;!–用id属性来映射主键字段–&gt; &lt;id property=”id” column=”order_id”&gt; &lt;!–用result属性来映射非主键字段，property为实体类属性名，column为数据表中的属性–&gt; &lt;result property = “orderno” column =”order_no”/&gt; &lt;result property=”price” column=”order_price” /&gt;&lt;/reslutMap&gt; 在Mybatis全局配置文件中开启驼峰命名，注意：前提是数据库中的字段是按驼峰命名规则的两个单词之间加“_”命名的 12345&lt;settings&gt; &lt;!-- 开启驼峰命名规则，可以将数据库中的下划线映射为驼峰命名 例如：user_name可以映射为userName --&gt; &lt;setting name="mapUnderscoreToCamelCase" value="true" /&gt;&lt;/settings&gt; 通常会有一个dao接口与一个xml映射文件相对应，dao接口的工作原理是什么，其中的方法能重载吗？dao接口即Mapper接口。接口的全限名就是映射文件中的namespace的值；接口的方法名就是文件中Mapper的statement的id值；接口方法内的参数就是传递给sql语句的参数 Mapper接口没有实现类，当调用接口中的方法时，接口全限名+方法名拼接字符串作为key值，可唯一定义一个MapperStatement。（Mybatis中每个&lt;select&gt;、&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt;标签都会被解析为一个MapperStatement对象） Mapper接口里的方法不能重载，因为Mybatis使用的是全限名+方法名的保存和寻找策略。 工作原理：Mybatis运行时会使用JDK动态代理为Mapper接口生成代理对象，代理对象会拦截接口的方法，然后执行MapperStatement所代表的sql，然后将sql执行结果返回。 Mybatis动态sql以标签的的形式编写sql语句，并动态拼接sql语句。有9中标签： trim where set foreach if choose when otherwise bind Mybatis延迟加载Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指一对一，collection指一对多查询；可以配置是否启用延迟加载：lazyLoadingEnabled=true/false 默认为false原理是动态代理形式实现 Spring Boot数据库关系型数据库和非关系型数据库关系型数据库： 支持事务的一致性 支持SQL，可以进行复杂的数据查询 非关系型数据库： 基于键值对，数据没有耦合性，容易扩展 无需SQL层的解析，读写性能很高 可以键值对形式、文档形式、图片形式存储 可用于高并发读写，海量数据的存储和访问，高扩展性。 select语句执行顺序 from where group by 聚合函数 having 计算所有的表达式 select字段 order by对结果集进行排序 为什么用自增列作为主键？如果使用非自增主键，MySQL每次插入新纪录时都会为找到合适的位置而移动其他数据，增加了开销，频繁的移动和分页操作会造成大量的内存碎片，得到不够紧凑的索引结构，不得不用optimize table来重建表来优化和重建页面 OPTIMEZE TABLE当删除数据时，已删除的数据的存储空间和索引位会空在那里等待新的数据弥补空缺，没有数据及时填补空缺会造成资源的浪费，optimeze可以重建表并优化填充页面 存储过程是一个预编译的sql语句，允许模块化，一次创建多次调用；如果某次操作需要执行多次SQL语句，使用存储过程速度更快。 触发器是一种特殊的存储过程，用于保证数据的完整性和一致性。 视图视图是一种虚拟表，通常是一个表或者多个表的行或列的子集，可以进行增、改、查操作，其修改会影响基本表，相比于多表查询，使用视图更容易。 游标是对查询出来的结果集作为一个单元进行处理，游标可以定位在该单元的特定行，从结果集的当前行检索一行或多行，对当前行进行修改处理。一般是需要逐条处理数据时用游标。 drop、truncate、delete区别 drop是删除表 truncate是删除表中数据，下车添加是自增id又从1开始 delete是删除表中数据，可以加where条件 临时表临时表只对当前连接可见，当关闭连接时，所有临时表会被删除，释放内存；临时表和普通表的操作一样，只不过多个关键字TEMPORARY 数据表的连接方式 内连接(inner join)：两张表都有的才能显示出来。 左连接(left join)：左边的表数据都显示出来，右边的表只显示共同的部分，没有的补空。 右连接(right join)：右边的表数据都显示出了，左边的表只显示共同的部分，没有的补空。 外/全 连接(outer join)：两张表数据都显示出来，并去除重复的那部分，没有的补空；MySQL不支持全连接，可用 左连接+右连接+去重 实现。 左连接不包含内连接：只查询左边有的数据，共同的查不出来。 右连接不包含内连接：只查询右边有的数据，共同的查不出来。 外/全 连接不包含内连接：只查询两边不同的数据。以上7中连接如下图所示。 自然连接(natural join):两张表中必须有相同的属性列，无需添加连接条件 笛卡尔积连接：MySQL默认的连接方式，一个表里的记录要分别和另一个表里的记录匹配成一条记录。左表3条记录，右表4条数据，则查询的结果有3*4条数据 char和varchar char长度不可变，会有内存浪费；varchar长度可变 char速度更快 char对英文字符占一个字节，中文字符占两个字节；varchar对英文和中文都占两个字节 索引 索引文件以B树的格式保存 索引可以加快数据的检索速度 可以加速表与表之间的连接 在唯一、不为空、经常被查询的字段适合建索引 索引可以提高select的效率，但同时也降低了insert和update的效率，因为insert或update时可能会重建索引聚集索引、非聚集索引 聚集索引：表记录的排列顺序和索引的排列顺序一致，查询效率快 非聚集索引：排序不一致 数据库的隔离级别 Read Uncommitted 读未提交，一个事务可以读取到另一个未提交的事务。可能会出现脏读 Read Commited 读已提交（SQL Server 、Oracle默认），一个事务要等另一个事务提交后才能读取数据。可能会有不可重复读问题，即一个事务中出现了其他事务对该事物的update操作，导致两次相同的查询返回不同的结果。 Repeatable read 重复读（MySQL默认），开启事务后不再允许修改（update）操作。可能会出现幻读，insert问题，一个事务按相同的查询条件查询两次，结果不一样，中间被insert了新数据 Serializable 序列化/串行化，事务的最高隔离级别，可以有效避免脏读、不可重复读、幻读，但效率低下，消耗数据库性能 存储引擎 MyISAM：易于管理，能够快速读取，适用于频繁查询的应用，适合小数据、小并发。 InnoDB: 支持事务、外键等特性、数据行锁定。空间占用大，不支持全文索引，适合查询和更新比较多的应用、适合大数据、大并发。也是MySQL默认的存储引擎 高并发下，如何做到安全的修改一行数据？ 使用悲观锁 写一个队列 SQL优化 当只要一行数据时，用limit 1；//这样找到一条数据后就会停止搜索了 用not exists 代替not in；//not exists用到了建立的索引的作用，not in会每条记录进行比较 尽量不采用不利于索引的操作，如not in，in ，is null，is not null，&lt;&gt;等。 避免在where语句上进行null值判断 避免select * from table，用具体的字段表示 limit的基数比较大是用between and代替 某个字段总要拿来搜索就为其建立索引：alert table tableName add index (字段名) Redisredis是什么？是开源的由C语言编写，支持网络、可基于内存也可持久化的日志型、key-value数据库。 redis有哪些使用场景？ 数据高并发的读写 海量数据的读写 对扩展性要求较高的数据 redis有哪些功能？ 数据持久化 数据缓存 分布式锁 支持事务 支持消息队列 redis支持的数据类型有哪些？ String List hash set zset redis为什么是单线程的？因为redis是基于内存的操作，性能比较高，可以轻松处理每秒几十万的请求，redis要注意的是机器内存和网络宽带，而不必在意CPU，况且多线程会带来其他不必要的麻烦。 什么是缓存穿透？查询一个不存在的数据时，由于缓存中没有就会从数据库中查询，查不到的数据不会写入缓存，导致每次请求都要从数据库中查询，造成缓存穿透。 解决方案：把查询出的空结果放到缓存中，但它的过期时间很短，最长不超过5分钟 NettyNetty的特点Netty是一个基于NIO框架，异步、事件驱动的网络通信框架，它大大简化了TCP、UDP服务器的网路编程。 高并发：基于NIO(NonBlocking I/O,非阻塞IO) 传输快：具有零拷贝特性，减少了不必要的内存拷贝，传输更快 封装好：封装了NIO操作的很多细节，提供了易于使用的调用接口 功能强大：预置了多种编解码功能，支持多种主流协议 Netty的流程 创建客户端和服务器的启动类对象BootStrap和ServerBootStrap 创建多线程事件循环器，bossGroup线程和workerGroup线程，并将两个线程关联起来。bossGroup线程用于创建、连接、绑定socket，然后把这些socket传给workerGroup线程池。ServerBootStrap监听的一个端口对应一个bossGroup线程。 指定Channel的类型为NIOServerSocketChannel 指定ChannelHandler，通过匿名内部类ChannelInitializer类，重写initChannel方法，来配置ChannelHandler，并提供一个ChannelPipeline把ChannelHandler加入到ChannelPipeline中。 异步阻塞方式绑定服务器端口，并启动去接收进来的连接。 关闭启动类对象（调用shutdownGracefully()方法会在线程执行完毕后再退出）。 Netty的零拷贝包含三个方面： Netty发送和接收ByteBuffer采用直接缓冲器(Direct Buffers)，使用堆外直接内存进行socket读写，省去了传统方法中堆内存(Heap Buffers)拷贝数据到直接内存这个步骤。 Netty采用了组合Buffer对象，可以聚合多个ByteBuffer对象，可以像操作一个Buffer对象一样对组合Buffer进行操作，避免的传统的通过内存拷贝的方式将多个Buffer组合成一个Buffer Netty的文件传输采用了transferTo方法，可以直接将文件缓冲区的数据发给目标channel，避免了循环write的方式导致内存拷贝问题 Netty和Tomcat的区别Tomcat是基于http协议的，而Netty可以自己解码编码字节流，自定义各种协议。 Netty的重要知识 Channel：传入和传出数据的通道，可打开和关闭 EventLoop：处理IO操作的多线程事件循环器，将每个Channel注册到一个EventLoop中 ChannelPipeline：是Channel的数据管道，也保存了与Channel相关的ChannelHandler，可动态修改，有丰富的API以响应入站和出站（客户端–&gt;服务器）事件 ChannelHandler：处理入站和出站数据的容器，ChannelHandler被添加到ChannelPileline时，会被分配一个ChannelHandlerContext。 ChannelHandlerContext：代表了ChannelHandler和ChannelPileline之间的绑定，可以获取底层的Channel，但主要是用于写出站数据 ChannelFuture：异步操作结果，其addListener()方法注册了一个ChannelFutureListener，以便在某个操作完成（无论是否成功）时得到通知。 回调：当一个新的连接已经被建立时，ChannelHandler 的 channelActive(ChannelHandlerContext ctx)回调方法将会被调用。 ChannelRead(ChannelHandlerContext ctx，Object msg)：服务端每当从客户端收到新的数据时，被调用。 Netty两种发送消息的方式 直接写入到Channel；消息会从ChannelPipeline的尾端开始流动。 写入与ChannelHandler的相关联的ChannelHandlerContext对象中；消息会从ChannelPileline中的下一个ChannelHandler中开始流动。 Active MQ端口号8161和61616默认配置下会启动这两个端口，8161是自带的管理后台的端口，61616是供Java用的服务端口 ActiveMQ的流程 传入IP和端口号创建一个连接工厂对象 使用连接工厂创建一个连接 开启连接 使用连接创建会话对象 使用会话对象创建目标对象（包括一对一queue或者一对多topic），并通过目标对象创建生产者对象 使用会话对象创建消息对象 使用生产者对象发送消息 关闭资源（连接对象、会话对象、生产者对象） Shiro各个组件 Subject：代表”当前用户”，所有的Subject都绑定到SecurityManager，与Subject所有的交互都交由SecurityManager，SecurityManager才是真正的执行者 SecurityManager：安全管理器，相当于SpringMVC的DispatcherServlet，是Shiro的核心部分，负责认证、授权、会话、缓存的管理 Realm域：域，充当了Shiro与数据间的连接器DAO SessionManager：会话管理，管理会话生命周期的组件 Shiro的运行流程 程序代码调用Subject的API 所有的Subject都绑定到SecurityManager，与Subject的交互都交由SecurityManager完成 SecurityManager从Realm域中获取安全数据（用户、角色、权限）进行操作。 Shiro的四种权限控制方式 url级别权限控制 方法注解权限控制 页面标签权限控制 代码级别权限控制 Git分布式版本控制系统，由Linus用C语言编写，本地仓库包含历史库和代码库 Workspace：工作区 Index/Stage：暂存区 Repository：本地仓库区 Remote：远程仓库 常用指令12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758git fetch 从远程获取最新版本到本地，不会mergegit merge 合并某分支到本分支git pull 相当于前两个的功能文件操作：pwd 显示当前目录mkdir 创建新文件夹cd 转换的此文件夹ls -ah 展示当前文件(夹)类别，包括隐藏文件git init 把当前目录变为Git可以管理的仓库rm file.txt 删除文件file.txt把修改后的文件提交到仓库：1. git add file.txt 把对文件的修改放到暂存区2. git commit -m "说明" 把暂存区的修改一次性全部提交到分支git status 查看仓库的修改状态git diff 查看修改情况，即工作区和暂存区的区别git log 查看提交历史记录git log-pretty=oneline 版本回退：git reset --hard HEAD^ 回退到上一个版本git reset --hard HEAD~100 回退到前100个版本git reset --hard HEAD&lt;版本号前几位&gt; 回退到此版本git relog 查看回退记录的每一次命令，包括删除又恢复的历史记录撤销修改：场景一：改错了file文件，则丢掉工作区对file文件的修改 git checkout --file.txt 场景二：改错了file文件并提交到了暂存区，则 git reset HEAD file 就回到了场景一场景三：改错了file文件并添加到了暂存区，还提交到了版本库 参照版本回退分支：类似于平行宇宙，使用分支更安全，建议使用git branch 查看分支git branch &lt;bName&gt; 创建分支git checkout &lt;bName&gt; 切换分支git checkout -b &lt;bName&gt; 创建+切换分支git merge &lt;bName&gt; 合并某分支到当前分支git branch -d &lt;bName&gt; 删除某分支git branch -D &lt;bName&gt; 强制删除某分支，即使该分支有还没合并到本分支的内容git log -graph 查看分支合并图标签：指向一次commit的id，通常给一个开发分支做标记git tag 查看所有标签git tag v1.0 在当前分支上打标签git tag -a v1.1 -m "说明文字" 在当前分支上打带有说明文字的标签git log --pretty=oneline tagA..tagB 查看某两次之间的commitgit log --pretty=oneline tagA.. 查看某个标签之后的commit git push origin &lt;tagName&gt; 推送一个本地标签到远程库git push origin --tags 推送所有为推送的标签到远程库git tag -d &lt;tagName&gt; 删除标签 ### SVNSubversion，集中式版本控制系统从图书馆借本书，在家里修改，修改后还给图书馆123456789101112默认端口号3690repository 存放文件和对文件的修改历史checkout 提取到私人的工作空间，再进行内容的修改commit 提交操作，是原子操作，要么成功，要么失败回滚update 更新版本库status 列出工作副本所做出的变动列表diff 查看这些变动的详细信息revert 销毁待变更列表，并将工作状态恢复到初始状态merge 自动处理可以全合并的东西resolve 找出冲突，并告诉版本库如何处理冲突 设计模式单例模式 饿汉式 12345678910111213141516public class Singleton&#123; //直接创建对象 public static Singleton instance = new Singleton(); //私有化构造函数 private Singleton()&#123; &#125; //返回对象实例 public static getInstance()&#123; return instance; &#125;&#125; 懒汉式 123456789101112131415161718192021222324public class Singleton&#123; //声明对象引用 private static volatile Singleton singleton = null; //私有化构造函数 private Singleton()&#123; &#125; //返回对象实例 public static getInstance()&#123; if(singleton==null)&#123; synchronized(Singleton.class)&#123; if(singleton==null)&#123; singleton = new Singleton(); &#125; &#125; &#125; return singleton; &#125;&#125; 工厂模式## ###servlet是单例吗？servlet不是单例，只是容器只实例化它一次，表现出单例的效果。ServletContext可以进行多线程读写操作，所以不是线程安全的，ServletContext中药尽量少保存会被修改的数据 IO线程内存机制数据仓库Spring IOC和AOP数据库ssh框架封装继承多态JVMJDK1.8中用元数据空间代替了JDK1.7的永久代（调优比较困难），Metaspace所占用的内存空间不是虚拟机内部的，而是本地内存空间。 垃圾回收CSS、HTML、js、java、数据库Tomcat的结构，以及其类加载流程，线程模型，如何调优核心组件： Connector连接器，负责接收请求并把请求交给Container Container，一个容器，主要装具有处理请求的组件（service是对外提供服务的组件，将他们两个关联起来处理请求 类加载器流程： Bootstrap引导类加载器，加载JVM启动所需要的类，以及标准扩展类 System系统类加载器 Webapp应用类加载器 Common通用类加载器 线程模型：支持BIO、NIO、APR、AIO]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Shiro]]></title>
    <url>%2FJava%2FShiro%2F</url>
    <content type="text"><![CDATA[Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。 Shiro的核心部分是SecurityManager，负责安全认证和授权 Subject 主体 代表了当前操作“用户”，是个抽象概念，不一定是指具体的人，与当前应用交互的任何东西都称为Subject，如第三方进程、后台帐户,网路爬虫、机器人。所有的Subject都绑定到SecurityManager，与Subject的所有交互，都委托给SecurityManager，SecurityManager才是实际的执行者。 通过SecurityUtils.getSubject()来获取Subject，Subject再获取Session对象subject.getSession(),这里的Session对象并不是HttpSession，它不需要依赖http服务器，Shiro的Session的默认实现类实现类：org.apache.shiro.mgt.DelegatingSession SecurityManager 安全管理器 相当于SpringMVC中的DispatchServlet，是Shiro的核心部分，所有具体的交互都通过它进行控制，SecurityManager管理着所有Subject、且负责进行认证、授权、会话、缓存的管理。 AuthenticationInfo 角色信息集合 负责Subject认证。 AuthorizationInfo 角色的权限信息集合 授权器，用来决定主题是否有权限进行相应的操作 Realm 域 充当了Shiro与数据间的连接器，当用户执行角色登陆和权限验证时，Shiro会从应用配置的Realm中查找用户及其权限信息。相当于一个安全相关的DAO，封装了数据源的连接细节，并在需要时将数据提供给Shiro，配置Shiro时，必须至少指定一个Realm。Realm提供AuthenticationInfo和AuthorizationInfo两个对象。 SessionManager 会话管理 管理会话生命周期的组件 CacheManager 缓存控制器 来管理用户、角色、权限等缓存的，因为这些数据基本上很少改变，放入缓存可以提高访问性能。类似于Map&lt;String,Object&gt;对象，通过put保存对象，get取回对象。 Cryptgraphy 密码模块 Shiro提供的加密组件，用于密码的加密解密。 获取Subject对象。 测试当前用户是否已经被认证，即是否已经登录，调用Subject的isAuthenticated（）方法。 没有登录的话，把用户名和密码封装为UsernamePasswordToken对象，UsernamePasswordToken token = new UsernamePasswordToken（”username”,”password”）; 创建表单页面 把请求提交到SpringMVC和Handler 获取用户名和密码 token.setRememberMe(true); 调用Subject对象的login(token)方法执行登录。 登录时的几种异常 UnknownAccountException 没有指定用户 。 IncorrectCredentialsException 账户存在，密码不匹配。 LockedAccountException 用户被锁定。 AuthenticationException 前三种异常的父类。 自定义Realm方法，从数据库中获取对应的记录，返回给Shiro 实际上需要继承org.apache.shiro.realm.AuthenticatingRealm类实现doGetAuthenticationInfo（AuthenticationToken）方法 由Shiro完成与密码的比对 执行登出 Subject对象的logout()方法。判断是否有这个角色，Subject对象调用hasRole(“username”)方法。判断用户是否有这种权限，Subject对象调用isPermitted(“)方法。.ini配置文件规则：用户名=密码，角色1，角色2角色=权限1，权限2即根据用户名找角色，再根据角色找权限。角色= 类型：操作：实例 12345678910111213141516171819202122applicationContext.xml中配置&lt;bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean"&gt; &lt;propertry name="securityManager" ref="securityManager"/&gt; &lt;property name="loginUrl" value="/login.jsp"/&gt; &lt;property name="successUrl" value="/list.jsp"/&gt; &lt;property name="unauthorizedUrl" value="/unauthorized.jsp"/&gt; &lt;!--配置那些页面需要保护，以及访问这些页面需要的权限,首次配置优先 anon 可以被匿名访问 authc 必须认证（即登陆）后才能访问的页面 logout 登出 --&gt; &lt;propertry name="filterChainDefinitions"&gt; &lt;value&gt; /login.jsp = anon /shiro/login = anon /shiro/logout = logout /** = authc &lt;/value&gt; &lt;/propertry&gt;&lt;/bean&gt; ShiroRealm.java继承AuthenticationRealm类，重写方法doGetAuthenticationInfo（AuthenticationToken token），返回AuthenticationInfo对象1234567891011121314方法体：1.把AuthenticationToken对象转换成UsernamePasswordToken对象AuthenticationToken upToken = (UsernamePasswordToken)token;2.从UsernamePasswordToken中获取usernameString username = upToken.getUsername();3.调用数据库的方法，从数据库中查询username对应的用户记录4.判断异常并抛出5.根据用户信息的情况，来构建AuthenticationInfo对象并返回，通常使用的实现类是SimpleAuthenticationInfoObject principal = username;//认证的实体信息，可以是username，也可以是实体类对象。Object credentials = "123456";//密码。String realmName = getName();//获取当前realm对应的nameSimpleAuthenticationInfo info = new SimpleAuthenticationInfo(principal,credentials,realmName);return info; 密码的比对,通过AuthenticatingRealm的credentialsMatcher属性进行密码的比对。 把字符串加密为MD5：替换当前Realm的credentialsMatcher属性，直接使用HashedCredentialsMatcher对象，并设置加密算法。 String hashAlgorithmName = “MD5”;//加密方式Object credentials = “123456”;//初始密码Object salt = null;//盐int hashIterations = 1024;//加密次数Object result = new SimpleHash(hashAlgorithmName,credentials,salt,hashIterations);//加密结果 授权需要继承AuthoriingRealm类，并实现其doGetAuthorizationInfo方法。AuthorIzingRealm类继承自AuthenticatingRealm，但其并没有实现这个方法，所以认证和授权只需要继承AuthorizingRealm即可，同时实现他的两个抽象方法。]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[CDN]]></title>
    <url>%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF%2FCDN%2F</url>
    <content type="text"><![CDATA[CDN介绍CDN，Content Delivery Network（内容分发网络），是建立在网络之上的，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网路拥塞，提高用户访问相应速度和命中率。 CDN的关键技术为：内容存储、分发技术。CDN目的：解决因分布、宽带、服务器性能带来的访问延迟问题，适用于站点加速、点播、直播等，使用户可就近获得所需内容，解决Internet网络拥挤，提高用户网站响应速度和成功率。 CDN负载均衡设备会根据用户IP地址，以及用户请求的URL，选择一台所属区域的区域负载均衡设备，然后为用户选择一台合适的缓存服务器提供服务，选择依据包括： 根据用户IP地址，判断哪一台服务器距用户最近（类似于JD快递）。 根据用户URL携带的内容名称，判断哪一台服务器上有用户所需内容。 查询各服务器当前的负载情况，判断哪一台服务器尚有服务能力。 全局负载均衡设备把服务器的ip地址返回给用户，用户向缓存服务器发送请求，缓存服务器响应请求。 例如，在HTML中引入阿里的js，而不是本地的js文件，就会向阿里就近服务器上找js或css文件，速度和稳定性有保障，又减少了服务器的资源负担。]]></content>
      <categories>
        <category>计算机网路</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[随笔]]></title>
    <url>%2FJava%2F%E9%9A%8F%E7%AC%94%2F</url>
    <content type="text"><![CDATA[java中Runnable 和 Callable 有什么不同？Runnable和Callable都代表那些要在不同的线程中执行的任务，Runnable从jdk1.0开始就有了，Callable是在jdk1.5出的，Callable的call（）方法可以返回值和抛出异常，而Runnable的run（）方法没有这些功能，Callable可以返回装载有返回结果的Future对象。当run（）或者call（）方法执行完成后，线程会自动结束。 volatile是一个特殊的修饰符，只有成员变量才能使用它。在java并发程序缺少同步类的情况下，多线程对成员变量的操作对其他线程是透明的。volatile变量可以保证下一个读取操作在上一个写操作完成后进行。 Vector使用同步方法来实现线程安全的，ArrayList不是线程安全的。 如何在两个线程间实现共享数据？通过共享对象，或者使用像阻塞队列这样的数据结构。 notify和notifyAll的区别？notify不能唤醒某个具体线程，所以只有一个线程在等待的时候才有用，notifyAll唤醒所有线程，并允许他们之间争夺线程锁，确保至少有一个线程能继续运行。 wait、notify、notifyAll方法都是锁级别的操作，所 以把他们定义在Object中，因为锁属于对象。 sleep（）和wait（）方法的区别？都用来暂停当前运行的程序，sleep（）方法是Thread方法，只是短暂暂停，不释放线程锁，wait( )是对象方法，会释放对象锁。 jsp的四大域对象：pageContext，request，session，application九大内置对象：Request、Response、Session、Out、PageContext、Page、Exception、Application、Config AJAX通过异步模式，可以实现局部刷新，在不更新整个页面的前提下维护数据，承担了一部分本来由服务器承担的工作，从而减少了大量用户下的服务器负载。 SpringMVC的常用注解：@RequestMapping 用于请求url映射@RequestBody 注释实现接收http请求的json数据，将json数据转换为java对象。@ResponseBody 注释实现将controller方法返回对象转化为json相应给客户。 拦截器与过滤器的区别：拦截器是基于java的反射机制，过滤器是基于函数回调的；拦截器不依赖于servlet容器。拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。拦截器可以访问action上下文，值栈（本质是ArrayList）里的对象，而过滤器不能。action声明周期中，拦截器可以多次被调用，而过滤器只能在容器中初始化时被调用。 Struts2action是多例的可分为三个部分：核心控制器FilterDispatch、业务控制器action、用户实现的业务逻辑组件 工作原理：① 客户端初始化一个servlet容器的请求② 请求经过一系列的过滤器③ 接着FilterDispatch被调用④ ActionMapper决定需要哪个action，FilterDispatch把请求的处理交给ActionProxy⑤ ActionProxy通过Configuration Manager询问框架的配置文件，找到需要调用的action类⑥ ActionProxy创建一个ActionInvocation的实例⑦ ActionInvocation的实例通过命名模式来调用Action，前后涉及到拦截器调用⑧ Action执行完毕，ActionInvocation负责根据struts.xml的配置找到对应的返回结果，返回结果通常是jsp。 工作流程 1、客户端浏览器发出HTTP请求. 2、根据web.xml配置，该请求被FilterDispatcher接收 3、根据struts.xml配置，找到需要调用的Action类和方法， 并通过IoC方式，将值注入给Aciton 4、Action调用业务逻辑组件处理业务逻辑，这一步包含表单验证。 5、Action执行完毕，根据struts.xml中的配置找到对应的返回结果result，并跳转到相应页面 6、返回HTTP响应到客户端浏览器 Struts2和SpringMVC的区别1.springmvc入口是一个servlet前端控制器(DispatcherServlet),struts2入口是一filter过滤器(StrutsPrepareAndExecuteFilter). 2.struts2通过在action类中定义成员变量接收参数,(属性驱动和模型驱动),它只能使用多例模式管理action. springmvc通过在coontroller方法中定义形参接收参数,springmvc可以使用单例模式管理controller. 3.springmvc是基于方法开发的,注解开发中使用requestMapping将url和方法进行 映射,如果根据url找到controller类的方法生成一个handler处理器对象(只包括一个method).struts2是基于类开发的,每个请求过来创建一个action实例,实例对象中有若干个方法.开发中建议使用springmvc,springmvc方法更类似service业务方法. 4.struts2采用值栈存储请求和相应的数据,通过OGNL存取数据,springmvc通过参数绑定期将request请求内容解析,并给方法形参赋值. 5.struts2和springmvc的速度是相当的,由于struts2的漏洞较多,跟多企业使用springmvc 散列算法和加密都是将Object变成一串无意义的字符串，不同的是散列算法是单向的，不可复原。 因为每次接口调用都要搜索方法表，所以接口的调用慢于类调用]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Funcategorized%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
